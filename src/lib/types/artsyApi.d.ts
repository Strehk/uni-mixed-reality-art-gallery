/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/access_controls": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve access controls. */
        get: operations["getApiV1AccessControls"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/access_token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Expire an OAuth access token. */
        delete: operations["deleteApiV1AccessToken"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/account_requests": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create an account request, which may be associated with a user. */
        post: operations["postApiV1AccountRequests"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admins/representatives": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve all representatives. */
        get: operations["getApiV1AdminsRepresentatives"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admins/available_representatives": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve available representatives. */
        get: operations["getApiV1AdminsAvailableRepresentatives"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admins": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve all admins. */
        get: operations["getApiV1Admins"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/artist_career_highlights": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Return all artist career highlights for an artist. */
        get: operations["getApiV1ArtistCareerHighlights"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/artist_career_highlight/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Update an artist career highlight. */
        put: operations["putApiV1ArtistCareerHighlightId"];
        post?: never;
        /** @description Delete an artist career highlight. */
        delete: operations["deleteApiV1ArtistCareerHighlightId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/artist_career_highlight": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create an artist career highlight. */
        post: operations["postApiV1ArtistCareerHighlight"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/artist_series": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve artist series */
        get: operations["getApiV1ArtistSeries"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/artist_series/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve an artist series */
        get: operations["getApiV1ArtistSeriesId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/artist/{id}/partners": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve all partners that have artworks by an artist. */
        get: operations["getApiV1ArtistIdPartners"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/artist/{id}/partner_artists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve all partner artist relationships for a partner. */
        get: operations["getApiV1ArtistIdPartnerArtists"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/artist/{id}/genome": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve an artist's genome. */
        get: operations["getApiV1ArtistIdGenome"];
        /** @description Update an artist's genome. */
        put: operations["putApiV1ArtistIdGenome"];
        post?: never;
        /** @description Clear an artist's genome. */
        delete: operations["deleteApiV1ArtistIdGenome"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/artist/{id}/genome/incomplete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Mark an artist's genome incomplete. */
        put: operations["putApiV1ArtistIdGenomeIncomplete"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/artist/{id}/genome/complete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Mark an artist's genome complete. */
        put: operations["putApiV1ArtistIdGenomeComplete"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/artist/{id}/genome/genes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve an artist's genes, sorted by value. */
        get: operations["getApiV1ArtistIdGenomeGenes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/artist/{id}/merge": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Merge two artists (any artworks, follows, and posts) */
        post: operations["postApiV1ArtistIdMerge"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/artist/{id}/duplicates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a cluster of potentially duplicated artist records (including the specified Artist). */
        get: operations["getApiV1ArtistIdDuplicates"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/artist/{id}/image(/{image_version})": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get an artist's image. */
        get: operations["getApiV1ArtistIdImage(ImageVersion)"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/artist": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a new artist. */
        post: operations["postApiV1Artist"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/artist/{id}/artworks/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve deep data for all artist's artworks. Most iconic works appear first, followed by recently published ones. */
        get: operations["getApiV1ArtistIdArtworksAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/artist/{id}/artworks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve all artist's artworks. */
        get: operations["getApiV1ArtistIdArtworks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/artist/{id}/admin_note": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create an artist admin_note. */
        post: operations["postApiV1ArtistIdAdminNote"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/artist/{id}/admin_notes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve all artist's admin_notes. */
        get: operations["getApiV1ArtistIdAdminNotes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/artist/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve an artist. */
        get: operations["getApiV1ArtistId"];
        /** @description Update an existing artist. */
        put: operations["putApiV1ArtistId"];
        post?: never;
        /** @description Delete an existing artist. */
        delete: operations["deleteApiV1ArtistId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/artist/{id}/artwork_inquiry_requests": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve all artwork inquiry requests by a artist. */
        get: operations["getApiV1ArtistIdArtworkInquiryRequests"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/artist/{id}/follow/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve all users that follow an artist. */
        get: operations["getApiV1ArtistIdFollowUsers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/artists/merge": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Merge two or more artists */
        post: operations["postApiV1ArtistsMerge"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/artists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve artists. */
        get: operations["getApiV1Artists"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/artists/{match}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a subset of artists. */
        get: operations["getApiV1ArtistsMatch"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/artists/popular": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve the most followed artists. */
        get: operations["getApiV1ArtistsPopular"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/artists/trending/scores": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve trending artists with full score breakdown. */
        get: operations["getApiV1ArtistsTrendingScores"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/artists/trending": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve trending artists in descending order. */
        get: operations["getApiV1ArtistsTrending"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/artwork_version/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve an artwork version. */
        get: operations["getApiV1ArtworkVersionId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/artworks/collections/batch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Add / remove artworks to / from collections */
        post: operations["postApiV1ArtworksCollectionsBatch"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/artworks/deleted": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve deleted artworks. */
        get: operations["getApiV1ArtworksDeleted"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/artworks/sellable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve top sellable artworks. */
        get: operations["getApiV1ArtworksSellable"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/artworks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve all not deleted artworks. */
        get: operations["getApiV1Artworks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/artworks_discovery": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getApiV1ArtworksDiscovery"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/artwork/{artwork_id}/inventory": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Create or update an artwork's inventory. */
        put: operations["putApiV1ArtworkArtworkIdInventory"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/artwork/{artwork_id}/images/reposition": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Reposition artwork images. */
        post: operations["postApiV1ArtworkArtworkIdImagesReposition"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/artwork/{artwork_id}/images": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve artwork images. */
        get: operations["getApiV1ArtworkArtworkIdImages"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/artwork/{artwork_id}/images/default/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Set the default image. */
        put: operations["putApiV1ArtworkArtworkIdImagesDefaultId"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/artwork/{artwork_id}/image/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Update an artwork image. */
        put: operations["putApiV1ArtworkArtworkIdImageId"];
        post?: never;
        /** @description Remove an image from an artwork. */
        delete: operations["deleteApiV1ArtworkArtworkIdImageId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/artwork/{artwork_id}/image": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Add an image to an artwork. */
        post: operations["postApiV1ArtworkArtworkIdImage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/artwork/{artwork_id}/default_image(/{image_version})": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get an artwork's default image. */
        get: operations["getApiV1ArtworkArtworkIdDefaultImage(ImageVersion)"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/artwork/{artwork_id}/image/{id}(/{image_version})": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get an artwork's image. */
        get: operations["getApiV1ArtworkArtworkIdImageId(ImageVersion)"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/artwork/{id}/genome": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve an artwork's genome. */
        get: operations["getApiV1ArtworkIdGenome"];
        /** @description Update an artwork's genome. */
        put: operations["putApiV1ArtworkIdGenome"];
        post?: never;
        /** @description Clear an artwork's genome. */
        delete: operations["deleteApiV1ArtworkIdGenome"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/artwork/{id}/genome/incomplete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Mark an artwork's genome incomplete. */
        put: operations["putApiV1ArtworkIdGenomeIncomplete"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/artwork/{id}/genome/complete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Mark an artwork's genome complete. */
        put: operations["putApiV1ArtworkIdGenomeComplete"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/artwork/{id}/view": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Record a view of an artwork. */
        post: operations["postApiV1ArtworkIdView"];
        /** @description Delete a recorded view of an artwork. */
        delete: operations["deleteApiV1ArtworkIdView"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/artwork": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create an artwork. */
        post: operations["postApiV1Artwork"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/artwork/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve an artwork. */
        get: operations["getApiV1ArtworkId"];
        /** @description Update an existing artwork. */
        put: operations["putApiV1ArtworkId"];
        post?: never;
        /** @description Delete an artwork. */
        delete: operations["deleteApiV1ArtworkId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/artwork/{id}/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Add/remove tags to an artwork. */
        put: operations["putApiV1ArtworkIdTags"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/artwork/{id}/artwork_inquiry_requests": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve all artwork inquiry requests for an artwork. */
        get: operations["getApiV1ArtworkIdArtworkInquiryRequests"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/artwork/{artwork_id}/edition_set/{id}/inventory": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Create or update an edition set's inventory. */
        put: operations["putApiV1ArtworkArtworkIdEditionSetIdInventory"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/artwork/{artwork_id}/edition_set/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Update an existing edition set. */
        put: operations["putApiV1ArtworkArtworkIdEditionSetId"];
        post?: never;
        /** @description Delete an existing edition set. */
        delete: operations["deleteApiV1ArtworkArtworkIdEditionSetId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/artwork/{artwork_id}/edition_set": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create an artwork edition set. */
        post: operations["postApiV1ArtworkArtworkIdEditionSet"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/bank_account/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a bank account. */
        get: operations["getApiV1BankAccountId"];
        /** @description Update a bank account. */
        put: operations["putApiV1BankAccountId"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/bank_account": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Add a bank account. */
        post: operations["postApiV1BankAccount"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/bidder_positions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve bidder positions. */
        get: operations["getApiV1BidderPositions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/bidder_position/{id}/retract": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Retract a bidder position. */
        put: operations["putApiV1BidderPositionIdRetract"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/bidder_position/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a bidder position. */
        get: operations["getApiV1BidderPositionId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/bidder_position": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Place a bid with a maximum amount in cents. */
        post: operations["postApiV1BidderPosition"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/bidder/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a bidder registration. */
        get: operations["getApiV1BidderId"];
        /** @description Register to bid. */
        put: operations["putApiV1BidderId"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/bidder": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Find a bidder registration by phone number or paddle number. */
        get: operations["getApiV1Bidder"];
        put?: never;
        /** @description Register to bid. */
        post: operations["postApiV1Bidder"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/bidders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve all bidder registrations. Optionally scope by Sale or User. */
        get: operations["getApiV1Bidders"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/bids": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve bids. */
        get: operations["getApiV1Bids"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/bid/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a bid. */
        get: operations["getApiV1BidId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/buyers_premiums": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve buyer's premiums. */
        get: operations["getApiV1BuyersPremiums"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/callbacks/stripe_connect": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Receive Connect webhooks from Stripe. */
        post: operations["postApiV1CallbacksStripeConnect"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/callbacks/stripe": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Receive webhooks from Stripe. */
        post: operations["postApiV1CallbacksStripe"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/callbacks/segment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Webhook for receiving updates from Segment */
        post: operations["postApiV1CallbacksSegment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/callbacks/jumio": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Receive and process webhooks from Jumio */
        post: operations["postApiV1CallbacksJumio"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/callbacks/gemini": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Receive webhook from Gemini Image Processing Service. */
        post: operations["postApiV1CallbacksGemini"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/callbacks/braze": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Webhook for receiving updates from Braze */
        post: operations["postApiV1CallbacksBraze"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/collection/{id}/artists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve an existing collection's artists. */
        get: operations["getApiV1CollectionIdArtists"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/collection/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve an existing collection. */
        get: operations["getApiV1CollectionId"];
        /** @description Update a collection. */
        put: operations["putApiV1CollectionId"];
        post?: never;
        /** @description Delete an existing collection. */
        delete: operations["deleteApiV1CollectionId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/collection": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a collection. */
        post: operations["postApiV1Collection"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/collection/{collection_id}/artwork/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Add an artwork to a collection. */
        post: operations["postApiV1CollectionCollectionIdArtworkId"];
        /** @description Remove an artwork from a collection. */
        delete: operations["deleteApiV1CollectionCollectionIdArtworkId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/collection/{collection_id}/artworks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve artworks within a collection. */
        get: operations["getApiV1CollectionCollectionIdArtworks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/collections": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve user's collections. */
        get: operations["getApiV1Collections"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/collector_profiles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve collector profiles. */
        get: operations["getApiV1CollectorProfiles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/collector_profile/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Update an existing collector profile. */
        put: operations["putApiV1CollectorProfileId"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/collector_profile_summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a summary of a collector profile/artwork combination. */
        get: operations["getApiV1CollectorProfileSummary"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/credit_card/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a credit card. */
        get: operations["getApiV1CreditCardId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/credit_cards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve credit cards. */
        get: operations["getApiV1CreditCards"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cultures": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve cultures. */
        get: operations["getApiV1Cultures"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/devices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve devices. */
        get: operations["getApiV1Devices"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/device/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve an existing device. */
        get: operations["getApiV1DeviceId"];
        /** @description Update an existing device. */
        put: operations["putApiV1DeviceId"];
        post?: never;
        /** @description Delete an existing device. */
        delete: operations["deleteApiV1DeviceId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/device": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create or update a device. */
        post: operations["postApiV1Device"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/exchange_rates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve latest exchange rates. */
        get: operations["getApiV1ExchangeRates"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/fair/{id}/shows": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve all fair's shows. */
        get: operations["getApiV1FairIdShows"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/fair/{id}/sections": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fair's sections. */
        get: operations["getApiV1FairIdSections"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/fair/{id}/partners": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fair's partners. */
        get: operations["getApiV1FairIdPartners"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/fair/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a fair. */
        get: operations["getApiV1FairId"];
        /** @description Update an existing fair. */
        put: operations["putApiV1FairId"];
        post?: never;
        /** @description Delete an existing fair. */
        delete: operations["deleteApiV1FairId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/fair/{fair_id}/image": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Modify the image on a fair. */
        put: operations["putApiV1FairFairIdImage"];
        /** @description Add an image to a fair. */
        post: operations["postApiV1FairFairIdImage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/fair": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a new fair. */
        post: operations["postApiV1Fair"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/fair/{id}/artists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fair's artists. */
        get: operations["getApiV1FairIdArtists"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/fair/{fair_id}/fair_event/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a fair event. */
        get: operations["getApiV1FairFairIdFairEventId"];
        /** @description Update an existing fair event. */
        put: operations["putApiV1FairFairIdFairEventId"];
        post?: never;
        /** @description Delete an existing fair event. */
        delete: operations["deleteApiV1FairFairIdFairEventId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/fair/{fair_id}/fair_event": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a new fair event. */
        post: operations["postApiV1FairFairIdFairEvent"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/fair/{fair_id}/fair_events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve all fair events. */
        get: operations["getApiV1FairFairIdFairEvents"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/fair/{fair_id}/fair_event_group": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a new fair event group. */
        post: operations["postApiV1FairFairIdFairEventGroup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/fair/{fair_id}/fair_event_group/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a fair event group. */
        get: operations["getApiV1FairFairIdFairEventGroupId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/fair/{fair_id}/fair_event_groups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve all fair event groups. */
        get: operations["getApiV1FairFairIdFairEventGroups"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/fair_organizers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve all fair organizers. */
        get: operations["getApiV1FairOrganizers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/fair_organizer/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a fair organizer. */
        get: operations["getApiV1FairOrganizerId"];
        /** @description Update a fair organizer. */
        put: operations["putApiV1FairOrganizerId"];
        post?: never;
        /** @description Delete a fair organizer. */
        delete: operations["deleteApiV1FairOrganizerId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/fair_organizer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a fair organizer. */
        post: operations["postApiV1FairOrganizer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/fairs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve all fairs. */
        get: operations["getApiV1Fairs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/featured_links": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get all links, optionally by label, item_type, or owner. */
        get: operations["getApiV1FeaturedLinks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/featured_link/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve an existing link. */
        get: operations["getApiV1FeaturedLinkId"];
        /** @description Update an existing link. */
        put: operations["putApiV1FeaturedLinkId"];
        post?: never;
        /** @description Delete an existing link. */
        delete: operations["deleteApiV1FeaturedLinkId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/featured_link": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a new link. */
        post: operations["postApiV1FeaturedLink"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/features": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve features. */
        get: operations["getApiV1Features"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/feature/{id}/image(/{image_version})": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a feature's image. */
        get: operations["getApiV1FeatureIdImage(ImageVersion)"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/feature/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve an existing feature. */
        get: operations["getApiV1FeatureId"];
        /** @description Update an existing feature. */
        put: operations["putApiV1FeatureId"];
        post?: never;
        /** @description Delete an existing feature. */
        delete: operations["deleteApiV1FeatureId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/feature": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a feature. */
        post: operations["postApiV1Feature"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/feedback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create feedback. */
        post: operations["postApiV1Feedback"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/filter/sale_artworks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Filtered sale artworks search. */
        get: operations["getApiV1FilterSaleArtworks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/filter/artworks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Filtered artworks search. */
        get: operations["getApiV1FilterArtworks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/filter/sales": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Filtered sales search. */
        get: operations["getApiV1FilterSales"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/follow_shows": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get all FollowShow instances that target the current user */
        get: operations["getApiV1FollowShows"];
        put?: never;
        /** @description Add a show to the list of shows a user is following */
        post: operations["postApiV1FollowShows"];
        /** @description allow a user to unfollow a show */
        delete: operations["deleteApiV1FollowShows"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/gene_families": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a list of gene families */
        get: operations["getApiV1GeneFamilies"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/gene_type/{id}/genes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve deep data for all genes of a particular gene type. */
        get: operations["getApiV1GeneTypeIdGenes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/gene_type": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a gene type. */
        post: operations["postApiV1GeneType"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/gene_type/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a gene type. */
        get: operations["getApiV1GeneTypeId"];
        /** @description Updated a gene type. */
        put: operations["putApiV1GeneTypeId"];
        post?: never;
        /** @description Delete a gene type. */
        delete: operations["deleteApiV1GeneTypeId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/gene_types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve all gene types. */
        get: operations["getApiV1GeneTypes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/gene/{id}/artworks/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve deep data for all partner artworks. */
        get: operations["getApiV1GeneIdArtworksAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/gene/{id}/similar": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve similar genes. */
        get: operations["getApiV1GeneIdSimilar"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/gene/{id}/artworks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve artworks representative of a gene, ordered by gene value. */
        get: operations["getApiV1GeneIdArtworks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/gene/{id}/artists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve artists representative of a gene, ordered by gene value. */
        get: operations["getApiV1GeneIdArtists"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/gene": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a gene. */
        post: operations["postApiV1Gene"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/gene/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a gene. */
        get: operations["getApiV1GeneId"];
        /** @description Updated a gene. */
        put: operations["putApiV1GeneId"];
        post?: never;
        /** @description Delete a gene. */
        delete: operations["deleteApiV1GeneId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/gene/{id}/image(/{image_version})": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a gene's image. */
        get: operations["getApiV1GeneIdImage(ImageVersion)"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/genes/partner_applied": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve all genes that are available for partner applied categories. */
        get: operations["getApiV1GenesPartnerApplied"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/genes/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve all genes, with all json. */
        get: operations["getApiV1GenesAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/genes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve all genes. */
        get: operations["getApiV1Genes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/genome/map": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a genome map, ie. all genes organized by type. */
        get: operations["getApiV1GenomeMap"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/hero_units/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Return a hero unit. */
        get: operations["getApiV1HeroUnitsId"];
        /** @description Update a hero unit. */
        put: operations["putApiV1HeroUnitsId"];
        post?: never;
        /** @description Delete a hero unit. */
        delete: operations["deleteApiV1HeroUnitsId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/hero_units": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Return hero units sorted by position. */
        get: operations["getApiV1HeroUnits"];
        put?: never;
        /** @description Create a hero unit. */
        post: operations["postApiV1HeroUnits"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/identity_verifications": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a list of user identity verifications */
        get: operations["getApiV1IdentityVerifications"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/identity_verification/{id}/scan_references": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description fetch the scan references that have been created for an identity verification */
        get: operations["getApiV1IdentityVerificationIdScanReferences"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/identity_verification/{id}/override": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description manually set the state on an identity verification */
        post: operations["postApiV1IdentityVerificationIdOverride"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/identity_verification/{id}/overrides": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description fetch the overrides that have been applied to an identity verification */
        get: operations["getApiV1IdentityVerificationIdOverrides"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/identity_verification/{id}/start": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Call external identity verification service and return URL allowing the client to verify their identity */
        put: operations["putApiV1IdentityVerificationIdStart"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/identity_verification": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create an identity verification */
        post: operations["postApiV1IdentityVerification"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/identity_verification/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve an identity verification. */
        get: operations["getApiV1IdentityVerificationId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/inquiry_request_questions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve the inquiry questions. */
        get: operations["getApiV1InquiryRequestQuestions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/inquiry_request/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve an inquiry request by id. */
        get: operations["getApiV1InquiryRequestId"];
        /** @description Update an existing inquiry request. */
        put: operations["putApiV1InquiryRequestId"];
        post?: never;
        /** @description Delete an existing inquiry request. */
        delete: operations["deleteApiV1InquiryRequestId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/inquiry_request/{id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Add a status to an inquiry request. */
        post: operations["postApiV1InquiryRequestIdStatus"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/inquiry_requests": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve all artwork inquiry requests. */
        get: operations["getApiV1InquiryRequests"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/invoice/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get an individual invoice. */
        get: operations["getApiV1InvoiceId"];
        /** @description Update an invoice. */
        put: operations["putApiV1InvoiceId"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/invoice": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a ready/paid invoice by token. */
        get: operations["getApiV1Invoice"];
        put?: never;
        /** @description Create an invoice. */
        post: operations["postApiV1Invoice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/invoice/{invoice_id}/payment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Add a payment. */
        post: operations["postApiV1InvoiceInvoiceIdPayment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/invoice/{invoice_id}/line_item/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Update a line item. */
        put: operations["putApiV1InvoiceInvoiceIdLineItemId"];
        post?: never;
        /** @description Delete a line item. */
        delete: operations["deleteApiV1InvoiceInvoiceIdLineItemId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/invoice/{invoice_id}/line_item": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Add a line item. */
        post: operations["postApiV1InvoiceInvoiceIdLineItem"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/invoices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get invoices. */
        get: operations["getApiV1Invoices"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/labs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve all available lab features. */
        get: operations["getApiV1Labs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/maps": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve maps. */
        get: operations["getApiV1Maps"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/marketing_collections/{marketing_collection_id}/artworks/{artwork_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Adds an artwork to a manually curated collection */
        post: operations["postApiV1MarketingCollectionsMarketingCollectionIdArtworksArtworkId"];
        /** @description Removes an artwork from a manually curated collection */
        delete: operations["deleteApiV1MarketingCollectionsMarketingCollectionIdArtworksArtworkId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/marketing_collections/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a marketing collection. */
        get: operations["getApiV1MarketingCollectionsId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/marketing_collections": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve marketing collections. */
        get: operations["getApiV1MarketingCollections"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/marketing_collections_categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve marketing collections grouped by category. */
        get: operations["getApiV1MarketingCollectionsCategories"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/match/partner/{id}/artists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Match a partner's artists by term. */
        get: operations["getApiV1MatchPartnerIdArtists"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/match/partner/{id}/shows": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Match a partner's partner shows by term. */
        get: operations["getApiV1MatchPartnerIdShows"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/match/partner/{id}/artworks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Match a partner's artworks by term. */
        get: operations["getApiV1MatchPartnerIdArtworks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/match/sale_artworks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Match sale artworks by term. */
        get: operations["getApiV1MatchSaleArtworks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/match/suggest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Global Auto Suggest (by name). */
        get: operations["getApiV1MatchSuggest"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/match": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Global Search (by name). */
        get: operations["getApiV1Match"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/match/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Autocomplete users by name & email. */
        get: operations["getApiV1MatchUsers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/match/artists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Search artists by name */
        get: operations["getApiV1MatchArtists"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/match/partner_shows": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Search partner shows by name */
        get: operations["getApiV1MatchPartnerShows"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/match/sales": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Search sales by name */
        get: operations["getApiV1MatchSales"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/match/cultures": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Search cultures by name */
        get: operations["getApiV1MatchCultures"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/match/genes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Search genes by name */
        get: operations["getApiV1MatchGenes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/match/fairs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Search fairs by name */
        get: operations["getApiV1MatchFairs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/match/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Autocomplete tags by name. */
        get: operations["getApiV1MatchTags"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/match/profiles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Autocomplete profiles by name. */
        get: operations["getApiV1MatchProfiles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/match/partners": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Autocomplete partners by name. */
        get: operations["getApiV1MatchPartners"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/match/pages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Autocomplete pages by name. */
        get: operations["getApiV1MatchPages"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/match/sets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Autocomplete ordered_sets by name. */
        get: operations["getApiV1MatchSets"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/match/hero_units": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Autocomplete hero_units by name. */
        get: operations["getApiV1MatchHeroUnits"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/match/features": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Autocomplete features by name. */
        get: operations["getApiV1MatchFeatures"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/match/featured_links": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Autocomplete featured_links by name. */
        get: operations["getApiV1MatchFeaturedLinks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/match/fair_organizers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Autocomplete fair_organizers by name. */
        get: operations["getApiV1MatchFairOrganizers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/match/artworks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Autocomplete artworks by name. */
        get: operations["getApiV1MatchArtworks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/anonymous_sessions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve anonymous sessions. */
        get: operations["getApiV1MeAnonymousSessions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/anonymous_session/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve an anonymous session. */
        get: operations["getApiV1MeAnonymousSessionId"];
        /** @description Update an existing anonymous session. */
        put: operations["putApiV1MeAnonymousSessionId"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/anonymous_session": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Updates an anonymous session. Uses cookied session_id if not specified. */
        put: operations["putApiV1MeAnonymousSession"];
        /** @description Creates [or updates] an anonymous session. */
        post: operations["postApiV1MeAnonymousSession"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/alert/{user_search_criteria_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Update an alert. */
        put: operations["putApiV1MeAlertUserSearchCriteriaId"];
        post?: never;
        /** @description Soft-delete (disable) an alert. */
        delete: operations["deleteApiV1MeAlertUserSearchCriteriaId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/alert/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve an alert. */
        get: operations["getApiV1MeAlertId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/alert": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create an alert. */
        post: operations["postApiV1MeAlert"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/alerts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getApiV1MeAlerts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/artists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve artists under management. */
        get: operations["getApiV1MeArtists"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/artwork_inquiry_requests": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve inquiry requests. */
        get: operations["getApiV1MeArtworkInquiryRequests"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/artwork_inquiry_request/{id}/send": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Send a delayed inquiry request. */
        put: operations["putApiV1MeArtworkInquiryRequestIdSend"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/artwork_inquiry_request/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve an existing inquiry request. */
        get: operations["getApiV1MeArtworkInquiryRequestId"];
        /** @description Update an existing inquiry request. */
        put: operations["putApiV1MeArtworkInquiryRequestId"];
        post?: never;
        /** @description Delete an existing inquiry request. */
        delete: operations["deleteApiV1MeArtworkInquiryRequestId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/artwork_inquiry_request": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create an artwork inquiry request. */
        post: operations["postApiV1MeArtworkInquiryRequest"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/trigger_campaign": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Trigger a campaign send. */
        post: operations["postApiV1MeTriggerCampaign"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/lot_standings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve my standing on given lots. */
        get: operations["getApiV1MeLotStandings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/labs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve my lab features. */
        get: operations["getApiV1MeLabs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/recently_viewed_artworks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Record a recently viewed artwork. */
        post: operations["postApiV1MeRecentlyViewedArtworks"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/user_flags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Set (or unset) user flag. */
        put: operations["putApiV1MeUserFlags"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve current user info. */
        get: operations["getApiV1Me"];
        /** @description Update user info. */
        put: operations["putApiV1Me"];
        post?: never;
        /** @description Delete current user. */
        delete: operations["deleteApiV1Me"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Change current user password. */
        put: operations["putApiV1MePassword"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/ping": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Validate current user token (only). */
        get: operations["getApiV1MePing"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/bidders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve my bidders. */
        get: operations["getApiV1MeBidders"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/bidder_positions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Deprecated - returns an empty list. */
        get: operations["getApiV1MeBidderPositions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Get a token for a client app. */
        post: operations["postApiV1MeToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/trust_token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a trust token valid for other Artsy services. */
        post: operations["postApiV1MeTrustToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/authentications/{provider}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Link a 3rd party account. */
        post: operations["postApiV1MeAuthenticationsProvider"];
        /** @description Unlink a 3rd party account. */
        delete: operations["deleteApiV1MeAuthenticationsProvider"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/authentications": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve third party authentications. */
        get: operations["getApiV1MeAuthentications"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/bank_accounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve bank accounts. */
        get: operations["getApiV1MeBankAccounts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/bank_account/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Deactive a bank account. */
        delete: operations["deleteApiV1MeBankAccountId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/bidder_position/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a bidder position. */
        get: operations["getApiV1MeBidderPositionId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/bidder_position": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Place a bid with a maximum amount in cents. */
        post: operations["postApiV1MeBidderPosition"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/collections": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Batch update Collections. */
        put: operations["putApiV1MeCollections"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/collector_profile/icon": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Change user icon. */
        put: operations["putApiV1MeCollectorProfileIcon"];
        post?: never;
        /** @description Delete user icon. */
        delete: operations["deleteApiV1MeCollectorProfileIcon"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/collector_profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get the existing collector profile for the current user or an anonymous session. */
        get: operations["getApiV1MeCollectorProfile"];
        /** @description Update an existing collector profile for the current user or an anonymous session. */
        put: operations["putApiV1MeCollectorProfile"];
        /** @description Create a new collector profile for the current user or an anonymous session. */
        post: operations["postApiV1MeCollectorProfile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/collector_profile/collector_reference/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Update a collector reference. */
        put: operations["putApiV1MeCollectorProfileCollectorReferenceId"];
        post?: never;
        /** @description Delete an existing collector reference. */
        delete: operations["deleteApiV1MeCollectorProfileCollectorReferenceId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/collector_profile/collector_references": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve all collector references for a collector profile. */
        get: operations["getApiV1MeCollectorProfileCollectorReferences"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/collector_profile/collector_reference": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a collector reference. */
        post: operations["postApiV1MeCollectorProfileCollectorReference"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/confirmation_emails": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Send a confirmation email. */
        post: operations["postApiV1MeConfirmationEmails"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/credit_cards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve my credit cards. */
        get: operations["getApiV1MeCreditCards"];
        put?: never;
        /** @description Add a credit card. */
        post: operations["postApiV1MeCreditCards"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/credit_card/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Deactive a credit card. */
        delete: operations["deleteApiV1MeCreditCardId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/follow/genes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve genes that you follow. */
        get: operations["getApiV1MeFollowGenes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/follow/artists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve artists that you follow. */
        get: operations["getApiV1MeFollowArtists"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/follow/artist/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Follow reference for a followed artist. */
        get: operations["getApiV1MeFollowArtistId"];
        /** @description Update a followed artist reference. */
        put: operations["putApiV1MeFollowArtistId"];
        post?: never;
        /** @description Stop following an artist. */
        delete: operations["deleteApiV1MeFollowArtistId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/follow/artist": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Follow an artist. */
        post: operations["postApiV1MeFollowArtist"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/follow/profiles/artworks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve artworks based on profile follows. */
        get: operations["getApiV1MeFollowProfilesArtworks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/follow/artists/artworks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve artworks based on artist follows. */
        get: operations["getApiV1MeFollowArtistsArtworks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/follow/gene/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Followed reference for a followed gene. */
        get: operations["getApiV1MeFollowGeneId"];
        /** @description Update a followed gene reference. */
        put: operations["putApiV1MeFollowGeneId"];
        post?: never;
        /** @description Stop following a gene. */
        delete: operations["deleteApiV1MeFollowGeneId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/follow/gene": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Follow a gene. */
        post: operations["postApiV1MeFollowGene"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/follow/profiles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve profiles that you follow. */
        get: operations["getApiV1MeFollowProfiles"];
        put?: never;
        /** @description Follow 1 or more profiles. */
        post: operations["postApiV1MeFollowProfiles"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/follow/profile/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Followed reference for a followed profile. */
        get: operations["getApiV1MeFollowProfileId"];
        put?: never;
        post?: never;
        /** @description Stop following a profile. */
        delete: operations["deleteApiV1MeFollowProfileId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/follow/profile/{profile_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Follow a profile. */
        post: operations["postApiV1MeFollowProfileProfileId"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/follow/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Follow a profile. */
        post: operations["postApiV1MeFollowProfile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/follow/shows": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve shows at a fair by partners whose profiles you follow. */
        get: operations["getApiV1MeFollowShows"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/follow/artists/shows": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve visible_to_public shows based on artist follows (default sorted by start_at). */
        get: operations["getApiV1MeFollowArtistsShows"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/inquiry_introduction": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Generate gallery introduction based on params. */
        post: operations["postApiV1MeInquiryIntroduction"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/inquiry_requests": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve inquiry requests. */
        get: operations["getApiV1MeInquiryRequests"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/inquiry_request/{id}/send": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Send a delayed inquiry request. */
        put: operations["putApiV1MeInquiryRequestIdSend"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/inquiry_request/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve an existing inquiry request. */
        get: operations["getApiV1MeInquiryRequestId"];
        /** @description Update an existing inquiry request. */
        put: operations["putApiV1MeInquiryRequestId"];
        post?: never;
        /** @description Delete an existing inquiry request. */
        delete: operations["deleteApiV1MeInquiryRequestId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/inquiry_request": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create an inquiry request. */
        post: operations["postApiV1MeInquiryRequest"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/lab/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Turn a lab feature on. */
        post: operations["postApiV1MeLabId"];
        /** @description Turn a lab feature off. */
        delete: operations["deleteApiV1MeLabId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/modules": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve states of eligible modules for a user */
        get: operations["getApiV1MeModules"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/my_collection_artworks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve current user's MyCollection artworks */
        get: operations["getApiV1MeMyCollectionArtworks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/notifications/mark_as_seen": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Mark notifications feed as seen */
        put: operations["putApiV1MeNotificationsMarkAsSeen"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/notifications": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Mark a user's notifications read */
        put: operations["putApiV1MeNotifications"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/notifications/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve one user's notification by notification ID */
        get: operations["getApiV1MeNotificationsId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/notifications/feed": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a user's notifications in bundles */
        get: operations["getApiV1MeNotificationsFeed"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/partners": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve partners under management. */
        get: operations["getApiV1MePartners"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/partner_offers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List partner offers for the current user */
        get: operations["getApiV1MePartnerOffers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/partner_offer/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Show a partner offer. */
        get: operations["getApiV1MePartnerOfferId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/representations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve specialist's representations. */
        get: operations["getApiV1MeRepresentations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/request_price_estimate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Request Price Estimate from the Artsy Specialist (does not fail if request has already been made) */
        post: operations["postApiV1MeRequestPriceEstimate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/search_criteria/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getApiV1MeSearchCriteriaId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/second_factors/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Update a disabled app or SMS second factor */
        put: operations["putApiV1MeSecondFactorsId"];
        post?: never;
        /** @description Disable (soft-delete) an enabled second factor */
        delete: operations["deleteApiV1MeSecondFactorsId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/second_factors/{id}/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Enable a disabled second factor */
        put: operations["putApiV1MeSecondFactorsIdEnable"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/second_factors/{id}/deliver": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Triggers delivery of a second factor */
        put: operations["putApiV1MeSecondFactorsIdDeliver"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/second_factors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve current user's enabled second factors. */
        get: operations["getApiV1MeSecondFactors"];
        put?: never;
        /** @description Create a new app/sms second factor, or re-generate backups. */
        post: operations["postApiV1MeSecondFactors"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/shows": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve shows based on artist follows, partner follows and location. */
        get: operations["getApiV1MeShows"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/suggested/artists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve suggested artists to follow. For now these are just related artists. */
        get: operations["getApiV1MeSuggestedArtists"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/suggested/artworks/homepage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Deprecated genomic recommendations API. */
        get: operations["getApiV1MeSuggestedArtworksHomepage"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List tasks for the current user */
        get: operations["getApiV1MeTasks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/task/{id}/acknowledge": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Acknowledge a task */
        put: operations["putApiV1MeTaskIdAcknowledge"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/task/{id}/dismiss": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Dismiss a task */
        put: operations["putApiV1MeTaskIdDismiss"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/user_fair_actions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve user fair actions for the current user or an anonymous session. */
        get: operations["getApiV1MeUserFairActions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/user_fair_action": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a user fair action for the current user or an anonymous session. */
        post: operations["postApiV1MeUserFairAction"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/user_interests": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve user interests of a collector profile. */
        get: operations["getApiV1MeUserInterests"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/user_interest/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get an interest bookmark. */
        get: operations["getApiV1MeUserInterestId"];
        /** @description Update a bookmarked interest reference. */
        put: operations["putApiV1MeUserInterestId"];
        post?: never;
        /** @description Stop bookmarking an interest. */
        delete: operations["deleteApiV1MeUserInterestId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/user_interest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Bookmark an interest. */
        post: operations["postApiV1MeUserInterest"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/user_interest/artists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve artists that you bookmarked. */
        get: operations["getApiV1MeUserInterestArtists"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/merchant_accounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve merchant accounts. */
        get: operations["getApiV1MerchantAccounts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/merchant_account/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Deactivate a merchant account for a partner. */
        delete: operations["deleteApiV1MerchantAccountId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/merchant_account": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create or reactivate a merchant account for a partner. */
        post: operations["postApiV1MerchantAccount"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/notification_preferences": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get notification preferences. */
        get: operations["getApiV1NotificationPreferences"];
        put?: never;
        /** @description Update notification preferences. */
        post: operations["postApiV1NotificationPreferences"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/pages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve all pages. */
        get: operations["getApiV1Pages"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/page/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve an existing page. */
        get: operations["getApiV1PageId"];
        /** @description Update an existing page. */
        put: operations["putApiV1PageId"];
        post?: never;
        /** @description Delete an existing page. */
        delete: operations["deleteApiV1PageId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/page": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a page. */
        post: operations["postApiV1Page"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{id}/size(/{type})": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get total bytes for a partner's documents and images. */
        get: operations["getApiV1PartnerIdSize(Type)"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{partner_id}/show/{id}/neighbors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Given a partner show, retrieve the next and previous shows sorted by -start_at */
        get: operations["getApiV1PartnerPartnerIdShowIdNeighbors"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{partner_id}/show/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a partner show. */
        get: operations["getApiV1PartnerPartnerIdShowId"];
        /** @description Update an existing partner show. */
        put: operations["putApiV1PartnerPartnerIdShowId"];
        post?: never;
        /** @description Delete an existing partner show. */
        delete: operations["deleteApiV1PartnerPartnerIdShowId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{id}/show": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a new partner show. */
        post: operations["postApiV1PartnerIdShow"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{partner_id}/shows": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve all partner shows. */
        get: operations["getApiV1PartnerPartnerIdShows"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{partner_id}/show/{show_id}/document/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a partner show document. */
        get: operations["getApiV1PartnerPartnerIdShowShowIdDocumentId"];
        /** @description Update a partner show document. */
        put: operations["putApiV1PartnerPartnerIdShowShowIdDocumentId"];
        post?: never;
        /** @description Delete a partner show document. */
        delete: operations["deleteApiV1PartnerPartnerIdShowShowIdDocumentId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{partner_id}/show/{show_id}/document": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a partner show document. */
        post: operations["postApiV1PartnerPartnerIdShowShowIdDocument"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{partner_id}/show/{show_id}/documents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve all partner show documents for a given partner and show. */
        get: operations["getApiV1PartnerPartnerIdShowShowIdDocuments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{partner_id}/show/{partner_show_id}/artwork/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Update an artwork within a partner show. */
        put: operations["putApiV1PartnerPartnerIdShowPartnerShowIdArtworkId"];
        /** @description Add an artwork to a partner show. */
        post: operations["postApiV1PartnerPartnerIdShowPartnerShowIdArtworkId"];
        /** @description Remove an artwork from a partner show. */
        delete: operations["deleteApiV1PartnerPartnerIdShowPartnerShowIdArtworkId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{partner_id}/show/{partner_show_id}/reposition": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Reposition artworks in a partner show. */
        post: operations["postApiV1PartnerPartnerIdShowPartnerShowIdReposition"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{partner_id}/show/{partner_show_id}/artworks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve all artworks at a partner show sorted by position. */
        get: operations["getApiV1PartnerPartnerIdShowPartnerShowIdArtworks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{partner_id}/show/{partner_show_id}/artworks/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve deep data for all artworks at a partner show. */
        get: operations["getApiV1PartnerPartnerIdShowPartnerShowIdArtworksAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{partner_id}/show/{partner_show_id}/artists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve all artists at a partner show. */
        get: operations["getApiV1PartnerPartnerIdShowPartnerShowIdArtists"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{partner_id}/location/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a partner location. */
        get: operations["getApiV1PartnerPartnerIdLocationId"];
        /** @description Update an existing partner location. */
        put: operations["putApiV1PartnerPartnerIdLocationId"];
        post?: never;
        /** @description Delete an existing partner location. */
        delete: operations["deleteApiV1PartnerPartnerIdLocationId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{partner_id}/location/{id}/billing_location": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Set an existing partner location as a billing location (for subscription tax purposes). */
        put: operations["putApiV1PartnerPartnerIdLocationIdBillingLocation"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{id}/location": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a new partner location. */
        post: operations["postApiV1PartnerIdLocation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{partner_id}/locations/reposition": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Reposition partner locations. */
        post: operations["postApiV1PartnerPartnerIdLocationsReposition"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{partner_id}/locations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve all partner locations. */
        get: operations["getApiV1PartnerPartnerIdLocations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{partner_id}/location/{location_id}/day_schedule/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a partner location day schedule. */
        get: operations["getApiV1PartnerPartnerIdLocationLocationIdDayScheduleId"];
        /** @description Update a partner location day schedule. */
        put: operations["putApiV1PartnerPartnerIdLocationLocationIdDayScheduleId"];
        post?: never;
        /** @description Delete a partner location day schedule. */
        delete: operations["deleteApiV1PartnerPartnerIdLocationLocationIdDayScheduleId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{partner_id}/location/{location_id}/day_schedule": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a partner location schedule. */
        post: operations["postApiV1PartnerPartnerIdLocationLocationIdDaySchedule"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{partner_id}/location/{location_id}/day_schedules": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve all day schedules for a given location. */
        get: operations["getApiV1PartnerPartnerIdLocationLocationIdDaySchedules"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve an existing partner. */
        get: operations["getApiV1PartnerId"];
        /** @description Update an existing partner. */
        put: operations["putApiV1PartnerId"];
        post?: never;
        /** @description Delete an existing partner. */
        delete: operations["deleteApiV1PartnerId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{id}/artwork_inquiry_requests": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve all artwork inquiry requests by a partner. */
        get: operations["getApiV1PartnerIdArtworkInquiryRequests"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a new partner. */
        post: operations["postApiV1Partner"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{partner_id}/documents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve all documents for a given partner. */
        get: operations["getApiV1PartnerPartnerIdDocuments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{partner_id}/contact/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a partner contact. */
        get: operations["getApiV1PartnerPartnerIdContactId"];
        /** @description Update an existing partner contact. */
        put: operations["putApiV1PartnerPartnerIdContactId"];
        post?: never;
        /** @description Delete an existing partner contact. */
        delete: operations["deleteApiV1PartnerPartnerIdContactId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{partner_id}/contact": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a new partner contact. */
        post: operations["postApiV1PartnerPartnerIdContact"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{partner_id}/contacts/reposition": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Reposition partner contacts. */
        post: operations["postApiV1PartnerPartnerIdContactsReposition"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{partner_id}/contacts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve all partner contacts. */
        get: operations["getApiV1PartnerPartnerIdContacts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{partner_id}/contact/{id}/contact_type": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Update the contact type for a partner contact. */
        put: operations["putApiV1PartnerPartnerIdContactIdContactType"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{partner_id}/commission_exemptions_credit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Add a commission exemption credit in USD. */
        post: operations["postApiV1PartnerPartnerIdCommissionExemptionsCredit"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{id}/artwork/{artwork_id}/genome": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve an artwork's genome. */
        get: operations["getApiV1PartnerIdArtworkArtworkIdGenome"];
        /** @description Update an artwork's genome. */
        put: operations["putApiV1PartnerIdArtworkArtworkIdGenome"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{id}/artworks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve all partner artworks. */
        get: operations["getApiV1PartnerIdArtworks"];
        /** @description Bulk edit all partner artworks. */
        put: operations["putApiV1PartnerIdArtworks"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{id}/artworks/duplicate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create an artwork by duplicating attributes from original artwork. */
        post: operations["postApiV1PartnerIdArtworksDuplicate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{id}/artworks/{artwork_id}/offerable_activity": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve offerable activity for a partner artwork. */
        get: operations["getApiV1PartnerIdArtworksArtworkIdOfferableActivity"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{id}/artworks/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve deep data for all partner artworks. */
        get: operations["getApiV1PartnerIdArtworksAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{id}/artist/{artist_id}/neighbors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Given a partner artist, retrieve the next and previous artists sorted by -sort_id */
        get: operations["getApiV1PartnerIdArtistArtistIdNeighbors"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{id}/artist/{artist_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve partner artist. */
        get: operations["getApiV1PartnerIdArtistArtistId"];
        /** @description Update an existing partner artist. */
        put: operations["putApiV1PartnerIdArtistArtistId"];
        post?: never;
        /** @description Delete a partner artist. */
        delete: operations["deleteApiV1PartnerIdArtistArtistId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{id}/artists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve all partner artists. */
        get: operations["getApiV1PartnerIdArtists"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{id}/partner_artists/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve deep data for all partner artists. */
        get: operations["getApiV1PartnerIdPartnerArtistsAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{id}/partner_artists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve all partner artists. */
        get: operations["getApiV1PartnerIdPartnerArtists"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{partner_id}/artist/{artist_id}/document/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a partner artist document. */
        get: operations["getApiV1PartnerPartnerIdArtistArtistIdDocumentId"];
        /** @description Update a partner artist document. */
        put: operations["putApiV1PartnerPartnerIdArtistArtistIdDocumentId"];
        post?: never;
        /** @description Delete a partner artist document. */
        delete: operations["deleteApiV1PartnerPartnerIdArtistArtistIdDocumentId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{partner_id}/artist/{artist_id}/document": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a partner artist document. */
        post: operations["postApiV1PartnerPartnerIdArtistArtistIdDocument"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{partner_id}/artist/{artist_id}/documents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve all partner artist documents for a given partner and artist. */
        get: operations["getApiV1PartnerPartnerIdArtistArtistIdDocuments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{partner_id}/artist/{artist_id}/partner_artist_artworks/reposition": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Reposition partner artist artworks. */
        post: operations["postApiV1PartnerPartnerIdArtistArtistIdPartnerArtistArtworksReposition"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{partner_id}/artist/{artist_id}/partner_artist_artwork/{id}/neighbors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Given an artwork, retrieve the next and previous partner artist artworks sorted by position */
        get: operations["getApiV1PartnerPartnerIdArtistArtistIdPartnerArtistArtworkIdNeighbors"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{partner_id}/artist/{artist_id}/partner_artist_artworks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve partner published artworks by a given artist. */
        get: operations["getApiV1PartnerPartnerIdArtistArtistIdPartnerArtistArtworks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{partner_id}/artist/{artist_id}/partner_artist_artworks/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve full json of all partner artist artworks for a given partner and artist. */
        get: operations["getApiV1PartnerPartnerIdArtistArtistIdPartnerArtistArtworksAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{partner_id}/artist/{artist_id}/artworks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve partner published artworks by a given artist. */
        get: operations["getApiV1PartnerPartnerIdArtistArtistIdArtworks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{partner_id}/artist/{artist_id}/artworks/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve full json of all artworks for a given partner and artist. */
        get: operations["getApiV1PartnerPartnerIdArtistArtistIdArtworksAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{partner_id}/album/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a partner album. */
        get: operations["getApiV1PartnerPartnerIdAlbumId"];
        /** @description Update an existing partner album. */
        put: operations["putApiV1PartnerPartnerIdAlbumId"];
        post?: never;
        /** @description Delete an existing album. */
        delete: operations["deleteApiV1PartnerPartnerIdAlbumId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{id}/album": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a new partner album. */
        post: operations["postApiV1PartnerIdAlbum"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{partner_id}/albums": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve all partner albums. */
        get: operations["getApiV1PartnerPartnerIdAlbums"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{partner_id}/album/{partner_album_id}/artwork/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Update an artwork within a partner album. */
        put: operations["putApiV1PartnerPartnerIdAlbumPartnerAlbumIdArtworkId"];
        /** @description Add an artwork to a partner album. */
        post: operations["postApiV1PartnerPartnerIdAlbumPartnerAlbumIdArtworkId"];
        /** @description Remove an artwork from a partner album. */
        delete: operations["deleteApiV1PartnerPartnerIdAlbumPartnerAlbumIdArtworkId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{partner_id}/album/{partner_album_id}/reposition": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Reposition artworks in a partner album. */
        post: operations["postApiV1PartnerPartnerIdAlbumPartnerAlbumIdReposition"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{partner_id}/album/{partner_album_id}/artworks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve all artworks at a partner album sorted by position. */
        get: operations["getApiV1PartnerPartnerIdAlbumPartnerAlbumIdArtworks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{partner_id}/viewing_rooms": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Return partner's viewing rooms. */
        get: operations["getApiV1PartnerPartnerIdViewingRooms"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{partner_id}/partner_search_criteria_hits": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getApiV1PartnerPartnerIdPartnerSearchCriteriaHits"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{partner_id}/partner_search_criteria/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getApiV1PartnerPartnerIdPartnerSearchCriteriaId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{partner_id}/partner_search_criterias": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getApiV1PartnerPartnerIdPartnerSearchCriterias"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{partner_id}/inquiry_request/{inquiry_request_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve details for existing inquiry request. */
        get: operations["getApiV1PartnerPartnerIdInquiryRequestInquiryRequestId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{partner_id}/inquiry_requests": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve all inquiry_requests for a given partner. */
        get: operations["getApiV1PartnerPartnerIdInquiryRequests"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{partner_id}/inquiry_request/{inquiry_request_id}/collector_profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve details of a collector profile of an inquiry request */
        get: operations["getApiV1PartnerPartnerIdInquiryRequestInquiryRequestIdCollectorProfile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{partner_id}/credit_card/{credit_card_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve an existing partner credit card. */
        get: operations["getApiV1PartnerPartnerIdCreditCardCreditCardId"];
        put?: never;
        post?: never;
        /** @description Deactivates a partner credit card. */
        delete: operations["deleteApiV1PartnerPartnerIdCreditCardCreditCardId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{partner_id}/credit_card/{credit_card_id}/default": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Set an existing partner credit card to default. */
        put: operations["putApiV1PartnerPartnerIdCreditCardCreditCardIdDefault"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{partner_id}/credit_cards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve all active partner credit cards. */
        get: operations["getApiV1PartnerPartnerIdCreditCards"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{partner_id}/credit_card": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Creates a new partner credit card with a given token attached to the partner's customer account. */
        post: operations["postApiV1PartnerPartnerIdCreditCard"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{partner_id}/opt_in_artworks_into_commerce": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Opt artworks into Commerce and Make Offer listing options */
        put: operations["putApiV1PartnerPartnerIdOptInArtworksIntoCommerce"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{partner_id}/commerce_opt_in_eligible_artworks_report": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Send an email to the current user containing artwork data */
        post: operations["postApiV1PartnerPartnerIdCommerceOptInEligibleArtworksReport"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{partner_id}/bank_account/{bank_account_id}/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Refresh bank account. */
        put: operations["putApiV1PartnerPartnerIdBankAccountBankAccountIdRefresh"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{partner_id}/bank_account": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Add a bank account to a partner. */
        post: operations["postApiV1PartnerPartnerIdBankAccount"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{partner_id}/bank_account/{bank_account_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Deactivates a partner bank account. */
        delete: operations["deleteApiV1PartnerPartnerIdBankAccountBankAccountId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{partner_id}/bank_account/{bank_account_id}/default": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Set an existing partner bank account to default. */
        put: operations["putApiV1PartnerPartnerIdBankAccountBankAccountIdDefault"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{partner_id}/bank_accounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve all active partner bank accounts. */
        get: operations["getApiV1PartnerPartnerIdBankAccounts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{partner_id}/bank_account/setup_intent": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a setup intent for a partner and returns the client secret of it. */
        post: operations["postApiV1PartnerPartnerIdBankAccountSetupIntent"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{partner_id}/artists_with_alert_counts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns a list of all artists in a partners roster with their alert counts. */
        get: operations["getApiV1PartnerPartnerIdArtistsWithAlertCounts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{id}/unpublish_all_works": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Unpublish all artworks for the partner. */
        put: operations["putApiV1PartnerIdUnpublishAllWorks"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{id}/netsuite_sync": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Update partner based off of associated Customer in Netsuite */
        post: operations["postApiV1PartnerIdNetsuiteSync"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{id}/rebuild": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Rebuild counts and determine access permissions for an existing partner. */
        put: operations["putApiV1PartnerIdRebuild"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{id}/partner_flags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Sets (or unsets) a partner flag. */
        put: operations["putApiV1PartnerIdPartnerFlags"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{id}/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve deep data for an existing partner. */
        get: operations["getApiV1PartnerIdAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{partner_id}/show/{show_id}/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve all partner show events for a given show. */
        get: operations["getApiV1PartnerPartnerIdShowShowIdEvents"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{partner_id}/show/{show_id}/event": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a partner show event. */
        post: operations["postApiV1PartnerPartnerIdShowShowIdEvent"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner/{partner_id}/show/{show_id}/event/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a partner show event. */
        get: operations["getApiV1PartnerPartnerIdShowShowIdEventId"];
        /** @description Update a partner show event. */
        put: operations["putApiV1PartnerPartnerIdShowShowIdEventId"];
        post?: never;
        /** @description Delete a partner show event. */
        delete: operations["deleteApiV1PartnerPartnerIdShowShowIdEventId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner_categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve all partner categories. */
        get: operations["getApiV1PartnerCategories"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner_category/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a partner category. */
        get: operations["getApiV1PartnerCategoryId"];
        /** @description Update an existing partner category. */
        put: operations["putApiV1PartnerCategoryId"];
        post?: never;
        /** @description Delete a partner category. */
        delete: operations["deleteApiV1PartnerCategoryId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner_category": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a new partner category. */
        post: operations["postApiV1PartnerCategory"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner_communications": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve partner Api_v1_Partner_Communications. */
        get: operations["getApiV1PartnerCommunications"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner_communication/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve an existing partner communication. */
        get: operations["getApiV1PartnerCommunicationId"];
        /** @description Update an existing partner communication. */
        put: operations["putApiV1PartnerCommunicationId"];
        post?: never;
        /** @description Delete an existing partner communication. */
        delete: operations["deleteApiV1PartnerCommunicationId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner_communication/{id}/partner_contact/{partner_contact_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Add a partner contact to a partner communication. */
        post: operations["postApiV1PartnerCommunicationIdPartnerContactPartnerContactId"];
        /** @description Remove a partner contact to a partner communication. */
        delete: operations["deleteApiV1PartnerCommunicationIdPartnerContactPartnerContactId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner_communication/{id}/partner_contacts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List partner contacts for a partner communication. */
        get: operations["getApiV1PartnerCommunicationIdPartnerContacts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner_communication": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a partner communication. */
        post: operations["postApiV1PartnerCommunication"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner_gene_categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a map of partner gene categories and genes. */
        get: operations["getApiV1PartnerGeneCategories"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner_offer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a partner offer. */
        post: operations["postApiV1PartnerOffer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner_offer/{partner_offer_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Show a partner offer. */
        get: operations["getApiV1PartnerOfferPartnerOfferId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner_offers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List partner offers. */
        get: operations["getApiV1PartnerOffers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner_show_events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve all partner show events. */
        get: operations["getApiV1PartnerShowEvents"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner_subscription_charges": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve partner subscription charges. */
        get: operations["getApiV1PartnerSubscriptionCharges"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner_subscription_charge": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a partner subscription charge. */
        post: operations["postApiV1PartnerSubscriptionCharge"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner_subscription_charge/{id}/line_item/{line_item_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Remove a line item from a charge. */
        delete: operations["deleteApiV1PartnerSubscriptionChargeIdLineItemLineItemId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner_subscription_charge/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve an existing partner subscription charge. */
        get: operations["getApiV1PartnerSubscriptionChargeId"];
        /** @description Update an existing partner subscription charge. */
        put: operations["putApiV1PartnerSubscriptionChargeId"];
        post?: never;
        /** @description Delete a partner subscription charge */
        delete: operations["deleteApiV1PartnerSubscriptionChargeId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner_subscription_charge/{id}/line_item": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Add a line item to a charge. */
        post: operations["postApiV1PartnerSubscriptionChargeIdLineItem"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner_subscription_charge/{id}/receive_payment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Mark an existing charge as completed. */
        put: operations["putApiV1PartnerSubscriptionChargeIdReceivePayment"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner_subscription_charge/{id}/retry": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Retry an existing failed partner subscription charge. */
        put: operations["putApiV1PartnerSubscriptionChargeIdRetry"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner_subscription_charge/{id}/bill": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Bill an existing partner subscription charge. */
        put: operations["putApiV1PartnerSubscriptionChargeIdBill"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner_subscription_events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve partner subscription events. */
        get: operations["getApiV1PartnerSubscriptionEvents"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner_subscription_event/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve an existing partner subscription event. */
        get: operations["getApiV1PartnerSubscriptionEventId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner_subscription_invoices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve partner subscription invoices. */
        get: operations["getApiV1PartnerSubscriptionInvoices"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner_subscription_invoice/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a partner subscription invoice. */
        get: operations["getApiV1PartnerSubscriptionInvoiceId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner_subscription_plans": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve partner subscription plans. */
        get: operations["getApiV1PartnerSubscriptionPlans"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner_subscription_plan/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve an existing partner subscription plan. */
        get: operations["getApiV1PartnerSubscriptionPlanId"];
        /** @description Update an existing partner subscription plan. */
        put: operations["putApiV1PartnerSubscriptionPlanId"];
        post?: never;
        /** @description Delete an existing partner subscription plan. */
        delete: operations["deleteApiV1PartnerSubscriptionPlanId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner_subscription_plan": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a partner subscription plan. */
        post: operations["postApiV1PartnerSubscriptionPlan"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner_subscriptions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve partner subscriptions. */
        get: operations["getApiV1PartnerSubscriptions"];
        put?: never;
        /** @description Add a partner to a partner subscription plan. */
        post: operations["postApiV1PartnerSubscriptions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner_subscription/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a partner subscription. */
        get: operations["getApiV1PartnerSubscriptionId"];
        /** @description Updates a partner subscription. */
        put: operations["putApiV1PartnerSubscriptionId"];
        post?: never;
        /** @description Delete an existing not-active subscription. */
        delete: operations["deleteApiV1PartnerSubscriptionId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner_subscription/{id}/terminate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Terminates a partner subscription. */
        put: operations["putApiV1PartnerSubscriptionIdTerminate"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner_subscription/{id}/activate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Activates a partner subscription. */
        put: operations["putApiV1PartnerSubscriptionIdActivate"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner_artists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve partner/artist pairs */
        get: operations["getApiV1PartnerArtists"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner_artist/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a partner artist. */
        get: operations["getApiV1PartnerArtistId"];
        /** @description Update a partner artist. */
        put: operations["putApiV1PartnerArtistId"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partners": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve all partners. */
        get: operations["getApiV1Partners"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner_show/{partner_show_id}/images/reposition": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Reposition partner show images. */
        post: operations["postApiV1PartnerShowPartnerShowIdImagesReposition"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner_show/{partner_show_id}/images": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve partner show's images. */
        get: operations["getApiV1PartnerShowPartnerShowIdImages"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner_show/{partner_show_id}/image/{id}/artist/{artist_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Remove an artist from a partner show's image. */
        delete: operations["deleteApiV1PartnerShowPartnerShowIdImageIdArtistArtistId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner_show/{partner_show_id}/image/{id}/artwork/{artwork_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Remove an artwork from a partner show's image. */
        delete: operations["deleteApiV1PartnerShowPartnerShowIdImageIdArtworkArtworkId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner_show/{partner_show_id}/image/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Update a partner show's image. */
        put: operations["putApiV1PartnerShowPartnerShowIdImageId"];
        post?: never;
        /** @description Remove an image from a partner show. */
        delete: operations["deleteApiV1PartnerShowPartnerShowIdImageId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner_show/{partner_show_id}/image": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Add an image to a partner show. */
        post: operations["postApiV1PartnerShowPartnerShowIdImage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner_show/{partner_show_id}/default_image(/{image_version})": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a partner show's default (cover) image. */
        get: operations["getApiV1PartnerShowPartnerShowIdDefaultImage(ImageVersion)"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner_show/{partner_show_id}/image/{id}(/{image_version})": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get an partner show's image (install shot). */
        get: operations["getApiV1PartnerShowPartnerShowIdImageId(ImageVersion)"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/periods": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve periods. */
        get: operations["getApiV1Periods"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/period": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a new period */
        post: operations["postApiV1Period"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/period/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a period. */
        get: operations["getApiV1PeriodId"];
        /** @description Update an existing period */
        put: operations["putApiV1PeriodId"];
        post?: never;
        /** @description Delete an existing period */
        delete: operations["deleteApiV1PeriodId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/profile/{id}/image(/{image_version})": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a profile's image. */
        get: operations["getApiV1ProfileIdImage(ImageVersion)"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/profile/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a profile. */
        get: operations["getApiV1ProfileId"];
        /** @description Update a profile. */
        put: operations["putApiV1ProfileId"];
        post?: never;
        /** @description Delete a profile. */
        delete: operations["deleteApiV1ProfileId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a profile. */
        post: operations["postApiV1Profile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/profile/{id}/cover_image": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve profile cover image. */
        get: operations["getApiV1ProfileIdCoverImage"];
        /** @description Update profile cover. */
        put: operations["putApiV1ProfileIdCoverImage"];
        /** @description Change profile cover. */
        post: operations["postApiV1ProfileIdCoverImage"];
        /** @description Delete profile cover image. */
        delete: operations["deleteApiV1ProfileIdCoverImage"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/profile/{id}/icon": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve profile icon. */
        get: operations["getApiV1ProfileIdIcon"];
        /** @description Update profile icon. */
        put: operations["putApiV1ProfileIdIcon"];
        /** @description Change profile icon. */
        post: operations["postApiV1ProfileIdIcon"];
        /** @description Delete profile icon. */
        delete: operations["deleteApiV1ProfileIdIcon"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/purchases": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve purchases. */
        get: operations["getApiV1Purchases"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/purchase/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Update a purchase. */
        put: operations["putApiV1PurchaseId"];
        post?: never;
        /** @description Delete an existing purchase. */
        delete: operations["deleteApiV1PurchaseId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/purchase": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a purchase object for artwork sale. */
        post: operations["postApiV1Purchase"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/related/posts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Return related posts, deprecated. */
        get: operations["getApiV1RelatedPosts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/related/artworks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Related artworks */
        get: operations["getApiV1RelatedArtworks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/related/sales": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Sales related to an artwork. */
        get: operations["getApiV1RelatedSales"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/related/shows": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Shows related to an artwork, or an artist. Optionally restricts shows to booths at a fair. */
        get: operations["getApiV1RelatedShows"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/related/fairs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fairs related to an artwork. */
        get: operations["getApiV1RelatedFairs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/related/layer/{id}/artists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Search within a layer. */
        get: operations["getApiV1RelatedLayerIdArtists"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/related/layer/{type}/{id}/artworks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Search within a layer. */
        get: operations["getApiV1RelatedLayerTypeIdArtworks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/related/layers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve search layers. */
        get: operations["getApiV1RelatedLayers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/related/genes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Return related genes. */
        get: operations["getApiV1RelatedGenes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/related/artists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Return similar artists. */
        get: operations["getApiV1RelatedArtists"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/representative/{id}/artwork_inquiry_requests": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve all artwork inquiries the admin represents. */
        get: operations["getApiV1RepresentativeIdArtworkInquiryRequests"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sale_agreements/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get an individual sale agreement. */
        get: operations["getApiV1SaleAgreementsId"];
        /** @description Update a sale agreement. */
        put: operations["putApiV1SaleAgreementsId"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sale_agreements": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get all sale_agreements, optionally by status. */
        get: operations["getApiV1SaleAgreements"];
        put?: never;
        /** @description Create a new sale agreement. */
        post: operations["postApiV1SaleAgreements"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sale_artwork/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve sale_artwork. */
        get: operations["getApiV1SaleArtworkId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sale_artworks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve sale_artworks for a given artwork. */
        get: operations["getApiV1SaleArtworks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sale/{id}/sale_agreement": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get the sale agreement associated with the sale */
        get: operations["getApiV1SaleIdSaleAgreement"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sale/{id}/unpublish_artworks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Batch un-publish all of the artworks in a sale. */
        put: operations["putApiV1SaleIdUnpublishArtworks"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sale/{id}/publish_artworks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Batch publish all of the artworks in a sale. */
        put: operations["putApiV1SaleIdPublishArtworks"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sale/{id}/end_sale": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description End sale on demand. */
        put: operations["putApiV1SaleIdEndSale"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sale/{id}/registered_bidders_report": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Deliver registered bidders report to admins. */
        put: operations["putApiV1SaleIdRegisteredBiddersReport"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sale/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve an existing sale. */
        get: operations["getApiV1SaleId"];
        /** @description Update an existing sale. */
        put: operations["putApiV1SaleId"];
        post?: never;
        /** @description Delete an existing sale. */
        delete: operations["deleteApiV1SaleId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sale": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a sale. */
        post: operations["postApiV1Sale"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sale/{sale_id}/sale_artwork/{artwork_id}/calculated_cost": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get the calculated cost for an artwork in a sale. */
        get: operations["getApiV1SaleSaleIdSaleArtworkArtworkIdCalculatedCost"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sale/{sale_id}/sale_artwork/{artwork_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a sale artwork from a sale. */
        get: operations["getApiV1SaleSaleIdSaleArtworkArtworkId"];
        /** @description Update a sale artwork. */
        put: operations["putApiV1SaleSaleIdSaleArtworkArtworkId"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sale/{sale_id}/sale_artwork": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Add an artwork to a sale. */
        post: operations["postApiV1SaleSaleIdSaleArtwork"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sale/{sale_id}/sale_artworks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve artworks within a given sale. */
        get: operations["getApiV1SaleSaleIdSaleArtworks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sales": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve sales. */
        get: operations["getApiV1Sales"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/search/filtered/{type}/{id}/options": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Filter options. */
        get: operations["getApiV1SearchFilteredTypeIdOptions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/search/filtered/{type}/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Filtered gene/tag/fair/artist search. */
        get: operations["getApiV1SearchFilteredTypeId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sets/contains": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get all sets, that contain the given item. */
        get: operations["getApiV1SetsContains"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get all sets, optionally by label, item_type, or owner. */
        get: operations["getApiV1Sets"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/set/{id}/item/{item_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Update an item in an existing set. */
        put: operations["putApiV1SetIdItemItemId"];
        post?: never;
        /** @description Delete an item from an existing set. */
        delete: operations["deleteApiV1SetIdItemItemId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/set/{id}/item": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Add an item to an existing set. */
        post: operations["postApiV1SetIdItem"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/set/{id}/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get all items in an existing set. */
        get: operations["getApiV1SetIdItems"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/set/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve an existing set. */
        get: operations["getApiV1SetId"];
        /** @description Update an existing set. */
        put: operations["putApiV1SetId"];
        post?: never;
        /** @description Delete an existing set. */
        delete: operations["deleteApiV1SetId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/set": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a new set. */
        post: operations["postApiV1Set"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/shortcut": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a new shortcut for a given long URL (and optional short URL). */
        post: operations["postApiV1Shortcut"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/shortcut/{short}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a shortcut by short. */
        get: operations["getApiV1ShortcutShort"];
        /** @description Update an existing shortcut. */
        put: operations["putApiV1ShortcutShort"];
        post?: never;
        /** @description Delete an existing shortcut. */
        delete: operations["deleteApiV1ShortcutShort"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/shortcuts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve all shortcuts. */
        get: operations["getApiV1Shortcuts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/show/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a partner show. */
        get: operations["getApiV1ShowId"];
        /** @description Update an existing partner show. */
        put: operations["putApiV1ShowId"];
        post?: never;
        /** @description Delete a show. */
        delete: operations["deleteApiV1ShowId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/show": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a new partner show. */
        post: operations["postApiV1Show"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/shows": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve all partner shows. */
        get: operations["getApiV1Shows"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/shows/feed": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve all displayable, non-fair partner shows feed. */
        get: operations["getApiV1ShowsFeed"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/site_hero_unit/{site_hero_unit_id}/image": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Add an image to a hero unit. */
        post: operations["postApiV1SiteHeroUnitSiteHeroUnitIdImage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/site_hero_unit/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a site hero unit. */
        get: operations["getApiV1SiteHeroUnitId"];
        /** @description Update a site hero unit. */
        put: operations["putApiV1SiteHeroUnitId"];
        post?: never;
        /** @description Delete a site hero unit. */
        delete: operations["deleteApiV1SiteHeroUnitId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/site_hero_unit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a site hero unit. */
        post: operations["postApiV1SiteHeroUnit"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/site_hero_units": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve all site hero units. */
        get: operations["getApiV1SiteHeroUnits"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/stripe_customer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve Stripe customer for a partner. */
        get: operations["getApiV1StripeCustomer"];
        put?: never;
        /** @description Create or return an existing customer account and Stripe customer for a user. */
        post: operations["postApiV1StripeCustomer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/system/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List all available roles */
        get: operations["getApiV1SystemRoles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/system/time(/{zone})": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Return system time. */
        get: operations["getApiV1SystemTime(Zone)"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/system/cache": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Clear rails cache. */
        delete: operations["deleteApiV1SystemCache"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/system/info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve system info. */
        get: operations["getApiV1SystemInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/system/up": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description System up check. */
        get: operations["getApiV1SystemUp"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/system/boom/{status_code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Return a specific error response. */
        get: operations["getApiV1SystemBoomStatusCode"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/system/boom": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Raise an exception with an optional error status to return. */
        get: operations["getApiV1SystemBoom"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/system/ping": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Return pong. */
        get: operations["getApiV1SystemPing"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/tag/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a tag. */
        get: operations["getApiV1TagId"];
        /** @description Update an existing tag. */
        put: operations["putApiV1TagId"];
        post?: never;
        /** @description Delete a tag. */
        delete: operations["deleteApiV1TagId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/tag/{id}/image(/{image_version})": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a tag's image. */
        get: operations["getApiV1TagIdImage(ImageVersion)"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/tag/{id}/artworks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve tagged artworks. */
        get: operations["getApiV1TagIdArtworks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve all tags. */
        get: operations["getApiV1Tags"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/token/exchange": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Get a token for a client app. */
        post: operations["postApiV1TokenExchange"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user_art_quiz": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a user's art quiz. */
        get: operations["getApiV1UserArtQuiz"];
        /** @description Update a user's art quiz. */
        put: operations["putApiV1UserArtQuiz"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user_fair_actions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve user fair actions for a given collector or sale profile. */
        get: operations["getApiV1UserFairActions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user_fair_action/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Delete a user-fair action */
        delete: operations["deleteApiV1UserFairActionId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user_fair_action": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Creates a new user fair action for a given collector or sale profile. */
        post: operations["postApiV1UserFairAction"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user_interests": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve user interests of a collector profile. */
        get: operations["getApiV1UserInterests"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user_interest/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get an interest. */
        get: operations["getApiV1UserInterestId"];
        put?: never;
        post?: never;
        /** @description Delete an interest. */
        delete: operations["deleteApiV1UserInterestId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user_interest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Add an interest. */
        post: operations["postApiV1UserInterest"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user_sale_profile/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a sale profile. */
        get: operations["getApiV1UserSaleProfileId"];
        /** @description Update a profile. */
        put: operations["putApiV1UserSaleProfileId"];
        post?: never;
        /** @description Delete a sale profile. */
        delete: operations["deleteApiV1UserSaleProfileId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user_sale_profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a sale profile. */
        post: operations["postApiV1UserSaleProfile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user/{id}/representative/{representative_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Update a user's representative. */
        put: operations["putApiV1UserIdRepresentativeRepresentativeId"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user/{id}/representative": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a user's representative. */
        get: operations["getApiV1UserIdRepresentative"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user/{id}/lab_feature/{feature_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Enable a lab feature for a user. */
        post: operations["postApiV1UserIdLabFeatureFeatureId"];
        /** @description Disables a lab feature for a user. */
        delete: operations["deleteApiV1UserIdLabFeatureFeatureId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user/{id}/lab_features": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a user's enabled lab features. */
        get: operations["getApiV1UserIdLabFeatures"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Check whether a user exists by email address. */
        get: operations["getApiV1User"];
        put?: never;
        /** @description Create a new user. */
        post: operations["postApiV1User"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user/identify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Check whether a user exists by email address (used by Artsy clients for authentication flows). */
        post: operations["postApiV1UserIdentify"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user/{id}/admin_note/{admin_note_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve one user admin_note. */
        get: operations["getApiV1UserIdAdminNoteAdminNoteId"];
        /** @description Update an existing admin_note. */
        put: operations["putApiV1UserIdAdminNoteAdminNoteId"];
        post?: never;
        /** @description Delete an existing admin_note. */
        delete: operations["deleteApiV1UserIdAdminNoteAdminNoteId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user/{id}/admin_notes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve all user's admin_notes. */
        get: operations["getApiV1UserIdAdminNotes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user/{id}/admin_note": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a user admin_note. */
        post: operations["postApiV1UserIdAdminNote"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user/{user_id}/access_control/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Delete a user's access control. */
        delete: operations["deleteApiV1UserUserIdAccessControlId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user/{id}/access_controls": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get user's access controls. */
        get: operations["getApiV1UserIdAccessControls"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user/{user_id}/access_control": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Grants user access to a model. */
        post: operations["postApiV1UserUserIdAccessControl"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user/{id}/backup_code": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Send the User a 2FA backup code */
        post: operations["postApiV1UserIdBackupCode"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user/{id}/password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Change a users password. */
        put: operations["putApiV1UserIdPassword"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user/{id}/recently_viewed_artwork_ids": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve all recently viewed artworks by a user. */
        get: operations["getApiV1UserIdRecentlyViewedArtworkIds"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user/{id}/artwork_inquiry_requests": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve all artwork inquiry requests by a user. */
        get: operations["getApiV1UserIdArtworkInquiryRequests"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user/{id}/suggested/genes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve suggested genes for a user. */
        get: operations["getApiV1UserIdSuggestedGenes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user/{id}/suggested/similar/artists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve suggested artists for a user, based on similar artists. */
        get: operations["getApiV1UserIdSuggestedSimilarArtists"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user/{id}/follow/profiles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve all profiles followed by a user. */
        get: operations["getApiV1UserIdFollowProfiles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user/{id}/follow/genes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve all genes followed by a user. */
        get: operations["getApiV1UserIdFollowGenes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user/{id}/roles/{role_type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Add a new role to the user */
        post: operations["postApiV1UserIdRolesRoleType"];
        /** @description Remove a role from a user */
        delete: operations["deleteApiV1UserIdRolesRoleType"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user/{id}/follow/artists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve all artists followed by a user. */
        get: operations["getApiV1UserIdFollowArtists"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a user by id. */
        get: operations["getApiV1UserId"];
        /** @description Update an existing user. */
        put: operations["putApiV1UserId"];
        post?: never;
        /** @description Delete an existing user. */
        delete: operations["deleteApiV1UserId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/reset_password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Reset a password given a password token. */
        put: operations["putApiV1UsersResetPassword"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/send_reset_password_instructions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Send reset password instructions. */
        post: operations["postApiV1UsersSendResetPasswordInstructions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve all users. */
        get: operations["getApiV1Users"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/verified_representatives/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Delete a verified representative. */
        delete: operations["deleteApiV1VerifiedRepresentativesId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/verified_representatives": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get list of verified representatives. */
        get: operations["getApiV1VerifiedRepresentatives"];
        put?: never;
        /** @description Create a verified representative. */
        post: operations["postApiV1VerifiedRepresentatives"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/video": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a video. */
        post: operations["postApiV1Video"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/video/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a video. */
        get: operations["getApiV1VideoId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/viewing_rooms": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve viewing rooms */
        get: operations["getApiV1ViewingRooms"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/viewing_room/{id}/subsections": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a viewing room's subsections. */
        get: operations["getApiV1ViewingRoomIdSubsections"];
        /** @description Update a viewing room's subsections. */
        put: operations["putApiV1ViewingRoomIdSubsections"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/viewing_room/{id}/viewing_room_artworks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve join entities between viewing rooms and artworks. */
        get: operations["getApiV1ViewingRoomIdViewingRoomArtworks"];
        /** @description Update a viewing room's artworks. */
        put: operations["putApiV1ViewingRoomIdViewingRoomArtworks"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/viewing_room/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a viewing room. */
        get: operations["getApiV1ViewingRoomId"];
        /** @description Update a viewing room. */
        put: operations["putApiV1ViewingRoomId"];
        post?: never;
        /** @description Delete a viewing_room. */
        delete: operations["deleteApiV1ViewingRoomId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/viewing_room": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a viewing room. */
        post: operations["postApiV1ViewingRoom"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/xapp_token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Obtain an XApp token. */
        get: operations["getApiV1XappToken"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/address_verification": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Verify an address */
        post: operations["postApiV1AddressVerification"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/client_application/{id}/client_application_partner/{client_application_partner_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["deleteApiV1ClientApplicationIdClientApplicationPartnerClientApplicationPartnerId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/client_application/{id}/client_application_partner": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["postApiV1ClientApplicationIdClientApplicationPartner"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/client_application/{id}/client_application_partners": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getApiV1ClientApplicationIdClientApplicationPartners"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/fair_booth_import": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Executes fair booth creation process. */
        post: operations["postApiV1FairBoothImport"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/increments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getApiV1Increments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/increment/{key}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getApiV1IncrementKey"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner_collector_profile/{collector_profile_id}/partner_engagement": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve information related to partner engagement. */
        get: operations["getApiV1PartnerCollectorProfileCollectorProfileIdPartnerEngagement"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner_collector_profile/{collector_profile_id}/artwork_inquiry_requests_count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a count of artwork inquiries made by a collector profile. */
        get: operations["getApiV1PartnerCollectorProfileCollectorProfileIdArtworkInquiryRequestsCount"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner_collector_profile/{collector_profile_id}/user_interests": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve user interests of a collector profile. */
        get: operations["getApiV1PartnerCollectorProfileCollectorProfileIdUserInterests"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner_collector_profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve details of a partner collector profile */
        get: operations["getApiV1PartnerCollectorProfile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/partner_collector_profiles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getApiV1PartnerCollectorProfiles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/profiles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve 1 or more profiles. */
        get: operations["getApiV1Profiles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/webhook_deliveries": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getApiV1WebhookDeliveries"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/webhook_delivery/{id}/redeliver": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["postApiV1WebhookDeliveryIdRedeliver"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/webhook_delivery/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getApiV1WebhookDeliveryId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Create an account request, which may be associated with a user. */
        postApiV1AccountRequests: {
            /** @description User id. */
            user_id?: string;
            /**
             * @description Action taken.
             * @enum {string}
             */
            action: "user_delete" | "user_data";
            /** @description Notes. */
            notes?: string;
            name?: string;
            email?: string;
        };
        /** @description Update an artist career highlight. */
        putApiV1ArtistCareerHighlight: {
            solo?: string;
            group?: string;
            collected?: string;
        };
        /** @description Create an artist career highlight. */
        postApiV1ArtistCareerHighlight: {
            /** @description Artist id. */
            artist_id: string;
            /** @description Partner id. */
            partner_id: string;
        };
        /** @description Update an artist's genome. */
        putApiV1ArtistIdGenome: {
            /** @description Gene name/value pairs. */
            genes?: Record<string, never>;
        };
        /** @description Merge two artists (any artworks, follows, and posts) */
        postApiV1ArtistIdMerge: {
            /** @description Artist to merge id. */
            artist_id: string;
        };
        /** @description Create a new artist. */
        postApiV1Artist: {
            /** @description First name. */
            first?: string;
            /** @description Middle name. */
            middle?: string;
            /** @description Last name. */
            last?: string;
            /** @description Display name. */
            display_name?: string;
            /** @description A date on which the artist was born. */
            birthday?: string;
            /** @description A date on which the artist died. */
            deathday?: string;
            /** @description Gender. */
            gender?: string;
            /** @description The country that best defines the artist. */
            nationality?: string;
            /** @description The city in which the artist was born. */
            hometown?: string;
            /** @description The city in which the artist is currently working. */
            location?: string;
            /** @description An artist statement. */
            statement?: string;
            /** @description A brief biography. */
            biography?: string;
            /** @description A blurb that best describes the artist. */
            blurb?: string;
            /** @description Artist's degrees and academic achievements. */
            education?: string;
            /** @description Artist's awards. */
            awards?: string;
            /** @description Artist's publications. */
            publications?: string;
            /** @description Collections that contain artist's works. */
            collections?: string;
            /** @description A list of solo exhibitions. */
            soloexhibitions?: string;
            /** @description A list of group exhibitions. */
            groupexhibitions?: string;
            /** @description Rights associated with an artist. */
            image_rights?: string;
            /** @description Alternate names or synonyms for this artist. */
            alternate_names?: string[];
            /** @description Used by global search to produce featured results */
            featured_names?: string[];
            public?: string;
            /** @description Token for image entry on Gemini. */
            gemini_token?: string;
            /** @description True if Artsy clients may solicit consignments for the artist. */
            consignable?: string;
            /** @description If true, do not display auction results link. */
            hide_auction_link?: string;
            /** @description Exclude from Criteo artwork report. */
            exclude_from_criteo?: string;
            /** @description Disable price context feature. */
            disable_price_context?: string;
            /**
             * Format: int32
             * @description Corresponds to target supply priority tier (e.g. P1, P2)
             */
            target_supply_priority?: number;
            /** @description The target supply category */
            target_supply_type?: string;
            /** @description Indicates whether the artist is a solo person or more of a group. */
            group_indicator?: string;
            /** @description Name of medium this artist is known for. */
            medium_known_for?: string;
            /** @description Other nationalities associated with the artist, for matching. */
            alternate_nationalities?: string[];
            cover_artwork_id?: string;
            /** @description Indicates whether the artist has been deemed critically acclaimed. */
            critically_acclaimed?: string;
            /** @description Indicates year the artist was in Artsy Vanguard. */
            vanguard_year?: string;
            /** @description Recent Artist's Show. */
            recent_show?: string;
            /** @description Indicates when the artist was in Artsy Foundations. */
            foundations?: string;
            /** @description Whether the artist is a personal artist that belongs to a user. */
            is_personal_artist?: boolean;
        };
        /** @description Update an existing artist. */
        putApiV1Artist: {
            /** @description First name. */
            first?: string;
            /** @description Middle name. */
            middle?: string;
            /** @description Last name. */
            last?: string;
            /** @description Display name. */
            display_name?: string;
            /** @description A date on which the artist was born. */
            birthday?: string;
            /** @description A date on which the artist died. */
            deathday?: string;
            /** @description Gender. */
            gender?: string;
            /** @description The country that best defines the artist. */
            nationality?: string;
            /** @description The city in which the artist was born. */
            hometown?: string;
            /** @description The city in which the artist is currently working. */
            location?: string;
            /** @description An artist statement. */
            statement?: string;
            /** @description A brief biography. */
            biography?: string;
            /** @description A blurb that best describes the artist. */
            blurb?: string;
            /** @description Artist's degrees and academic achievements. */
            education?: string;
            /** @description Artist's awards. */
            awards?: string;
            /** @description Artist's publications. */
            publications?: string;
            /** @description Collections that contain artist's works. */
            collections?: string;
            /** @description A list of solo exhibitions. */
            soloexhibitions?: string;
            /** @description A list of group exhibitions. */
            groupexhibitions?: string;
            /** @description Rights associated with an artist. */
            image_rights?: string;
            /** @description Alternate names or synonyms for this artist. */
            alternate_names?: string[];
            /** @description Used by global search to produce featured results */
            featured_names?: string[];
            public?: string;
            /** @description Token for image entry on Gemini. */
            gemini_token?: string;
            /** @description True if Artsy clients may solicit consignments for the artist. */
            consignable?: string;
            /** @description If true, do not display auction results link. */
            hide_auction_link?: string;
            /** @description Exclude from Criteo artwork report. */
            exclude_from_criteo?: string;
            /** @description Disable price context feature. */
            disable_price_context?: string;
            /**
             * Format: int32
             * @description Corresponds to target supply priority tier (e.g. P1, P2)
             */
            target_supply_priority?: number;
            /** @description The target supply category */
            target_supply_type?: string;
            /** @description Indicates whether the artist is a solo person or more of a group. */
            group_indicator?: string;
            /** @description Name of medium this artist is known for. */
            medium_known_for?: string;
            /** @description Other nationalities associated with the artist, for matching. */
            alternate_nationalities?: string[];
            cover_artwork_id?: string;
            /** @description Indicates whether the artist has been deemed critically acclaimed. */
            critically_acclaimed?: string;
            /** @description Indicates year the artist was in Artsy Vanguard. */
            vanguard_year?: string;
            /** @description Recent Artist's Show. */
            recent_show?: string;
            /** @description Indicates when the artist was in Artsy Foundations. */
            foundations?: string;
        };
        /** @description Create or update an artwork's inventory. */
        putApiV1ArtworkArtworkIdInventory: {
            /**
             * Format: int32
             * @description The new number of items available.
             */
            count?: number;
            /** @description Whether the inventory for this item should be treated as unlimited. */
            unlimited?: boolean;
            /**
             * Format: int32
             * @description Number of items to deduct from sold inventory
             */
            deduct?: number;
            /**
             * Format: int32
             * @description Number of items to be added back to sold inventory
             */
            undeduct?: number;
        };
        /** @description Update an artwork image. */
        putApiV1ArtworkArtworkIdImage: {
            /** @description Position of the image within the artwork images. */
            position?: string;
            downloadable?: string;
            skip_watermark?: string;
            /** @description Reprocess originally uploaded image. */
            reprocess_original?: boolean;
        };
        /** @description Add an image to an artwork. */
        postApiV1ArtworkArtworkIdImage: {
            /** @description Remote URL for the image to upload (string). Takes precedence over gemini_token. */
            remote_image_url?: string;
            /** @description Gemini token of image to associate with artwork. */
            gemini_token?: string;
            /** @description Skips applying Digimarc watermarking to image. */
            skip_watermark?: boolean;
            /** @description Should be true when clients expect to submit a large number of images. */
            low_priority?: boolean;
            /** @description Position of the image within the artwork images. */
            position?: string;
        };
        /** @description Update an artwork's genome. */
        putApiV1ArtworkIdGenome: {
            /** @description Gene name/value pairs. */
            genes?: Record<string, never>;
        };
        /** @description Create an artwork. */
        postApiV1Artwork: {
            /** @description Artwork title. */
            title?: string;
            date?: string;
            /** @description Artwork category. */
            category?: string;
            condition?: string;
            /** @description Artwork medium. */
            medium?: string;
            /** @description Description of artist signature, when present. */
            signature?: string;
            /** @description Artwork provenance. */
            provenance?: string;
            /** @description Artwork series. */
            series?: string;
            /** @description Depth. */
            depth?: string;
            /** @description Diameter. */
            diameter?: string;
            /** @description Multimedia artwork duration. */
            duration?: string;
            /** @description Width. */
            width?: string;
            /** @description Height. */
            height?: string;
            /** @description Metric used for dimensions. */
            metric?: string;
            /** @description Artwork literature. */
            literature?: string;
            /** @description Exhibition history. */
            exhibition_history?: string;
            /** @description Collecting institution. */
            collecting_institution?: string;
            /** @description Additional information. */
            additional_information?: string;
            /** @description Image rights. */
            image_rights?: string;
            /** @description External provider identity. */
            external_id?: string;
            /** @description External video identity. Currently points to Vimeo upload. */
            external_video_id?: string;
            /** @description A reference to the system used to import the work. */
            import_source?: string;
            /** @description Availability. */
            availability?: string;
            /** @description Buy Now by partner */
            ecommerce?: string;
            /**
             * Format: float
             * @description Price listed.
             */
            price_listed?: number;
            /**
             * Format: float
             * @description Minimum price.
             */
            price_min?: number;
            /**
             * Format: float
             * @description Maximum price.
             */
            price_max?: number;
            /** @description Display price as range. */
            display_price_range?: string;
            /** @description Price hidden. */
            price_hidden?: string;
            /** @description Currency used. */
            price_currency?: string;
            /** @description Price includes tax, such as VAT. */
            price_includes_tax?: string;
            /** @description Artwork eligible for show feed. */
            feature_eligible?: string;
            /** @description Tags. */
            tags?: string[];
            inventory_id?: string;
            partner?: string;
            /** @description Net art website URL. */
            website?: string;
            /** @description Whether received directly from the artist or not. */
            secondary_market?: string;
            can_share_image?: string;
            /** @description Make Offer enabled by partner */
            offer?: string;
            /** @description Manufacturer of the artwork (generally applied to design objects). */
            manufacturer?: string;
            /** @description Indicates a unique single artwork (generally applied to design objects). */
            unique?: string;
            /** @description Dimensions as plain text. */
            dimensions_string?: string;
            /** @description Publisher of artwork (generally applied to prints). */
            publisher?: string;
            /** @description Text representation of relevant auction results. */
            relevant_auction_results?: string;
            /** @description Short text blurb about the artwork. */
            blurb?: string;
            /** @description Can be substituted for artist when no artist is available. */
            cultural_maker?: string;
            /** @description List of related cultural makers' IDs */
            cultural_maker_ids?: string[];
            /** @description Confidential notes about the artwork. */
            confidential_notes?: string;
            /** @description Attribution class, aka artwork classification */
            attribution_class?: string;
            /** @description Framed? */
            framed?: string;
            /** @description Certificate of Authenticity? */
            certificate_of_authenticity?: string;
            /** @description Certificate of Authenticity issued by authenticating body? */
            coa_by_authenticating_body?: string;
            /** @description Certificate of Authenticity issued by gallery? */
            coa_by_gallery?: string;
            /** @description Condition description. */
            condition_description?: string;
            /** @description Hand-signed by artist? */
            signed_by_artist?: string;
            /** @description Stamped by artist estate? */
            stamped_by_artist_estate?: string;
            /** @description Sticker label for signature/authentication? */
            sticker_label?: string;
            /** @description Signed in plate? */
            signed_in_plate?: string;
            /** @description Other form of signature/authentication? */
            signed_other?: string;
            /** @description Not signed? */
            not_signed?: string;
            /** @description Available for pickup? */
            pickup_available?: string;
            /**
             * Format: int32
             * @description Flat domestic shipping fee.
             */
            domestic_shipping_fee_cents?: number;
            /**
             * Format: int32
             * @description Flat international shipping fee.
             */
            international_shipping_fee_cents?: number;
            /**
             * Format: int32
             * @description Price paid by a collector for this artwork in My Collection
             */
            price_paid_cents?: number;
            /** @description Currency for price_paid_cents */
            price_paid_currency?: string;
            /**
             * Format: float
             * @description Weight of artwork to be shipped.
             */
            shipping_weight?: number;
            /** @description Weight metric for artwork to be shipped */
            shipping_weight_metric?: string;
            /**
             * Format: float
             * @description Framed height
             */
            framed_height?: number;
            /**
             * Format: float
             * @description Framed width
             */
            framed_width?: number;
            /**
             * Format: float
             * @description Framed depth
             */
            framed_depth?: number;
            /**
             * Format: float
             * @description Framed diameter
             */
            framed_diameter?: number;
            /** @description Metric for framed dimensions. */
            framed_metric?: string;
            /** @description Opted into Arta shipping service */
            arta_enabled?: string;
            /** @description Opted into Artsy international shipping service */
            artsy_shipping_international?: string;
            artsy_shipping_domestic?: string;
            /** @description Location of the artwork for "My Collection" artworks */
            artwork_location?: string;
            /** @description Submission ID in Convection */
            submission_id?: string;
            collector_location?: string;
            /** @description Notes provided by the partner in regards to shipping details */
            shipping_notes?: string;
            /** @description Sets the video as the cover image. */
            set_video_as_cover?: string;
            /** @description Artwork is promoted by partner. */
            partner_promoted?: string;
            /** @description The level of external exposure an artwork receives. */
            visibility_level?: string;
            /** @description Whether or not artist bio should be displayed on a private artwork. */
            display_artist_bio?: string;
            /** @description List of related artists' IDs */
            artists?: string[];
            /** @description Location of an artwork. */
            partner_location_id?: string;
            /** @description Collection id to add artwork to. */
            collection_id?: string;
            /** @description Params to create inventory record */
            inventory?: {
                /**
                 * Format: int32
                 * @description The new number of items available.
                 */
                count?: number;
                /** @description Whether the inventory for this item should be treated as unlimited. */
                unlimited?: boolean;
            };
        };
        /** @description Update an existing artwork. */
        putApiV1Artwork: {
            /** @description Artwork title. */
            title?: string;
            date?: string;
            /** @description Artwork category. */
            category?: string;
            condition?: string;
            /** @description Artwork medium. */
            medium?: string;
            /** @description Description of artist signature, when present. */
            signature?: string;
            /** @description Artwork provenance. */
            provenance?: string;
            /** @description Artwork series. */
            series?: string;
            /** @description Depth. */
            depth?: string;
            /** @description Diameter. */
            diameter?: string;
            /** @description Multimedia artwork duration. */
            duration?: string;
            /** @description Width. */
            width?: string;
            /** @description Height. */
            height?: string;
            /** @description Metric used for dimensions. */
            metric?: string;
            /** @description Artwork literature. */
            literature?: string;
            /** @description Exhibition history. */
            exhibition_history?: string;
            /** @description Collecting institution. */
            collecting_institution?: string;
            /** @description Additional information. */
            additional_information?: string;
            /** @description Image rights. */
            image_rights?: string;
            /** @description External provider identity. */
            external_id?: string;
            /** @description External video identity. Currently points to Vimeo upload. */
            external_video_id?: string;
            /** @description A reference to the system used to import the work. */
            import_source?: string;
            /** @description Availability. */
            availability?: string;
            /** @description Buy Now by partner */
            ecommerce?: string;
            /**
             * Format: float
             * @description Price listed.
             */
            price_listed?: number;
            /**
             * Format: float
             * @description Minimum price.
             */
            price_min?: number;
            /**
             * Format: float
             * @description Maximum price.
             */
            price_max?: number;
            /** @description Display price as range. */
            display_price_range?: string;
            /** @description Price hidden. */
            price_hidden?: string;
            /** @description Currency used. */
            price_currency?: string;
            /** @description Price includes tax, such as VAT. */
            price_includes_tax?: string;
            /** @description Artwork eligible for show feed. */
            feature_eligible?: string;
            /** @description Tags. */
            tags?: string[];
            inventory_id?: string;
            partner?: string;
            /** @description Net art website URL. */
            website?: string;
            /** @description Whether received directly from the artist or not. */
            secondary_market?: string;
            can_share_image?: string;
            /** @description Make Offer enabled by partner */
            offer?: string;
            /** @description Manufacturer of the artwork (generally applied to design objects). */
            manufacturer?: string;
            /** @description Indicates a unique single artwork (generally applied to design objects). */
            unique?: string;
            /** @description Dimensions as plain text. */
            dimensions_string?: string;
            /** @description Publisher of artwork (generally applied to prints). */
            publisher?: string;
            /** @description Text representation of relevant auction results. */
            relevant_auction_results?: string;
            /** @description Short text blurb about the artwork. */
            blurb?: string;
            /** @description Can be substituted for artist when no artist is available. */
            cultural_maker?: string;
            /** @description List of related cultural makers' IDs */
            cultural_maker_ids?: string[];
            /** @description Confidential notes about the artwork. */
            confidential_notes?: string;
            /** @description Attribution class, aka artwork classification */
            attribution_class?: string;
            /** @description Framed? */
            framed?: string;
            /** @description Certificate of Authenticity? */
            certificate_of_authenticity?: string;
            /** @description Certificate of Authenticity issued by authenticating body? */
            coa_by_authenticating_body?: string;
            /** @description Certificate of Authenticity issued by gallery? */
            coa_by_gallery?: string;
            /** @description Condition description. */
            condition_description?: string;
            /** @description Hand-signed by artist? */
            signed_by_artist?: string;
            /** @description Stamped by artist estate? */
            stamped_by_artist_estate?: string;
            /** @description Sticker label for signature/authentication? */
            sticker_label?: string;
            /** @description Signed in plate? */
            signed_in_plate?: string;
            /** @description Other form of signature/authentication? */
            signed_other?: string;
            /** @description Not signed? */
            not_signed?: string;
            /** @description Available for pickup? */
            pickup_available?: string;
            /**
             * Format: int32
             * @description Flat domestic shipping fee.
             */
            domestic_shipping_fee_cents?: number;
            /**
             * Format: int32
             * @description Flat international shipping fee.
             */
            international_shipping_fee_cents?: number;
            /**
             * Format: int32
             * @description Price paid by a collector for this artwork in My Collection
             */
            price_paid_cents?: number;
            /** @description Currency for price_paid_cents */
            price_paid_currency?: string;
            /**
             * Format: float
             * @description Weight of artwork to be shipped.
             */
            shipping_weight?: number;
            /** @description Weight metric for artwork to be shipped */
            shipping_weight_metric?: string;
            /**
             * Format: float
             * @description Framed height
             */
            framed_height?: number;
            /**
             * Format: float
             * @description Framed width
             */
            framed_width?: number;
            /**
             * Format: float
             * @description Framed depth
             */
            framed_depth?: number;
            /**
             * Format: float
             * @description Framed diameter
             */
            framed_diameter?: number;
            /** @description Metric for framed dimensions. */
            framed_metric?: string;
            /** @description Opted into Arta shipping service */
            arta_enabled?: string;
            /** @description Opted into Artsy international shipping service */
            artsy_shipping_international?: string;
            artsy_shipping_domestic?: string;
            /** @description Location of the artwork for "My Collection" artworks */
            artwork_location?: string;
            /** @description Submission ID in Convection */
            submission_id?: string;
            collector_location?: string;
            /** @description Notes provided by the partner in regards to shipping details */
            shipping_notes?: string;
            /** @description Sets the video as the cover image. */
            set_video_as_cover?: string;
            /** @description Artwork is promoted by partner. */
            partner_promoted?: string;
            /** @description The level of external exposure an artwork receives. */
            visibility_level?: string;
            /** @description Whether or not artist bio should be displayed on a private artwork. */
            display_artist_bio?: string;
            /** @description List of related artists' IDs */
            artists?: string[];
            /** @description Location of an artwork. */
            partner_location_id?: string;
            /** @description Publishes an artwork without validating */
            force_publish?: boolean;
        };
        /** @description Create or update an edition set's inventory. */
        putApiV1ArtworkArtworkIdEditionSetIdInventory: {
            /**
             * Format: int32
             * @description The new number of items available.
             */
            count?: number;
            /** @description Whether the inventory for this item should be treated as unlimited (default: false). */
            unlimited?: boolean;
            /**
             * Format: int32
             * @description Number of items to deduct from sold inventory
             */
            deduct?: number;
            /**
             * Format: int32
             * @description Number of items to be added back to sold inventory
             */
            undeduct?: number;
        };
        /** @description Update an existing edition set. */
        putApiV1ArtworkArtworkIdEditionSet: {
            /** @description Availability. */
            availability?: string;
            /** @description Buy Now by partner */
            ecommerce?: string;
            /** @description Make Offer enabled by partner */
            offer?: string;
            /**
             * Format: float
             * @description Price listed.
             */
            price_listed?: number;
            /**
             * Format: float
             * @description Minimum price.
             */
            price_min?: number;
            /**
             * Format: float
             * @description Maximum price.
             */
            price_max?: number;
            /** @description Price hidden. */
            price_hidden?: string;
            /** @description Currency used. */
            price_currency?: string;
            /** @description Display price as range. */
            display_price_range?: string;
            /** @description Price includes tax, such as VAT. */
            price_includes_tax?: string;
            /** @description Height. */
            height?: string;
            /** @description Width. */
            width?: string;
            /** @description Depth. */
            depth?: string;
            /** @description Diameter. */
            diameter?: string;
            /** @description Multimedia artwork duration. */
            duration?: string;
            /** @description Metric used for dimensions. */
            metric?: string;
            /** @description Number of works in this edition. */
            edition_size?: string;
            /** @description Available editions in an array format, eg. ['1', 2, '3-9']. */
            available_editions?: string[];
            /**
             * Format: int32
             * @description Artist proofs.
             */
            artist_proofs?: number;
            /** @description External identity. */
            external_id?: string;
            /** @description Whether received directly from the artist or not. */
            secondary_market?: string;
            /**
             * Format: int32
             * @description Prototypes (typically used in design objects).
             */
            prototypes?: number;
            /**
             * Format: float
             * @description Weight of artwork to be shipped.
             */
            shipping_weight?: number;
            /** @description Weight metric for artwork to be shipped */
            shipping_weight_metric?: string;
            /** @description Framed? */
            framed?: string;
            /**
             * Format: float
             * @description Framed height
             */
            framed_height?: number;
            /**
             * Format: float
             * @description Framed width
             */
            framed_width?: number;
            /**
             * Format: float
             * @description Framed depth
             */
            framed_depth?: number;
            /**
             * Format: float
             * @description Framed diameter
             */
            framed_diameter?: number;
            /** @description Metric for framed dimensions. */
            framed_metric?: string;
            partner_id?: string;
        };
        /** @description Create an artwork edition set. */
        postApiV1ArtworkArtworkIdEditionSet: {
            /** @description Availability. */
            availability?: string;
            /** @description Buy Now by partner */
            ecommerce?: string;
            /** @description Make Offer enabled by partner */
            offer?: string;
            /**
             * Format: float
             * @description Price listed.
             */
            price_listed?: number;
            /**
             * Format: float
             * @description Minimum price.
             */
            price_min?: number;
            /**
             * Format: float
             * @description Maximum price.
             */
            price_max?: number;
            /** @description Price hidden. */
            price_hidden?: string;
            /** @description Currency used. */
            price_currency?: string;
            /** @description Display price as range. */
            display_price_range?: string;
            /** @description Price includes tax, such as VAT. */
            price_includes_tax?: string;
            /** @description Height. */
            height?: string;
            /** @description Width. */
            width?: string;
            /** @description Depth. */
            depth?: string;
            /** @description Diameter. */
            diameter?: string;
            /** @description Multimedia artwork duration. */
            duration?: string;
            /** @description Metric used for dimensions. */
            metric?: string;
            /** @description Number of works in this edition. */
            edition_size?: string;
            /** @description Available editions in an array format, eg. ['1', 2, '3-9']. */
            available_editions?: string[];
            /**
             * Format: int32
             * @description Artist proofs.
             */
            artist_proofs?: number;
            /** @description External identity. */
            external_id?: string;
            /** @description Whether received directly from the artist or not. */
            secondary_market?: string;
            /**
             * Format: int32
             * @description Prototypes (typically used in design objects).
             */
            prototypes?: number;
            /**
             * Format: float
             * @description Weight of artwork to be shipped.
             */
            shipping_weight?: number;
            /** @description Weight metric for artwork to be shipped */
            shipping_weight_metric?: string;
            /** @description Framed? */
            framed?: string;
            /**
             * Format: float
             * @description Framed height
             */
            framed_height?: number;
            /**
             * Format: float
             * @description Framed width
             */
            framed_width?: number;
            /**
             * Format: float
             * @description Framed depth
             */
            framed_depth?: number;
            /**
             * Format: float
             * @description Framed diameter
             */
            framed_diameter?: number;
            /** @description Metric for framed dimensions. */
            framed_metric?: string;
            partner_id?: string;
            /** @description Params to create inventory record */
            inventory?: {
                /**
                 * Format: int32
                 * @description The new number of items available.
                 */
                count?: number;
                /** @description Whether the inventory for this item should be treated as unlimited. */
                unlimited?: boolean;
            };
        };
        /** @description Update a bank account. */
        putApiV1BankAccount: {
            /** @description Account holder name. */
            account_holder_name?: string;
        };
        /** @description Add a bank account. */
        postApiV1BankAccount: {
            /** @description Payment method ID in Stripe. */
            external_id: string;
            /** @description Last 4. */
            last4: string;
            /** @description Fingerprint. */
            fingerprint: string;
            /** @description User ID. */
            user_id: string;
            /**
             * @description Bank account type.
             * @enum {string}
             */
            bank_account_type: "us_bank_account" | "sepa_debit";
            /** @description Account holder type. */
            account_holder_type?: string;
            /** @description Account type. */
            account_type?: string;
            /** @description Bank name. */
            bank_name?: string;
            /** @description Routing number. */
            routing_number?: string;
            /** @description Account holder name. */
            account_holder_name?: string;
            /** @description Account holder email. */
            account_holder_email?: string;
            /** @description Country. */
            country?: string;
            /** @description Currency. */
            currency?: string;
            /** @description Flag showing if this bank account was created for one time use */
            one_time_use?: boolean;
            /** @description Status. */
            status?: string;
            /** @description [SEPA only] Bank code. */
            bank_code?: string;
            /** @description [SEPA only] Branch code. */
            branch_code?: string;
        };
        /** @description Retract a bidder position. */
        putApiV1BidderPositionIdRetract: {
            /** @description Reason for retraction. */
            reason: string;
        };
        /** @description Place a bid with a maximum amount in cents. */
        postApiV1BidderPosition: {
            /** @description Sale id. */
            sale_id: string;
            /** @description Artwork id. */
            artwork_id: string;
            /** @description Maximum amount to bid, in cents. */
            max_bid_amount_cents: string;
            /** @description User placing bid. */
            user_id: string;
            /** @description Bid maximum amount immediately rather than incrementing as necessary. */
            bid_max?: boolean;
        };
        /** @description Register to bid. */
        putApiV1Bidder: {
            /** @description Whether this bidder is approved by an admin. */
            created_by_admin?: boolean;
            /** @description Whether this bidder has been disqualified by an admin. */
            disqualified?: boolean;
        };
        /** @description Register to bid. */
        postApiV1Bidder: {
            /** @description Sale id. */
            sale_id: string;
            /** @description User being registered (default: current user; admins only). */
            user_id?: string;
        };
        /** @description Receive Connect webhooks from Stripe. */
        postApiV1CallbacksStripeConnect: {
            id: string;
        };
        /** @description Receive webhooks from Stripe. */
        postApiV1CallbacksStripe: {
            id: string;
        };
        /** @description Receive and process webhooks from Jumio */
        postApiV1CallbacksJumio: {
            /** @description Identifier of an IdentityVerification. */
            merchantIdScanReference: string;
            /** @description Jumio's own identifier for the corresponding scan reference. */
            jumioIdScanReference: string;
        };
        /** @description Receive webhook from Gemini Image Processing Service. */
        postApiV1CallbacksGemini: {
            /** @description Token for entry. */
            token: string;
            /** @description Hash of metadata, should include _type and id. */
            metadata: string;
            /** @description Hash of image version and url. */
            image_url?: string;
            /** @description Hash of deep zoom attributes (for artworks only). */
            deep_zoom?: string;
            /** @description Hash of image geometry attributes. */
            image_geometry?: string;
            /** @description Hash of visual genome (genes and values- artworks only). */
            genes?: string;
            /** @description File size of generated asset. */
            file_size?: string;
            /** @description Compact textual representation of a placeholder for an image. */
            blurhash?: string;
        };
        /** @description Webhook for receiving updates from Braze */
        postApiV1CallbacksBraze: {
            /** @description User id */
            external_id: string;
            /** @description Value of Braze email subscribe property. */
            email_subscribe: string;
            /** @description The frequency being adjusted. */
            email_frequency: string;
        };
        /** @description Update a collection. */
        putApiV1Collection: {
            name?: string;
            description?: string;
            default?: boolean;
            private?: boolean;
            saves?: boolean;
            shareable_with_partners?: boolean;
            /** @description User id. */
            user_id: string;
        };
        /** @description Create a collection. */
        postApiV1Collection: {
            name?: string;
            description?: string;
            default?: boolean;
            private?: boolean;
            saves?: boolean;
            shareable_with_partners?: boolean;
            /** @description User id. */
            user_id: string;
        };
        /** @description Add an artwork to a collection. */
        postApiV1CollectionCollectionIdArtwork: {
            /** @description User id. */
            user_id: string;
        };
        /** @description Update an existing collector profile. */
        putApiV1CollectorProfile: {
            /** @description Institutional Affiliations. */
            institutional_affiliations?: string;
            /** @description Artsy confirmed buyer creation */
            confirmed_buyer_at?: string;
            /**
             * Format: int32
             * @description User Collector Level.
             */
            collector_level?: number;
            /** @description List of affiliated auction house ids, referencing Galaxy. */
            affiliated_auction_house_ids?: string[];
            /** @description Free-form text of purchases the collector has indicated. */
            self_reported_purchases?: string;
            /** @description List of affiliated fair ids, referencing Galaxy. */
            affiliated_fair_ids?: string[];
            /** @description List of affiliated gallery ids, referencing Galaxy. */
            affiliated_gallery_ids?: string[];
            /**
             * Format: int32
             * @description Yearly budget minimum.
             */
            yearly_budget_min?: number;
            /**
             * Format: int32
             * @description Yearly budget maximum.
             */
            yearly_budget_max?: number;
            /**
             * Format: int32
             * @description Minimum number of works collected per year.
             */
            min_works_per_year?: number;
            /** @description Why the collector buys art. */
            why_buy_art?: string;
            /** @description Whether the collector has been to an art auction. */
            been_to_auction?: string;
            /** @description Whether or not the collector works with an advisor. */
            works_with_advisor?: string;
            /** @description Collector's LinkedIn url. */
            linked_in?: string;
            /** @description Collector's Facebook page. */
            facebook?: string;
            /** @description Collector's Instagram handle. */
            instagram?: string;
            /** @description Collector's Twitter handle. */
            twitter?: string;
            /** @description Company website. */
            company_website?: string;
            /** @description Company name. */
            company_name?: string;
            /** @description Collector Intent. */
            intents?: string[];
            /** @description User bio in their own words. */
            bio?: string;
            /** @description Whether or not the collector shares detailed profile information with galleries. */
            privacy?: string;
            /** @description User id. */
            user?: string;
            /** @description Artsy confirmed buyer. */
            confirmed_buyer?: boolean;
            /** @description Artsy confirmed professional buyer. */
            professional_buyer?: boolean;
        };
        /** @description Update an existing device. */
        putApiV1Device: {
            /** @description Name for device. */
            name?: string;
            /** @description Token for device. */
            token?: string;
            /** @description App id for device. */
            app_id?: string;
            /** @description App Store version? */
            production?: boolean;
            /** @description Platform for device. */
            platform?: string;
        };
        /** @description Create or update a device. */
        postApiV1Device: {
            /** @description Name for device. */
            name?: string;
            /** @description Token for device. */
            token?: string;
            /** @description App id for device. */
            app_id?: string;
            /** @description App Store version? */
            production?: boolean;
            /**
             * @description Platform for device.
             * @default ios
             */
            platform: string;
        };
        /** @description Modify the image on a fair. */
        putApiV1FairFairIdImage: {
            /** @description Remote URL for the image to upload. */
            remote_image_url?: string;
            /** @description Gemini token. */
            gemini_token?: string;
            /**
             * @description Which type of fair image
             * @default banner
             * @enum {string}
             */
            type: "mobile" | "banner";
        };
        /** @description Add an image to a fair. */
        postApiV1FairFairIdImage: {
            /** @description Remote URL for the image to upload. */
            remote_image_url?: string;
            /** @description Gemini token. */
            gemini_token?: string;
            /**
             * @description Which type of fair image
             * @default banner
             * @enum {string}
             */
            type: "mobile" | "banner";
        };
        /** @description Create a new fair. */
        postApiV1Fair: {
            name?: string;
            published?: string;
            start_at?: string;
            end_at?: string;
            about?: string;
            contact?: string;
            links?: string;
            location?: string;
            /** @description Short summary (275 character max) */
            summary?: string;
            medium_genes?: string;
            filter_genes?: string;
            /** @description Markdown, containing ticket link information */
            tickets_link?: string;
            /** Format: int32 */
            tier?: number;
            layout?: string;
            /** @description Tells clients to display the VIP fair context */
            display_vip?: string;
            /** @description Indicates if fair has official partnership with Artsy */
            has_full_feature?: string;
            /** @description Token for image entry on Gemini. */
            gemini_token?: string;
            organizer?: string;
            autopublish_artworks_at?: string;
            tagline?: string;
            hours?: string;
            tickets?: string;
            /** @description URL link to floorplan file */
            floorplan_url?: string;
            /** @description When true, banner size will be x-large no matter the tier. */
            has_large_banner?: string;
            /** @description When true, eligible for a homepage rail. */
            has_homepage_section?: string;
            /** @description When true, shows up in listings. */
            has_listing?: string;
            active_start_at?: string;
            /** @description List of slugs of associated collections from KAWS */
            kaws_collection_slugs?: string[];
            /** @description Suggested filters for associated artworks. */
            featured_keywords?: string[];
        };
        /** @description Update an existing fair. */
        putApiV1Fair: {
            name?: string;
            published?: string;
            start_at?: string;
            end_at?: string;
            about?: string;
            contact?: string;
            links?: string;
            location?: string;
            /** @description Short summary (275 character max) */
            summary?: string;
            medium_genes?: string;
            filter_genes?: string;
            /** @description Markdown, containing ticket link information */
            tickets_link?: string;
            /** Format: int32 */
            tier?: number;
            layout?: string;
            /** @description Tells clients to display the VIP fair context */
            display_vip?: string;
            /** @description Indicates if fair has official partnership with Artsy */
            has_full_feature?: string;
            /** @description Token for image entry on Gemini. */
            gemini_token?: string;
            organizer?: string;
            autopublish_artworks_at?: string;
            tagline?: string;
            hours?: string;
            tickets?: string;
            /** @description URL link to floorplan file */
            floorplan_url?: string;
            /** @description When true, banner size will be x-large no matter the tier. */
            has_large_banner?: string;
            /** @description When true, eligible for a homepage rail. */
            has_homepage_section?: string;
            /** @description When true, shows up in listings. */
            has_listing?: string;
            active_start_at?: string;
            /** @description List of slugs of associated collections from KAWS */
            kaws_collection_slugs?: string[];
            /** @description Suggested filters for associated artworks. */
            featured_keywords?: string[];
        };
        /** @description Update an existing fair event. */
        putApiV1FairFairIdFairEvent: {
            name?: string;
            description?: string;
            extended_description?: string;
            venue?: string;
            start_at?: string;
            end_at?: string;
            fair?: string;
            fair_event_groups?: string;
            venue_address?: string;
            /** @description Token for image entry on Gemini. */
            gemini_token?: string;
            caption?: string;
        };
        /** @description Create a new fair event. */
        postApiV1FairFairIdFairEvent: {
            name?: string;
            description?: string;
            extended_description?: string;
            venue?: string;
            start_at?: string;
            end_at?: string;
            fair?: string;
            fair_event_groups?: string;
            venue_address?: string;
            /** @description Token for image entry on Gemini. */
            gemini_token?: string;
            caption?: string;
        };
        /** @description Create a new fair event group. */
        postApiV1FairFairIdFairEventGroup: {
            name?: string;
            description?: string;
            fair?: string;
        };
        /** @description Update a fair organizer. */
        putApiV1FairOrganizer: {
            name?: string;
            about?: string;
            website?: string;
            /** @description Fairs to set (id's). */
            fairs?: string[];
        };
        /** @description Create a fair organizer. */
        postApiV1FairOrganizer: {
            name?: string;
            about?: string;
            website?: string;
            /** @description Fairs to set (id's). */
            fairs?: string[];
        };
        /** @description Update an existing link. */
        putApiV1FeaturedLink: {
            href?: string;
            title?: string;
            subtitle?: string;
            /** @description Display on mobile. */
            display_on_mobile?: string;
            /** @description Display on desktop. */
            display_on_desktop?: string;
            /** @description Display on martsy. */
            display_on_martsy?: string;
            /** @description Token for image entry on Gemini. */
            gemini_token?: string;
            description?: string;
            /** @description S3 bucket of an already uploaded image. */
            source_bucket?: string;
            /** @description S3 key of an already uploaded image. */
            source_key?: string;
        };
        /** @description Create a new link. */
        postApiV1FeaturedLink: {
            href?: string;
            title?: string;
            subtitle?: string;
            /** @description Display on mobile. */
            display_on_mobile?: string;
            /** @description Display on desktop. */
            display_on_desktop?: string;
            /** @description Display on martsy. */
            display_on_martsy?: string;
            /** @description Token for image entry on Gemini. */
            gemini_token?: string;
            description?: string;
            /** @description S3 bucket of an already uploaded image. */
            source_bucket?: string;
            /** @description S3 key of an already uploaded image. */
            source_key?: string;
        };
        /** @description Update an existing feature. */
        putApiV1Feature: {
            name?: string;
            description?: string;
            active?: string;
            /** @description Token for image entry on Gemini. */
            gemini_token?: string;
            subheadline?: string;
            /** @description Text that gets an emphasized UI treatment. */
            callout?: string;
            layout?: string;
            /** @description S3 bucket of an already uploaded image. */
            source_bucket?: string;
            /** @description S3 key of an already uploaded image. */
            source_key?: string;
        };
        /** @description Create a feature. */
        postApiV1Feature: {
            name?: string;
            description?: string;
            active?: string;
            /** @description Token for image entry on Gemini. */
            gemini_token?: string;
            subheadline?: string;
            /** @description Text that gets an emphasized UI treatment. */
            callout?: string;
            layout?: string;
            /** @description S3 bucket of an already uploaded image. */
            source_bucket?: string;
            /** @description S3 key of an already uploaded image. */
            source_key?: string;
        };
        /** @description Create feedback. */
        postApiV1Feedback: {
            message?: string;
            url?: string;
            user_name?: string;
            user_email?: string;
            email?: string;
            name?: string;
        };
        /** @description Add a show to the list of shows a user is following */
        postApiV1FollowShows: {
            /** @description ID of the show to follow. */
            partner_show_id: string;
        };
        /** @description Create a gene type. */
        postApiV1GeneType: {
            name?: string;
            published?: string;
            genes?: string;
            properties?: string;
        };
        /** @description Updated a gene type. */
        putApiV1GeneType: {
            name?: string;
            published?: string;
            genes?: string;
            properties?: string;
        };
        /** @description Create a gene. */
        postApiV1Gene: {
            name?: string;
            /** @description User and SEO-friendly alternate display name (optional) */
            display_name?: string;
            description?: string;
            published?: string;
            browseable?: string;
            gene_type?: string;
            gene_family_id?: string;
            additional_search_terms?: string[];
            automation_rules?: string;
            notes?: string;
            examples?: string;
            automated?: string;
            /** @description Token for image entry on Gemini. */
            gemini_token?: string;
        };
        /** @description Updated a gene. */
        putApiV1Gene: {
            name?: string;
            /** @description User and SEO-friendly alternate display name (optional) */
            display_name?: string;
            description?: string;
            published?: string;
            browseable?: string;
            gene_type?: string;
            gene_family_id?: string;
            additional_search_terms?: string[];
            automation_rules?: string;
            notes?: string;
            examples?: string;
            automated?: string;
            /** @description Token for image entry on Gemini. */
            gemini_token?: string;
        };
        /** @description Update a hero unit. */
        putApiV1HeroUnits: {
            /** @description Body content for Hero Unit. */
            body?: string;
            /** @description Link text for Hero Unit. */
            link_text?: string;
            /** @description Link url for Hero Unit. */
            link_url?: string;
            /** @description Title content for Hero Unit. */
            title?: string;
            /**
             * Format: date-time
             * @description Time to start displaying Hero Unit.
             */
            start_at?: string;
            /**
             * Format: date-time
             * @description Time to end displaying Hero Unit.
             */
            end_at?: string;
            /**
             * Format: int32
             * @description Position for Hero Unit.
             */
            position?: number;
            /** @description Credit content for Hero Unit. */
            credit?: string;
            /** @description Label content for Hero Unit. */
            label?: string;
            image_attributes?: {
                /** @description Image url for Hero Unit. */
                image_url?: string;
            };
        };
        /** @description Create a hero unit. */
        postApiV1HeroUnits: {
            /** @description Body content for Hero Unit. */
            body: string;
            /** @description Link text for Hero Unit. */
            link_text: string;
            /** @description Link url for Hero Unit. */
            link_url: string;
            /** @description Title content for Hero Unit. */
            title: string;
            /**
             * Format: date-time
             * @description Time to start displaying Hero Unit.
             */
            start_at?: string;
            /**
             * Format: date-time
             * @description Time to end displaying Hero Unit.
             */
            end_at?: string;
            /**
             * Format: int32
             * @description Position for Hero Unit.
             */
            position?: number;
            /** @description Credit content for Hero Unit. */
            credit?: string;
            /** @description Label content for Hero Unit. */
            label?: string;
            image_attributes?: {
                /** @description Image url for Hero Unit. */
                image_url?: string;
            };
        };
        /** @description manually set the state on an identity verification */
        postApiV1IdentityVerificationIdOverride: {
            state: string;
            reason: string;
        };
        /** @description Create an identity verification */
        postApiV1IdentityVerification: {
            /** @description User id of the subject of the identity verification. When no params provided, the current_user will be the subject */
            user_id?: string;
            /** @description Email of the subject of the identity verification. When no params provided, the current_user will be the subject */
            email?: string;
            /** @description Full name to be used with the verification. When provided, we use this instead of the name associated with the user's account */
            name?: string;
            /**
             * @description Determines whether consumers of the identity verification event are asked to send an automated request email
             * @default true
             */
            send_email: boolean;
            /** @description The auction from which this identity verification request was initiated */
            sale_id?: string;
            /** @description The ID of the user that initiated the IDV request (self or admin) */
            initiator_id?: string;
            /** @description The ID of the order that caused this IDV request to be initiated */
            order_id?: string;
        };
        /** @description Update an existing inquiry request. */
        putApiV1InquiryRequest: {
            message?: string;
            introduction?: string;
            note?: string;
            flagged?: string;
            contact_gallery?: string;
            /** @description Outcome of inquiry requested selected by the user. */
            user_reported_outcome?: string;
            /** @description Comments by user regarding outcome of inquiry request. */
            user_reported_outcome_comment?: string;
            inquiry_questions?: string[];
            inquiry_shipping_location?: string;
            /** @description User id. */
            user?: string;
            /** @description Outcome Token used for authentication coming from email */
            outcome_token?: string;
        };
        /** @description Add a status to an inquiry request. */
        postApiV1InquiryRequestIdStatus: {
            title?: string;
            note?: string;
        };
        /** @description Update an invoice. */
        putApiV1Invoice: {
            /** @description Optional user to be associated with invoice. */
            user_id?: string;
            /** @description Optional recipient name. */
            name?: string;
            /** @description Optional recipient email. */
            email?: string;
            /** @description New state. */
            state?: string;
            /** @description User-visible note. */
            external_note?: string;
            /** @description Admin-only note. */
            internal_note?: string;
            /** @description Currency for the invoice and line items. */
            currency?: string;
        };
        /** @description Create an invoice. */
        postApiV1Invoice: {
            /** @description Optional user to be associated with invoice. */
            user_id?: string;
            /** @description Optional recipient name. */
            name?: string;
            /** @description Optional recipient email. */
            email?: string;
            /** @description User-visible note. */
            external_note?: string;
            /** @description Admin-only note. */
            internal_note?: string;
            /** @description Currency for the invoice and line items. */
            currency?: string;
        };
        /** @description Add a payment. */
        postApiV1InvoiceInvoiceIdPayment: {
            /** @description The invoice's secret token. */
            token: string;
            /** @description Already-saved card for user associated with invoice (required if no card token provided). */
            credit_card_id?: string;
            /** @description Result of card tokenization at provider (required if no card id provided). */
            credit_card_token?: string;
            /** @description Amount of this payment. */
            amount_cents: string;
            /**
             * @description Payment provider.
             * @enum {string}
             */
            provider: "stripe";
        };
        /** @description Update a line item. */
        putApiV1InvoiceInvoiceIdLineItem: {
            /** @description Description of charge. */
            description?: string;
            /** @description Line item amount in USD cents. */
            amount_cents?: string;
            /** @description Quantity, if applicable (default: 1). */
            quantity?: string;
            /** @description Artwork on which to base description/amount. */
            artwork_id?: string;
            /** @description Edition set on which to base description/amount. */
            edition_set_id?: string;
            /** @description SaleArtwork (auction or traditional) on which to base description/amount. */
            sale_artwork_id?: string;
            /** @description Admin-only explanation. */
            internal_note?: string;
        };
        /** @description Add a line item. */
        postApiV1InvoiceInvoiceIdLineItem: {
            /** @description Description of charge (required unless artwork provided). */
            description?: string;
            /** @description Line item amount in USD cents (required unless artwork provided). */
            amount_cents?: string;
            /** @description Quantity, if applicable (default: 1). */
            quantity?: string;
            /** @description Artwork on which to base description/amount. */
            artwork_id?: string;
            /** @description Edition set on which to base description/amount. */
            edition_set_id?: string;
            /** @description SaleArtwork (auction or traditional) on which to base description/amount. */
            sale_artwork_id?: string;
            /** @description Admin-only explanation. */
            internal_note?: string;
        };
        /** @description Updates an anonymous session. Uses cookied session_id if not specified. */
        putApiV1MeAnonymousSession: {
            session_id?: string;
            /** @description Email. */
            email?: string;
            /** @description Name. */
            name?: string;
            /** @description Profession. */
            profession?: string;
            /** @description Phone number. */
            phone?: string;
            location?: string;
            /** @description User this session registered/authenticated as (requires authentication). */
            subsequent_user_id?: string;
        };
        /** @description Creates [or updates] an anonymous session. */
        postApiV1MeAnonymousSession: {
            session_id?: string;
            /** @description Email. */
            email?: string;
            /** @description Name. */
            name?: string;
            /** @description Profession. */
            profession?: string;
            /** @description Phone number. */
            phone?: string;
            location?: string;
            /** @description User this session registered/authenticated as (requires authentication). */
            subsequent_user_id?: string;
        };
        /** @description Update an alert. */
        putApiV1MeAlert: {
            user_alert_settings?: {
                name?: string;
                push?: boolean;
                email?: boolean;
                /** @enum {string} */
                frequency?: "daily" | "instant";
                details?: string;
            };
            attributes?: {
                acquireable?: boolean;
                additional_gene_ids?: string[];
                artist_ids?: string[];
                artist_series_ids?: string[];
                at_auction?: boolean;
                attribution_class?: string[];
                colors?: string[];
                dimension_range?: string;
                height?: string;
                inquireable_only?: boolean;
                keyword?: string;
                location_cities?: string[];
                major_periods?: string[];
                materials_terms?: string[];
                offerable?: boolean;
                partner_ids?: string[];
                price_range?: string;
                sizes?: string[];
                width?: string;
            };
        };
        /** @description Create an alert. */
        postApiV1MeAlert: {
            user_alert_settings?: {
                name?: string;
                push?: boolean;
                email?: boolean;
                /** @enum {string} */
                frequency?: "daily" | "instant";
                details?: string;
            };
            attributes: {
                acquireable?: boolean;
                additional_gene_ids?: string[];
                artist_ids: string[];
                artist_series_ids?: string[];
                at_auction?: boolean;
                attribution_class?: string[];
                colors?: string[];
                dimension_range?: string;
                height?: string;
                inquireable_only?: boolean;
                keyword?: string;
                location_cities?: string[];
                major_periods?: string[];
                materials_terms?: string[];
                offerable?: boolean;
                partner_ids?: string[];
                price_range?: string;
                sizes?: string[];
                width?: string;
            };
        };
        /** @description Send a delayed inquiry request. */
        putApiV1MeArtworkInquiryRequestIdSend: {
            /** @description Client's key for anonymous session. */
            session_id?: string;
        };
        /** @description Update an existing inquiry request. */
        putApiV1MeArtworkInquiryRequest: {
            /** @description Optional message. */
            message?: string;
            /** @description Bool for whether to contact the gallery on create. */
            contact_gallery?: string;
            /** @description External session id to track logged out actions. */
            session_id?: string;
        };
        /** @description Create an artwork inquiry request. */
        postApiV1MeArtworkInquiryRequest: {
            /** @description Artwork id. */
            artwork: string;
            /** @description Anonymous session id. */
            anonymous_session_id?: string;
            /** @description User name for inquiries without an associated user. */
            name?: string;
            /** @description User email for inquiries without an associated user. */
            email?: string;
            /** @description Optional message. */
            message?: string;
            /** @description Optional introduction. */
            introduction?: string;
            /** @description Bool for whether to contact the gallery on create. */
            contact_gallery?: boolean;
            /** @description Last place user was before landing in Artsy. */
            referring_url?: string;
            /** @description First place user landed in Artsy. */
            landing_url?: string;
            /** @description URL used to generate the inquiry (sometimes we encode things in the query params). */
            inquiry_url?: string;
            /** @description External session id to track logged out actions. */
            session_id?: string;
            /**
             * Format: int32
             * @description Number of seconds to delay the sending of the inquiry. Default is no delay.
             */
            notification_delay?: number;
            inquiry_questions?: ("price_and_availability" | "shipping_quote" | "condition_and_provenance" | "similar_work" | "artist_information" | "artwork_information")[];
            inquiry_shipping_location?: Record<string, never>;
            order_id?: string;
        };
        /** @description Trigger a campaign send. */
        postApiV1MeTriggerCampaign: {
            /** @description Campaign id. */
            campaign_id: string;
        };
        /** @description Record a recently viewed artwork. */
        postApiV1MeRecentlyViewedArtworks: {
            /** @description Artwork id */
            artwork_id: string;
        };
        /** @description Set (or unset) user flag. */
        putApiV1MeUserFlags: {
            /** @description Label of user flag to set/unset. */
            key: string;
            /** @description New user flag value. If empty, unsets flag. */
            value?: string;
        };
        /** @description Change current user password. */
        putApiV1MePassword: {
            /** @description Current password. */
            current_password: string;
            /** @description New password. */
            new_password: string;
            /** @description New password confirmation. */
            password_confirmation?: string;
        };
        /** @description Update user info. */
        putApiV1Me: {
            /** @description Name. */
            name?: string;
            display_follow_tooltip?: string;
            display_filter_tooltip?: string;
            display_inquiry_tooltip?: string;
            display_favorites_dialog?: string;
            /** @description Phone number. */
            phone?: string;
            /** @description Normalized phone number. */
            phone_number?: string;
            /** @description ISO 3166 country code for phone number. */
            phone_country_code?: string;
            /** @description Gender. */
            gender?: string;
            /** Format: int32 */
            price_range_min?: number;
            /** Format: int32 */
            price_range_max?: number;
            /** @description Number of artworks purchased per year. */
            artworks_per_year?: string;
            /** @description Is a collector? */
            is_collector?: string;
            /** @description Works in the art industry? */
            industry?: string;
            /** @description Profession. */
            profession?: string;
            /** @description Additional personal notes. */
            notes?: string;
            /** @description Shares FollowArtists, FollowGenes, and FollowProfiles with partners. */
            share_follows?: string;
            /** @description Receive purchase notifications. */
            receive_purchase_notification?: string;
            /** @description Receive outbid auctions notifications. */
            receive_outbid_notification?: string;
            /** @description Receive lot opening auctions notifications. */
            receive_lot_opening_soon_notification?: string;
            /** @description Receive auction starting/ending notifications. */
            receive_sale_opening_closing_notification?: string;
            /** @description Receive new works notifications. */
            receive_new_works_notification?: string;
            /** @description Receive new sales notifications. */
            receive_new_sales_notification?: string;
            /** @description Receive promotional notifications. */
            receive_promotion_notification?: string;
            /** @description Receive order notifications. */
            receive_order_notification?: string;
            /** @description Receive viewing room notifications. */
            receive_viewing_room_notification?: string;
            /** @description Receive partner show notifications. */
            receive_partner_show_notification?: string;
            /** @description Receive partner offer notifications. */
            receive_partner_offer_notification?: string;
            /** @description Email. */
            email?: string;
            /** @description Frequency of marketing emails. */
            email_frequency?: string;
            location?: string;
            collector_since?: string;
            /** @description Automatically publish saved artworks and followed artists to Facebook. */
            publish_to_facebook?: string;
            is_representative?: string;
            /** @description Is the admin available to be contacted about inquiries. */
            is_available_representative?: string;
            data_transfer_opt_out?: string;
            /** @description Preferred currency. */
            currency_preference?: string;
            /** @description Preferred length unit preference. */
            length_unit_preference?: string;
            /** @description Required to change email address. */
            password?: string;
            /**
             * Format: int32
             * @description Collector Level of user.
             */
            collector_level?: number;
            /** @description User bio. */
            bio?: string;
            /** @description If true, user has accepted terms of use and privacy policy */
            accepted_terms_of_service?: boolean;
            /** @description If true, user has agreed to receive emails from Artsy */
            agreed_to_receive_emails?: boolean;
            /** @description If true, set timestamp of when user completed onboarding */
            completed_onboarding?: boolean;
            /** @description When true, will set last_update_prompt_at. */
            prompted_for_update?: boolean;
        };
        /** @description Get a token for a client app. */
        postApiV1MeToken: {
            /** @description ID of client application to get a JWT for. */
            client_application_id: string;
        };
        /** @description Link a 3rd party account. */
        postApiV1MeAuthentications: {
            /** @description An OAuth token. */
            oauth_token: string;
            /** @description An apple unique user id, used for apple authentication. */
            apple_uid: string;
            /** @description JWT used for apple authentication. */
            id_token?: string;
            /** @description User name, only used for apple authentication. */
            name?: string;
            /** @description User email, only used for apple authentication. */
            email?: string;
        };
        /** @description Place a bid with a maximum amount in cents. */
        postApiV1MeBidderPosition: {
            /** @description Sale id. */
            sale_id: string;
            /** @description Artwork id. */
            artwork_id: string;
            /** @description Maximum amount to bid, in cents. */
            max_bid_amount_cents: string;
            /** @description Bid maximum amount immediately rather than incrementing as necessary. */
            bid_max?: string;
        };
        /** @description Batch update Collections. */
        putApiV1MeCollections: {
            attributes: {
                id: string;
                shareable_with_partners: boolean;
            }[];
        };
        /** @description Change user icon. */
        putApiV1MeCollectorProfileIcon: {
            /** @description Gemini token. */
            gemini_token?: string;
            /** @description icon image. */
            remote_image_url?: string;
            /** @description source bucket. */
            source_bucket?: string;
            /** @description source key. */
            source_key?: string;
        };
        /** @description Update an existing collector profile for the current user or an anonymous session. */
        putApiV1MeCollectorProfile: {
            /** @description Institutional Affiliations. */
            institutional_affiliations?: string;
            /** @description Artsy confirmed buyer creation */
            confirmed_buyer_at?: string;
            /**
             * Format: int32
             * @description User Collector Level.
             */
            collector_level?: number;
            /** @description List of affiliated auction house ids, referencing Galaxy. */
            affiliated_auction_house_ids?: string[];
            /** @description Free-form text of purchases the collector has indicated. */
            self_reported_purchases?: string;
            /** @description List of affiliated fair ids, referencing Galaxy. */
            affiliated_fair_ids?: string[];
            /** @description List of affiliated gallery ids, referencing Galaxy. */
            affiliated_gallery_ids?: string[];
            /**
             * Format: int32
             * @description Yearly budget minimum.
             */
            yearly_budget_min?: number;
            /**
             * Format: int32
             * @description Yearly budget maximum.
             */
            yearly_budget_max?: number;
            /**
             * Format: int32
             * @description Minimum number of works collected per year.
             */
            min_works_per_year?: number;
            /** @description Why the collector buys art. */
            why_buy_art?: string;
            /** @description Whether the collector has been to an art auction. */
            been_to_auction?: string;
            /** @description Whether or not the collector works with an advisor. */
            works_with_advisor?: string;
            /** @description Collector's LinkedIn url. */
            linked_in?: string;
            /** @description Collector's Facebook page. */
            facebook?: string;
            /** @description Collector's Instagram handle. */
            instagram?: string;
            /** @description Collector's Twitter handle. */
            twitter?: string;
            /** @description Company website. */
            company_website?: string;
            /** @description Company name. */
            company_name?: string;
            /** @description What is the collector's intent. */
            intents?: string[];
            /** @description User bio in their own words. */
            bio?: string;
            /** @description Whether or not the collector shares detailed profile information with galleries. */
            privacy?: string;
            /** @description When true, will set professional_buyer_applied_at. */
            professional_buyer?: boolean;
            /** @description When true, will set loyalty_applicant_at. */
            loyalty_applicant?: boolean;
            /** @description Session id associated with the anonymous session. */
            session_id?: string;
            /** @description When true, will set last_update_prompt_at. */
            prompted_for_update?: boolean;
        };
        /** @description Create a new collector profile for the current user or an anonymous session. */
        postApiV1MeCollectorProfile: {
            /** @description Institutional Affiliations. */
            institutional_affiliations?: string;
            /** @description Artsy confirmed buyer creation */
            confirmed_buyer_at?: string;
            /**
             * Format: int32
             * @description User Collector Level.
             */
            collector_level?: number;
            /** @description List of affiliated auction house ids, referencing Galaxy. */
            affiliated_auction_house_ids?: string[];
            /** @description Free-form text of purchases the collector has indicated. */
            self_reported_purchases?: string;
            /** @description List of affiliated fair ids, referencing Galaxy. */
            affiliated_fair_ids?: string[];
            /** @description List of affiliated gallery ids, referencing Galaxy. */
            affiliated_gallery_ids?: string[];
            /**
             * Format: int32
             * @description Yearly budget minimum.
             */
            yearly_budget_min?: number;
            /**
             * Format: int32
             * @description Yearly budget maximum.
             */
            yearly_budget_max?: number;
            /**
             * Format: int32
             * @description Minimum number of works collected per year.
             */
            min_works_per_year?: number;
            /** @description Why the collector buys art. */
            why_buy_art?: string;
            /** @description Whether the collector has been to an art auction. */
            been_to_auction?: string;
            /** @description Whether or not the collector works with an advisor. */
            works_with_advisor?: string;
            /** @description Collector's LinkedIn url. */
            linked_in?: string;
            /** @description Collector's Facebook page. */
            facebook?: string;
            /** @description Collector's Instagram handle. */
            instagram?: string;
            /** @description Collector's Twitter handle. */
            twitter?: string;
            /** @description Company website. */
            company_website?: string;
            /** @description Company name. */
            company_name?: string;
            /** @description What is the collector's intent. */
            intents?: string[];
            /** @description User bio in their own words. */
            bio?: string;
            /** @description Whether or not the collector shares detailed profile information with galleries. */
            privacy?: string;
            /** @description When true, will set professional_buyer_applied_at. */
            professional_buyer?: boolean;
            /** @description When true, will set loyalty_applicant_at. */
            loyalty_applicant?: boolean;
            /** @description Session id associated with the anonymous session. */
            session_id?: string;
        };
        /** @description Update a collector reference. */
        putApiV1MeCollectorProfileCollectorReference: {
            /** @description Anonymous session id */
            anonymous_session_id?: string;
            /** @description Session id associated with the anonymous session. */
            session_id?: string;
            /** @description Email. */
            email?: string;
            /** @description Contact name. */
            contact_name?: string;
            /** @description Name of the organization. */
            organization?: string;
            /** @description Address of the organization. */
            address?: string;
            /** @description Phone number. */
            phone?: string;
            /** @description Art advisor or reference gallery. */
            reference_type?: string;
        };
        /** @description Create a collector reference. */
        postApiV1MeCollectorProfileCollectorReference: {
            /** @description Anonymous session id */
            anonymous_session_id?: string;
            /** @description Session id associated with the anonymous session. */
            session_id?: string;
            /** @description Email. */
            email?: string;
            /** @description Contact name. */
            contact_name?: string;
            /** @description Name of the organization. */
            organization?: string;
            /** @description Address of the organization. */
            address?: string;
            /** @description Phone number. */
            phone?: string;
            /** @description Art advisor or reference gallery. */
            reference_type?: string;
        };
        /** @description Add a credit card. */
        postApiV1MeCreditCards: {
            /** @description Tokenized card value (from 3rd party payment provider). */
            token: string;
            /**
             * @description Payment provider that tokenized card.
             * @default stripe
             * @enum {string}
             */
            provider: "stripe";
            /** @description External session id to track logged out actions. */
            session_id?: string;
            /** @description True if swiped via kiosk, must be sent with a matching application. */
            created_by_trusted_client?: boolean;
            /** @description Flag showing if this card was created for one time use */
            one_time_use?: boolean;
        };
        /** @description Update a followed artist reference. */
        putApiV1MeFollowArtist: {
            /** @description User notes. */
            notes?: string;
        };
        /** @description Follow an artist. */
        postApiV1MeFollowArtist: {
            /** @description Artist id. */
            artist_id: string;
            /** @description User notes. */
            notes?: string;
        };
        /** @description Update a followed gene reference. */
        putApiV1MeFollowGene: {
            /** @description User notes. */
            notes?: string;
        };
        /** @description Follow a gene. */
        postApiV1MeFollowGene: {
            /** @description Gene id. */
            gene_id: string;
            /** @description User notes. */
            notes?: string;
        };
        /** @description Follow 1 or more profiles. */
        postApiV1MeFollowProfiles: {
            /** @description Profile ids. */
            profile_id: string[];
            /** @description Whether these follows were machine-assisted. */
            auto?: string;
        };
        /** @description Follow a profile. */
        postApiV1MeFollowProfile: {
            /** @description Profile id. */
            profile_id: string;
            /** @description Whether this follow was machine-assisted. */
            auto?: boolean;
        };
        /** @description Generate gallery introduction based on params. */
        postApiV1MeInquiryIntroduction: {
            /** @description Optional name. */
            name?: string;
            /** @description Optional profession. */
            profession?: string;
            /** @description Optional location object. */
            location?: Record<string, never>;
            /**
             * Format: int32
             * @description Optional collector level.
             */
            collector_level?: number;
            /** @description Optional set of artist names. */
            collection?: string[];
            /** @description Optional name of fair. */
            attending?: string;
        };
        /** @description Send a delayed inquiry request. */
        putApiV1MeInquiryRequestIdSend: {
            /** @description External session id to track logged out actions. */
            session_id?: string;
        };
        /** @description Update an existing inquiry request. */
        putApiV1MeInquiryRequest: {
            /** @description Optional message. */
            message?: string;
            /** @description Whether to contact the gallery on create. */
            contact_gallery?: string;
            /** @description External session id to track logged out actions. */
            session_id?: string;
        };
        /** @description Create an inquiry request. */
        postApiV1MeInquiryRequest: {
            /** @description Anonymous session id. */
            anonymous_session_id?: string;
            /** @description User name for inquiries without an associated user. */
            name?: string;
            /** @description User email for inquiries without an associated user. */
            email?: string;
            /** @description Inquireable id. */
            inquireable_id: string;
            /** @description Inquireable type. */
            inquireable_type: string;
            /** @description Optional message. */
            message?: string;
            /** @description Whether to contact the gallery on create. */
            contact_gallery?: boolean;
            /** @description Last place user was before landing in Artsy. */
            referring_url?: string;
            /** @description First place user landed in Artsy. */
            landing_url?: string;
            /** @description URL used to generate the inquiry (sometimes we encode things in the query params). */
            inquiry_url?: string;
            /** @description External session id to track logged out actions. */
            session_id?: string;
            /**
             * Format: int32
             * @description Number of seconds to delay the sending of the inquiry. Default is no delay.
             */
            notification_delay?: number;
        };
        /** @description Mark notifications feed as seen */
        putApiV1MeNotificationsMarkAsSeen: {
            /**
             * Format: date-time
             * @description Mark notifications as seen until this moment
             */
            seen_at: string;
        };
        /** @description Mark a user's notifications read */
        putApiV1MeNotifications: {
            /** @description Notification IDs. If nothing is passed - all user's notifications will be updated */
            ids?: string[];
            /**
             * @description e.g. read status
             * @enum {string}
             */
            status?: "read" | "viewed" | "unread";
        };
        /** @description Request Price Estimate from the Artsy Specialist (does not fail if request has already been made) */
        postApiV1MeRequestPriceEstimate: {
            /** @description Artwork Id. */
            artwork_id: string;
            /** @description Requester's name. */
            requester_name?: string;
            /** @description Requester's email. */
            requester_email?: string;
            /** @description Requester's Phone Number. */
            requester_phone_number?: string;
        };
        /** @description Enable a disabled second factor */
        putApiV1MeSecondFactorsIdEnable: {
            password: string;
            /** @description OTP code. */
            code: string;
        };
        /** @description Update a disabled app or SMS second factor */
        putApiV1MeSecondFactors: {
            /**
             * @description Second factor kind.
             * @enum {string}
             */
            kind: "app" | "sms";
            attributes?: {
                /** @description Only for SMS second factors. */
                phone_number?: string;
                /** @description Only for SMS second factors. */
                country_code?: string;
                /** @description Only for app second factors */
                name?: string;
            };
        };
        /** @description Create a new app/sms second factor, or re-generate backups. */
        postApiV1MeSecondFactors: {
            /**
             * @description Second factor kind.
             * @enum {string}
             */
            kind: "app" | "backup" | "sms";
            attributes?: {
                /** @description Only for SMS second factors. */
                phone_number?: string;
                /** @description Only for SMS second factors. */
                country_code?: string;
                /** @description Only for app second factors */
                name?: string;
            };
            password: string;
        };
        /** @description Create a user fair action for the current user or an anonymous session. */
        postApiV1MeUserFairAction: {
            /** @description Fair id */
            fair_id: string;
            /** @description Action (one of ["Fair Partner Marketing", "Invitee", "Attendee", "General Admission", "Limited Access VIP", "All Access VIP"]) */
            action: string;
            /** @description Anonymous session id */
            anonymous_session_id?: string;
            /** @description Session id associated with the anonymous session. */
            session_id?: string;
        };
        /** @description Update a bookmarked interest reference. */
        putApiV1MeUserInterest: {
            body?: string;
            /** @description UserInterest category */
            category?: string;
            /** @description Privacy setting to hide from partners. */
            private?: boolean;
            /** @description Anonymous session id */
            anonymous_session_id?: string;
            /** @description Session id associated with the anonymous session. */
            session_id?: string;
        };
        /** @description Bookmark an interest. */
        postApiV1MeUserInterest: {
            /** @description interest id. */
            interest_id: string;
            /** @enum {string} */
            interest_type: "Artist" | "Gene";
            /** @description UserInterest category */
            category: string;
            /** @description Optional body for note */
            body?: string;
            /** @description Privacy setting to hide from partners. */
            private?: boolean;
            /** @description Anonymous session id */
            anonymous_session_id?: string;
            /** @description Session id associated with the anonymous session. */
            session_id?: string;
        };
        /** @description Create or reactivate a merchant account for a partner. */
        postApiV1MerchantAccount: {
            /** @description Partner Id. */
            partner_id: string;
            /** @description External id of the merchant account. */
            external_id: string;
        };
        /** @description Update notification preferences. */
        postApiV1NotificationPreferences: {
            /** @description Auth token. */
            authentication_token?: string;
        };
        /** @description Update an existing page. */
        putApiV1Page: {
            /** @description Page name. */
            name?: string;
            /** @description Page content. */
            content?: string;
            /** @description Page published. */
            published?: boolean;
            /** @description Page description. */
            description?: string;
            /** @description Page href. */
            href?: string;
            /** @description Page visible to public. */
            visible_to_public?: boolean;
            /** @description Page featured names. */
            featured_names?: string[];
        };
        /** @description Create a page. */
        postApiV1Page: {
            /** @description Page name. */
            name?: string;
            /** @description Page content. */
            content?: string;
            /** @description Page published. */
            published?: boolean;
            /** @description Page description. */
            description?: string;
            /** @description Page href. */
            href?: string;
            /** @description Page visible to public. */
            visible_to_public?: boolean;
            /** @description Page featured names. */
            featured_names?: string[];
        };
        /** @description Create a new partner show. */
        postApiV1PartnerIdShow: {
            name?: string;
            description?: string;
            press_release?: string;
            /** @description Link to the press release for this show */
            press_release_url?: string;
            partner_location?: string;
            fair?: string;
            start_at?: string;
            end_at?: string;
            all_day?: string;
            fair_location?: string;
            featured?: string;
            batch_publish?: string;
            display_on_partner_profile?: string;
            /** @description List of artist ID's without associated artworks. */
            artist_ids?: string[];
            /** @description List of artist ID's with associated eligible (published) artworks (may not be not 100% accurate). */
            eligible_artwork_artist_ids?: string[];
            /** @description Galaxy Id (if this show belongs to a galaxy partner). */
            galaxy_partner_id?: string;
            /** @description City the show is in, can be used as a fallback if no location (or for ref. shows). */
            partner_city?: string;
            /** @description Whether the show is a group show or not, can be explicitly set. */
            group?: string;
            /** @description Downcased version of the show name to allow for correct alphabetical sort */
            sortable_name?: string;
            /** @description The reason this show was blocked from discovery. */
            discovery_blocked_reason?: string;
            duplicate_of_id?: string;
            /** @description If set, the ids of linked `ViewingRoom`s. */
            viewing_room_ids?: string[];
        };
        /** @description Update an existing partner show. */
        putApiV1PartnerPartnerIdShow: {
            name?: string;
            description?: string;
            press_release?: string;
            /** @description Link to the press release for this show */
            press_release_url?: string;
            partner_location?: string;
            fair?: string;
            start_at?: string;
            end_at?: string;
            all_day?: string;
            fair_location?: string;
            featured?: string;
            batch_publish?: string;
            display_on_partner_profile?: string;
            /** @description List of artist ID's without associated artworks. */
            artist_ids?: string[];
            /** @description List of artist ID's with associated eligible (published) artworks (may not be not 100% accurate). */
            eligible_artwork_artist_ids?: string[];
            /** @description Galaxy Id (if this show belongs to a galaxy partner). */
            galaxy_partner_id?: string;
            /** @description City the show is in, can be used as a fallback if no location (or for ref. shows). */
            partner_city?: string;
            /** @description Whether the show is a group show or not, can be explicitly set. */
            group?: string;
            /** @description Downcased version of the show name to allow for correct alphabetical sort */
            sortable_name?: string;
            /** @description Reason for blocking this show from local discovery. Passing nil will enable it for discovery again. */
            discovery_blocked_reason?: string;
            /** @description When discovery_blocked_reason is "duplicate" we require the ID of the show it duplicates. */
            duplicate_of_id: string;
            /** @description If set, the ids of linked `ViewingRoom`s. */
            viewing_room_ids?: string[];
        };
        /** @description Update a partner show document. */
        putApiV1PartnerPartnerIdShowShowIdDocument: {
            /** @description Publicly-accessible URL of document. */
            remote_document_url?: string;
            /** @description Partner updatable label for the document. */
            title?: string;
            partner_show?: string;
        };
        /** @description Create a partner show document. */
        postApiV1PartnerPartnerIdShowShowIdDocument: {
            /** @description Partner updatable label for the document. */
            title?: string;
            partner_show?: string;
            /** @description Remote document url. */
            remote_document_url: string;
        };
        /** @description Update an artwork within a partner show. */
        putApiV1PartnerPartnerIdShowPartnerShowIdArtwork: {
            /** @description Artwork position. */
            position?: string;
        };
        /** @description Add an artwork to a partner show. */
        postApiV1PartnerPartnerIdShowPartnerShowIdArtwork: {
            /** @description Artwork position. */
            position?: string;
        };
        /** @description Create a new partner location. */
        postApiV1PartnerIdLocation: {
            name?: string;
            address?: string;
            address_2?: string;
            city?: string;
            state?: string;
            postal_code?: string;
            country?: string;
            /** @description Geo-location, in [lng, lat] order */
            coordinates?: string;
            /** @description Markdown text specifying operating hours */
            day_schedule_text?: string;
            phone?: string;
            position?: string;
            email?: string;
            fax?: string;
            publicly_viewable?: string;
            address_type?: string;
            partner_id?: string;
        };
        /** @description Update an existing partner location. */
        putApiV1PartnerPartnerIdLocation: {
            name?: string;
            address?: string;
            address_2?: string;
            city?: string;
            state?: string;
            postal_code?: string;
            country?: string;
            /** @description Geo-location, in [lng, lat] order */
            coordinates?: string;
            /** @description Markdown text specifying operating hours */
            day_schedule_text?: string;
            phone?: string;
            position?: string;
            email?: string;
            fax?: string;
            publicly_viewable?: string;
            address_type?: string;
            /** @description Set true for frozen coordinates. */
            skip_geocoding?: boolean;
        };
        /** @description Create a new partner. */
        postApiV1Partner: {
            given_name?: string;
            display_name?: string;
            short_name?: string;
            website?: string;
            email?: string;
            /** @description Whether to charge sales tax on ecommerce orders. */
            artsy_collects_sales_tax?: string;
            region?: string;
            sortable_name?: string;
            directly_contactable?: string;
            /** @description Alternate names or synonyms for this partner. */
            alternate_names?: string[];
            pre_qualify?: string;
            display_works_section?: string;
            /** @description Distinguish artists the partner represents on their profile page */
            distinguish_represented_artists?: string;
            /** @description Banner display on the profile overview page. */
            profile_banner_display?: string;
            /** @description Artists layout on the profile overview page. */
            profile_artists_layout?: string;
            /** @description Controls artists tab presence on gpp. Artists tab is hidden for Institutional partners and present for the rest of partners. */
            display_artists_section?: string;
            /** @description Type of contract relationship with Artsy. */
            contract_type?: string;
            type?: string;
            has_full_profile?: string;
            /**
             * Format: float
             * @description Commission rate paid by partners above and beyond transaction fees. Default is 0.1 if empty.
             */
            commission_rate?: number;
            admin_id?: string;
            outreach_admin_id?: string;
            referral_contact_id?: string;
            /** Format: int32 */
            relative_size?: number;
            partner_categories?: string;
            /** @description Include in Criteo artwork report. */
            criteo_eligible?: string;
            /** @description Partner could opt their works to buy now / make offer and accept payments using their merchant account. */
            commerce_enabled?: string;
            /** @description Indicates the partner is eligible for manual wire transfers */
            wire_transfer_enabled?: string;
            /** @description Partner can have artworks implictly enrolled as 'Make Offer' on the artwork page */
            implicit_offer_enabled?: string;
            /** @description Partner could list artworks for purchasing from inquiry conversations. */
            inquiry_order_enabled?: string;
            /** @description Gives admins the ability to toggle whether a partner has Folio access. */
            has_limited_folio_access?: string;
            /** @description The VAT identification number belonging to this partner. */
            vat_number?: string;
            /** @description Whether the partner is registered, registered_and_exempt, exempt, or ineligible for a VAT identification number. */
            vat_status?: string;
            /** @description Whether the partner's VAT exempt status is approved by Artsy. */
            vat_exempt_approved?: string;
            /** @description Indicates the partner is a trusted seller on Artsy. */
            verified_seller?: string;
            /** @description Whether the partner is managed by ERP for subscriptions. */
            managed_by_erp?: string;
            /** @description Partner is required to configure a merchant account */
            requires_merchant_account?: string;
            /** @description Triggers partner on platform transaction notifications */
            enforce_on_platform_transactions?: string;
            /** @description Whether the partner should have access to ACH payment method on subscriptions. */
            enable_ach_payment_method?: string;
            /** @description Suggested filters for associated artworks. */
            featured_keywords?: string[];
        };
        /** @description Create a new partner contact. */
        postApiV1PartnerPartnerIdContact: {
            name?: string;
            first?: string;
            last?: string;
            email?: string;
            phone?: string;
            position?: string;
            can_contact?: string;
            partner_location_id?: string;
        };
        /** @description Update the contact type for a partner contact. */
        putApiV1PartnerPartnerIdContactIdContactType: {
            /** @description Contact type. */
            contact_type: string;
        };
        /** @description Update an existing partner contact. */
        putApiV1PartnerPartnerIdContact: {
            name?: string;
            first?: string;
            last?: string;
            email?: string;
            phone?: string;
            position?: string;
            can_contact?: string;
            partner_location_id?: string;
            /** @description Contact type. */
            contact_type?: string;
        };
        /** @description Add a commission exemption credit in USD. */
        postApiV1PartnerPartnerIdCommissionExemptionsCredit: {
            /**
             * Format: int32
             * @description Amount to credit in USD cents.
             */
            amount_cents: number;
            /** @description Notes to associate with created commission exemption. */
            notes?: string;
            /** @description The subscription id associated with this credit. */
            subscription_id?: string;
            /**
             * Format: date
             * @description Partner commission_exemption_start_at date for all exemptions.
             */
            commission_exemption_start_at?: string;
            /**
             * Format: date
             * @description Partner commission_exemption_end_at date for all exemptions.
             */
            commission_exemption_end_at?: string;
        };
        /** @description Update an artwork's genome. */
        putApiV1PartnerIdArtworkArtworkIdGenome: {
            /** @description Gene name/value pairs. */
            genes?: Record<string, never>;
        };
        /** @description Bulk edit all partner artworks. */
        putApiV1PartnerIdArtworks: {
            /** @description Opt in or out of Artsy domestic shipping */
            artsy_shipping_domestic?: boolean;
            /** @description Opt in or out of Artsy International shipping */
            artsy_shipping_international?: boolean;
            /** @description Set location of artwork to partner location */
            location?: string;
        };
        /** @description Create an artwork by duplicating attributes from original artwork. */
        postApiV1PartnerIdArtworksDuplicate: {
            /** @description Artwork id that should be used as original. */
            original_id: string;
            /** @description Title of the new artwork */
            title?: string;
        };
        /** @description Update an existing partner artist. */
        putApiV1PartnerIdArtist: {
            featured?: boolean;
            /** @description Location of image for the PartnerArtist. */
            remote_image_url?: string;
        };
        /** @description Update a partner artist document. */
        putApiV1PartnerPartnerIdArtistArtistIdDocument: {
            /** @description Publicly-accessible URL of document. */
            remote_document_url?: string;
            /** @description Partner updatable label for the document. */
            title?: string;
        };
        /** @description Create a partner artist document. */
        postApiV1PartnerPartnerIdArtistArtistIdDocument: {
            /** @description Publicly-accessible URL of document. */
            remote_document_url?: string;
            /** @description Partner updatable label for the document. */
            title?: string;
        };
        /** @description Create a new partner album. */
        postApiV1PartnerIdAlbum: {
            name?: string;
            partner?: string;
        };
        /** @description Update an existing partner album. */
        putApiV1PartnerPartnerIdAlbum: {
            name?: string;
        };
        /** @description Update an artwork within a partner album. */
        putApiV1PartnerPartnerIdAlbumPartnerAlbumIdArtwork: {
            /** @description Artwork position. */
            position?: string;
        };
        /** @description Add an artwork to a partner album. */
        postApiV1PartnerPartnerIdAlbumPartnerAlbumIdArtwork: {
            /** @description Artwork position. */
            position?: string;
        };
        /** @description Creates a new partner credit card with a given token attached to the partner's customer account. */
        postApiV1PartnerPartnerIdCreditCard: {
            /** @description Card tokenization. */
            credit_card_token: string;
            /**
             * @description Third party payment provider that tokenized card.
             * @default stripe
             * @enum {string}
             */
            provider: "stripe";
        };
        /** @description Opt artworks into Commerce and Make Offer listing options */
        putApiV1PartnerPartnerIdOptInArtworksIntoCommerce: {
            /** @description Update pickup_available for artworks */
            pickup_available?: boolean;
            /** @description Turn artworks price visibility into Exact Price */
            exact_price?: boolean;
            /** @description Update framed value for artworks */
            framed?: boolean;
            /** @description Update certificate of authenticity for artworks */
            certificate_of_authenticity?: boolean;
            /** @description Update coa_by_gallery for artworks */
            coa_by_gallery?: boolean;
            /** @description Update coa_by_authenticating_body for artworks */
            coa_by_authenticating_body?: boolean;
            /** @description Opt artwork into Artsy Shipping Domestic */
            artsy_shipping_domestic?: boolean;
            /** @description Update artworks to partner business location */
            location_id?: string;
            /** @description Update signed_by_artist for artworks */
            signed_by_artist?: boolean;
            /** @description Update stamped_by_artist_estate for artworks */
            stamped_by_artist_estate?: boolean;
            /** @description Update sticker_label for artworks */
            sticker_label?: boolean;
            /** @description Update signed_in_platefor artworks */
            signed_in_plate?: boolean;
            /** @description Update signed_other for artworks */
            signed_other?: boolean;
            /** @description Update not_signed for artworks */
            not_signed?: boolean;
        };
        /** @description Send an email to the current user containing artwork data */
        postApiV1PartnerPartnerIdCommerceOptInEligibleArtworksReport: {
            /** @description Update pickup_available for artworks */
            pickup_available?: boolean;
            /** @description Turn artworks price visibility into Exact Price */
            exact_price?: boolean;
            /** @description Update framed value for artworks */
            framed?: boolean;
            /** @description Update certificate of authenticity for artworks */
            certificate_of_authenticity?: boolean;
            /** @description Update coa_by_gallery for artworks */
            coa_by_gallery?: boolean;
            /** @description Update coa_by_authenticating_body for artworks */
            coa_by_authenticating_body?: boolean;
            /**
             * @description Determine whether the report must be generated for eligible or non-eligible artworks
             * @default true
             */
            eligible: boolean;
            /** @description Opt artwork into Artsy Shipping Domestic */
            artsy_shipping_domestic?: boolean;
            /** @description Update artworks to partner business location */
            location_id?: string;
            /** @description Update signed_by_artist for artworks */
            signed_by_artist?: boolean;
            /** @description Update stamped_by_artist_estate for artworks */
            stamped_by_artist_estate?: boolean;
            /** @description Update sticker_label for artworks */
            sticker_label?: boolean;
            /** @description Update signed_in_platefor artworks */
            signed_in_plate?: boolean;
            /** @description Update signed_other for artworks */
            signed_other?: boolean;
            /** @description Update not_signed for artworks */
            not_signed?: boolean;
        };
        /** @description Add a bank account to a partner. */
        postApiV1PartnerPartnerIdBankAccount: {
            /** @description Payment method ID in Stripe. */
            external_id: string;
            /** @description Last 4. */
            last4: string;
            /** @description Fingerprint. */
            fingerprint: string;
            /**
             * @description Bank account type.
             * @enum {string}
             */
            bank_account_type: "us_bank_account" | "sepa_debit";
            /** @description Account holder type. */
            account_holder_type?: string;
            /** @description Account type. */
            account_type?: string;
            /** @description Bank name. */
            bank_name?: string;
            /** @description Routing number. */
            routing_number?: string;
            /** @description Account holder name. */
            account_holder_name?: string;
            /** @description Account holder email. */
            account_holder_email?: string;
            /** @description Country. */
            country?: string;
            /** @description Currency. */
            currency?: string;
            /** @description Flag showing if this bank account was created for one time use */
            one_time_use?: boolean;
            /** @description Status. */
            status?: string;
            /** @description [SEPA only] Bank code. */
            bank_code?: string;
            /** @description [SEPA only] Branch code. */
            branch_code?: string;
        };
        /** @description Sets (or unsets) a partner flag. */
        putApiV1PartnerIdPartnerFlags: {
            /** @description Label of partner flag to set/unset. */
            key: string;
            /** @description New partner flag value. If empty, unsets flag. */
            value?: string;
        };
        /** @description Update an existing partner. */
        putApiV1Partner: {
            given_name?: string;
            display_name?: string;
            short_name?: string;
            website?: string;
            email?: string;
            /** @description Whether to charge sales tax on ecommerce orders. */
            artsy_collects_sales_tax?: string;
            region?: string;
            sortable_name?: string;
            directly_contactable?: string;
            /** @description Alternate names or synonyms for this partner. */
            alternate_names?: string[];
            pre_qualify?: string;
            display_works_section?: string;
            /** @description Distinguish artists the partner represents on their profile page */
            distinguish_represented_artists?: string;
            /** @description Banner display on the profile overview page. */
            profile_banner_display?: string;
            /** @description Artists layout on the profile overview page. */
            profile_artists_layout?: string;
            /** @description Controls artists tab presence on gpp. Artists tab is hidden for Institutional partners and present for the rest of partners. */
            display_artists_section?: string;
            /** @description Contract type. */
            contract_type?: string;
            /** @description Type. */
            type?: string;
            /** @description Profile completeness. */
            has_full_profile?: boolean;
            /**
             * Format: float
             * @description Commission paid by non-subscriber/fair partner
             */
            commission_rate?: number;
            /** @description Admin assigned for this partner. */
            admin_id?: string;
            /** @description Admin that signed up this partner. */
            outreach_admin_id?: string;
            /** @description Admin that reffered this partner and gets the comission. */
            referral_contact_id?: string;
            /**
             * Format: int32
             * @description Size of the partner
             * @enum {integer}
             */
            relative_size?: 1 | 2 | 3 | 4 | 5;
            /** @description Array of partner slugs to assign to this partner */
            partner_categories?: string[];
            /** @description Include in Criteo artwork report. */
            criteo_eligible?: string;
            /** @description Partner could opt their works to buy now / make offer and accept payments using their merchant account. */
            commerce_enabled?: string;
            /** @description Indicates the partner is eligible for manual wire transfers */
            wire_transfer_enabled?: string;
            /** @description Partner can have artworks implictly enrolled as 'Make Offer' on the artwork page */
            implicit_offer_enabled?: string;
            /** @description Partner could list artworks for purchasing from inquiry conversations. */
            inquiry_order_enabled?: string;
            /** @description Whether this partner has limited Folio access. */
            has_limited_folio_access?: boolean;
            /** @description The VAT identification number belonging to this partner. */
            vat_number?: string;
            /** @description Whether the partner is registered, registered_and_exempt, exempt, or ineligible for a VAT identification number. */
            vat_status?: string;
            /** @description Whether the partner's VAT exempt status is approved by Artsy. */
            vat_exempt_approved?: string;
            /** @description Indicates the partner is a trusted seller on Artsy. */
            verified_seller?: string;
            /** @description Whether the partner is managed by ERP for subscriptions. */
            managed_by_erp?: string;
            /** @description Partner is required to configure a merchant account */
            requires_merchant_account?: string;
            /** @description Triggers partner on platform transaction notifications */
            enforce_on_platform_transactions?: string;
            /** @description Whether the partner should have access to ACH payment method on subscriptions. */
            enable_ach_payment_method?: string;
            /** @description Suggested filters for associated artworks. */
            featured_keywords?: string[];
        };
        /** @description Create a partner show event. */
        postApiV1PartnerPartnerIdShowShowIdEvent: {
            title?: string;
            start_at?: string;
            end_at?: string;
            time_zone?: string;
            description?: string;
            partner_show?: string;
            event_type?: string;
        };
        /** @description Update an existing partner category. */
        putApiV1PartnerCategory: {
            name?: string;
            category_type?: string;
            /** @description Whether or not the partner category is only for internal purposes. */
            internal?: string;
        };
        /** @description Create a new partner category. */
        postApiV1PartnerCategory: {
            name?: string;
            category_type?: string;
            /** @description Whether or not the partner category is only for internal purposes. */
            internal?: string;
        };
        /** @description Add a partner contact to a partner communication. */
        postApiV1PartnerCommunicationIdPartnerContact: {
            name?: string;
        };
        /** @description Update an existing partner communication. */
        putApiV1PartnerCommunication: {
            name?: string;
        };
        /** @description Create a partner communication. */
        postApiV1PartnerCommunication: {
            name?: string;
        };
        /** @description Create a partner offer. */
        postApiV1PartnerOffer: {
            /** @description Artwork ID. */
            artwork_id: string;
            /**
             * Format: int32
             * @description Discount percentage.
             */
            discount_percentage: number;
            /** @description Note. */
            note?: string;
        };
        /** @description Create a partner subscription charge. */
        postApiV1PartnerSubscriptionCharge: {
            /** @description Partner id. */
            partner_id?: string;
            /** @description once per month */
            bill_date?: string;
            payment_method?: string;
            state?: string;
        };
        /** @description Add a line item to a charge. */
        postApiV1PartnerSubscriptionChargeIdLineItem: {
            /** @description Category that this line item belongs to. */
            category: string;
            /** @description Notes explaining the line item. */
            notes?: string;
            /**
             * Format: int32
             * @description Amount to add.
             */
            price_cents?: number;
        };
        /** @description Mark an existing charge as completed. */
        putApiV1PartnerSubscriptionChargeIdReceivePayment: {
            /** @description Method used to pay for the charge. */
            payment_method: string;
            /** @description Date the charge was approved. */
            approved_at: string;
        };
        /** @description Update an existing partner subscription charge. */
        putApiV1PartnerSubscriptionCharge: {
            /** @description once per month */
            bill_date?: string;
            payment_method?: string;
            state?: string;
        };
        /** @description Update an existing partner subscription plan. */
        putApiV1PartnerSubscriptionPlan: {
            name?: string;
            display_name?: string;
            /** Format: int32 */
            price_in_cents?: number;
            /** Format: int32 */
            default_trial_days?: number;
        };
        /** @description Create a partner subscription plan. */
        postApiV1PartnerSubscriptionPlan: {
            name?: string;
            display_name?: string;
            /** Format: int32 */
            price_in_cents?: number;
            /** Format: int32 */
            default_trial_days?: number;
        };
        /** @description Add a partner to a partner subscription plan. */
        postApiV1PartnerSubscriptions: {
            /** @description Partner id. */
            partner_id: string;
            /** @description Partner Subscription Plan id. */
            partner_subscription_plan_id: string;
            /**
             * Format: int32
             * @description Duration of subscription in months for regular and in days for trial subscriptions.
             */
            duration: number;
            /**
             * Format: int32
             * @description Overwrite to Price per month, inherited from plan
             */
            price_in_cents?: number;
            /**
             * Format: int32
             * @description Frequency of payments during this subscription (example: Frequency 12 for 12 month duration means monthly).
             */
            payment_frequency?: number;
            /**
             * Format: int32
             * @description Discount in cents applied to each each payment.
             */
            discount_in_cents?: number;
            /** @description Boolean flag defining if this subscription is trial or not */
            trial?: boolean;
            /**
             * Format: int32
             * @description Number of days we want to offer trial for, only used when type is Trial and to override default trial days
             */
            trial_duration_days?: number;
        };
        /** @description Terminates a partner subscription. */
        putApiV1PartnerSubscriptionIdTerminate: {
            /** @description Explanation for why the subscription is ending. */
            explanation?: string;
            /** @description Date to terminate the subscription. */
            termination_date?: string;
            /** @description Optionally mark already terminated subscription as churned. */
            churned?: boolean;
        };
        /** @description Activates a partner subscription. */
        putApiV1PartnerSubscriptionIdActivate: {
            /** @description Payment method for generated charges. */
            payment_method: string;
            /**
             * Format: date
             * @description The subscription contract start date.
             */
            start_at?: string;
            /**
             * Format: int32
             * @description Number of days of grace period offered to this subscription which overrides plan.default_grace_days.
             */
            grace_days?: number;
            /** @description Decide if the charges should include a credit card fee */
            has_credit_card_fee?: boolean;
        };
        /** @description Updates a partner subscription. */
        putApiV1PartnerSubscription: {
            /**
             * Format: date
             * @description The subscription contract start date.
             */
            start_at?: string;
            /**
             * Format: date
             * @description The subscription contract end date.
             */
            end_at?: string;
            /** @description Payment method for generated charges. */
            payment_method?: string;
            /**
             * Format: int32
             * @description Frequency of payments during this subscription (example: Frequency 12 for 12 month duration means monthly).
             */
            payment_frequency?: number;
            /**
             * Format: int32
             * @description Discount in cents applied to each each payment.
             */
            discount_in_cents?: number;
            /**
             * Format: int32
             * @description Duration of this subsription
             */
            duration?: number;
            /**
             * Format: date
             * @description The subscription contract grace period end date, can only be set when subscription is in grace period.
             */
            grace_end_at?: string;
            /** @description Whether or not charges should be generated after updating the subscription. */
            generate_charges?: boolean;
        };
        /** @description Update a partner artist. */
        putApiV1PartnerArtist: {
            biography?: string;
            display_on_partner_profile?: boolean;
            featured?: boolean;
            gemini_token?: string;
            hide_in_presentation_mode?: boolean;
            /** @description Location of image for the PartnerArtist. */
            remote_image_url?: string;
            represented_by?: boolean;
            use_default_biography?: boolean;
        };
        /** @description Update a partner show's image. */
        putApiV1PartnerShowPartnerShowIdImage: {
            image?: string;
            /** Format: int32 */
            position?: number;
            default?: string;
        };
        /** @description Add an image to a partner show. */
        postApiV1PartnerShowPartnerShowIdImage: {
            /** @description Remote URL for the image to upload. */
            remote_image_url?: string;
            /** @description Associated artwork ID. */
            artwork_id?: string;
            /** @description Associated artist ID. */
            artist_id?: string;
            /** @description Make image default. */
            default?: boolean;
        };
        /** @description Create a new period */
        postApiV1Period: {
            /** @description Name for this periodized subdivision of a Culture */
            name?: string;
            /** @description Description of the period */
            description?: string;
            /** @description An optional start date for this period */
            start_date?: string;
            /** @description An optional end date for this period */
            end_date?: string;
        };
        /** @description Update an existing period */
        putApiV1Period: {
            /** @description Name for this periodized subdivision of a Culture */
            name?: string;
            /** @description Description of the period */
            description?: string;
            /** @description An optional start date for this period */
            start_date?: string;
            /** @description An optional end date for this period */
            end_date?: string;
        };
        /** @description Update a profile. */
        putApiV1Profile: {
            /** @description Unique handle. */
            handle?: string;
            /** @description Short bio (275 character max). */
            bio?: string;
            /** @description Full bio (800 character max). */
            full_bio?: string;
            /** @description Website. */
            website?: string;
            /** @description Location. */
            location?: string;
            /** @description Private profiles hide certain features for non admins. */
            private?: string;
            menu_color_class?: string;
        };
        /** @description Create a profile. */
        postApiV1Profile: {
            /** @description Unique handle. */
            handle?: string;
            /** @description Short bio (275 character max). */
            bio?: string;
            /** @description Full bio (800 character max). */
            full_bio?: string;
            /** @description Website. */
            website?: string;
            /** @description Location. */
            location?: string;
            /** @description Private profiles hide certain features for non admins. */
            private?: string;
            menu_color_class?: string;
        };
        /** @description Update profile cover. */
        putApiV1ProfileIdCoverImage: {
            /** @description Gemini token. */
            gemini_token?: string;
            /** @description Profile cover image. */
            remote_image_url?: string;
        };
        /** @description Change profile cover. */
        postApiV1ProfileIdCoverImage: {
            /** @description Gemini token. */
            gemini_token?: string;
            /** @description Profile cover image. */
            remote_image_url?: string;
        };
        /** @description Update profile icon. */
        putApiV1ProfileIdIcon: {
            /** @description Gemini token. */
            gemini_token?: string;
            /** @description Profile icon image. */
            remote_image_url?: string;
        };
        /** @description Change profile icon. */
        postApiV1ProfileIdIcon: {
            /** @description Gemini token. */
            gemini_token?: string;
            /** @description Profile icon image. */
            remote_image_url?: string;
        };
        /** @description Update a purchase. */
        putApiV1Purchase: {
            /** @description Partner id. */
            artist_id?: string;
            /**
             * Format: float
             * @description Artsy commission.
             */
            artsy_commission?: number;
            /** @description Artwork id. */
            artwork_id?: string;
            /** @description Discover admin id. */
            discover_admin_id?: string;
            /** @description Email for purchase. */
            email?: string;
            /** @description Fair id. */
            fair_id?: string;
            /** @description Note for purchase. */
            note?: string;
            /** @description Owner id. */
            owner_id?: string;
            /** @description Owner type. */
            owner_type?: string;
            /** @description Partner id. */
            partner_id?: string;
            /**
             * Format: int32
             * @description Sale date.
             */
            sale_date?: number;
            /** @description Sale admin id. */
            sale_admin_id?: string;
            /** @description Sale id. */
            sale_id?: string;
            /**
             * Format: float
             * @description Sale price in USD.
             */
            sale_price?: number;
            /** @description Source of purchase. */
            source?: string;
            /** @description User id. */
            user_id?: string;
        };
        /** @description Create a purchase object for artwork sale. */
        postApiV1Purchase: {
            /** @description Partner id. */
            artist_id?: string;
            /**
             * Format: float
             * @description Artsy commission.
             */
            artsy_commission?: number;
            /** @description Artwork id. */
            artwork_id?: string;
            /** @description Discover admin id. */
            discover_admin_id?: string;
            /** @description Email for purchase. */
            email?: string;
            /** @description Fair id. */
            fair_id?: string;
            /** @description Note for purchase. */
            note?: string;
            /** @description Owner id. */
            owner_id?: string;
            /** @description Owner type. */
            owner_type?: string;
            /** @description Partner id. */
            partner_id?: string;
            /**
             * Format: int32
             * @description Sale date.
             */
            sale_date?: number;
            /** @description Sale admin id. */
            sale_admin_id?: string;
            /** @description Sale id. */
            sale_id?: string;
            /**
             * Format: float
             * @description Sale price in USD.
             */
            sale_price?: number;
            /** @description Source of purchase. */
            source?: string;
            /** @description User id. */
            user_id?: string;
        };
        /** @description Update a sale agreement. */
        putApiV1SaleAgreements: {
            /** @description The content of the sale agreement. */
            content?: string;
            /**
             * Format: date
             * @description The start date of the sale to be displayed with the sale agreement.
             */
            display_start_at?: string;
            /**
             * Format: date
             * @description The end date of the sale to be displayed with the sale agreement.
             */
            display_end_at?: string;
            /** @description The status of the sale agreement. */
            status?: string;
            /** @description If the sale agreement should be publicly viewable. */
            published?: boolean;
        };
        /** @description Create a new sale agreement. */
        postApiV1SaleAgreements: {
            /** @description The content of the sale agreement. */
            content: string;
            /**
             * Format: date
             * @description The start date of the sale to be displayed with the sale agreement.
             */
            display_start_at?: string;
            /**
             * Format: date
             * @description The end date of the sale to be displayed with the sale agreement.
             */
            display_end_at?: string;
            /** @description The id of the sale for which this sale agreement is associated. */
            sale_id: string;
            /** @description The status of the sale agreement. */
            status: string;
        };
        /** @description Update an existing sale. */
        putApiV1Sale: {
            associated_sale_id?: string;
            auto_approval_ends_at?: string;
            bid_increment_strategy_name?: string;
            bidding_engine_enabled?: boolean;
            buyers_premium_id?: string;
            /** Format: int32 */
            cascading_end_time_interval_minutes?: number;
            collect_payments?: boolean;
            currency?: string;
            delegate_bidding?: boolean;
            description?: string;
            end_at?: string;
            event_end_at?: string;
            event_location?: string;
            event_start_at?: string;
            /** Format: int32 */
            extended_bidding_interval_minutes?: number;
            /** Format: int32 */
            extended_bidding_period_minutes?: number;
            gemini_token?: string;
            hide_total?: boolean;
            is_artsy_licensed?: boolean;
            is_auction?: boolean;
            is_benefit?: boolean;
            is_gallery_auction?: boolean;
            is_preliminary?: boolean;
            live_start_at?: string;
            lot_conditions_report_enabled?: boolean;
            name?: string;
            partner_id?: string;
            profile_id?: string;
            promoted_sale_id?: string;
            published?: boolean;
            registration_ends_at?: string;
            require_bidder_approval?: boolean;
            require_identity_verification?: boolean;
            sale_code?: string;
            start_at?: string;
            time_zone?: string;
            trusted_client_bypasses_card_requirement?: boolean;
            virtual_live?: boolean;
        };
        /** @description Create a sale. */
        postApiV1Sale: {
            associated_sale_id?: string;
            auto_approval_ends_at?: string;
            bid_increment_strategy_name?: string;
            bidding_engine_enabled?: boolean;
            buyers_premium_id?: string;
            /** Format: int32 */
            cascading_end_time_interval_minutes?: number;
            collect_payments?: boolean;
            currency?: string;
            delegate_bidding?: boolean;
            description?: string;
            end_at?: string;
            event_end_at?: string;
            event_location?: string;
            event_start_at?: string;
            /** Format: int32 */
            extended_bidding_interval_minutes?: number;
            /** Format: int32 */
            extended_bidding_period_minutes?: number;
            gemini_token?: string;
            hide_total?: boolean;
            is_artsy_licensed?: boolean;
            is_auction?: boolean;
            is_benefit?: boolean;
            is_gallery_auction?: boolean;
            is_preliminary?: boolean;
            live_start_at?: string;
            lot_conditions_report_enabled?: boolean;
            name?: string;
            partner_id?: string;
            profile_id?: string;
            promoted_sale_id?: string;
            published?: boolean;
            registration_ends_at?: string;
            require_bidder_approval?: boolean;
            require_identity_verification?: boolean;
            sale_code?: string;
            start_at?: string;
            time_zone?: string;
            trusted_client_bypasses_card_requirement?: boolean;
            virtual_live?: boolean;
        };
        /** @description Update a sale artwork. */
        putApiV1SaleSaleIdSaleArtwork: {
            currency?: string;
            /** Format: date-time */
            end_at?: string;
            /** Format: int32 */
            estimate_cents?: number;
            exclude_from_marketing?: boolean;
            /** Format: int32 */
            high_estimate_cents?: number;
            lot_label?: string;
            /** Format: int32 */
            low_estimate_cents?: number;
            /** Format: int32 */
            opening_bid_cents?: number;
            /** Format: float */
            position?: number;
            /** Format: int32 */
            reserve_cents?: number;
            reserve_unknown?: boolean;
            user_notes?: string;
            /** Format: date-time */
            withdrawn_at?: string;
        };
        /** @description Add an artwork to a sale. */
        postApiV1SaleSaleIdSaleArtwork: {
            currency?: string;
            /** Format: date-time */
            end_at?: string;
            /** Format: int32 */
            estimate_cents?: number;
            exclude_from_marketing?: boolean;
            /** Format: int32 */
            high_estimate_cents?: number;
            lot_label?: string;
            /** Format: int32 */
            low_estimate_cents?: number;
            /** Format: int32 */
            opening_bid_cents?: number;
            /** Format: float */
            position?: number;
            /** Format: int32 */
            reserve_cents?: number;
            reserve_unknown?: boolean;
            user_notes?: string;
            /** Format: date-time */
            withdrawn_at?: string;
            /** @description Artwork id. */
            artwork_id: string;
        };
        /** @description Update an item in an existing set. */
        putApiV1SetIdItem: {
            /**
             * Format: int32
             * @description New item position.
             */
            position?: number;
            /** @description Gemini token. */
            gemini_token?: string;
        };
        /** @description Add an item to an existing set. */
        postApiV1SetIdItem: {
            /** @description Item id. */
            item_id: string;
            /**
             * Format: int32
             * @description Item position.
             */
            position?: number;
            /** @description Gemini token. */
            gemini_token?: string;
        };
        /** @description Update an existing set. */
        putApiV1Set: {
            key?: string;
            name?: string;
            internal_name?: string;
            description?: string;
            published?: string;
            /** @description Display on mobile. */
            display_on_mobile?: string;
            /** @description Display on desktop. */
            display_on_desktop?: string;
            /** @description Display on martsy. */
            display_on_martsy?: string;
            layout?: string;
            /** @description Items will be added and/or removed if the parameter is provided. Otherwise, items will not be modified */
            item_ids?: string[];
            /** @description Owner type. */
            owner_id?: string;
            /** @description Owner id. */
            owner_type?: string;
            /** @description When true, will unset `owner` relation. */
            unset_owner?: boolean;
        };
        /** @description Create a new set. */
        postApiV1Set: {
            key?: string;
            name?: string;
            internal_name?: string;
            description?: string;
            published?: string;
            /** @description Display on mobile. */
            display_on_mobile?: string;
            /** @description Display on desktop. */
            display_on_desktop?: string;
            /** @description Display on martsy. */
            display_on_martsy?: string;
            layout?: string;
            /** @description Item type. */
            item_type: string;
            /** @description Owner type. */
            owner_type?: string;
            /** @description Owner id. */
            owner_id?: string;
            /** @description Item ids. */
            item_ids?: string[];
        };
        /** @description Create a new shortcut for a given long URL (and optional short URL). */
        postApiV1Shortcut: {
            /** @description URI (full URL or path) to shorten */
            long: string;
            /** @description Desired path to function as the shortcut */
            short?: string;
        };
        /** @description Update an existing shortcut. */
        putApiV1Shortcut: {
            /** @description Shortcut long. */
            long?: string;
        };
        /** @description Create a new partner show. */
        postApiV1Show: {
            name?: string;
            description?: string;
            press_release?: string;
            /** @description Link to the press release for this show */
            press_release_url?: string;
            start_at?: string;
            end_at?: string;
            all_day?: string;
            fair_location?: string;
            featured?: string;
            batch_publish?: string;
            display_on_partner_profile?: string;
            /** @description List of artist ID's without associated artworks. */
            artist_ids?: string[];
            /** @description List of artist ID's with associated eligible (published) artworks (may not be not 100% accurate). */
            eligible_artwork_artist_ids?: string[];
            /** @description Galaxy Id (if this show belongs to a galaxy partner). */
            galaxy_partner_id?: string;
            /** @description City the show is in, can be used as a fallback if no location (or for ref. shows). */
            partner_city?: string;
            /** @description Whether the show is a group show or not, can be explicitly set. */
            group?: string;
            /** @description Downcased version of the show name to allow for correct alphabetical sort */
            sortable_name?: string;
            /** @description The reason this show was blocked from discovery. */
            discovery_blocked_reason?: string;
            duplicate_of_id?: string;
            /** @description If set, the ids of linked `ViewingRoom`s. */
            viewing_room_ids?: string[];
            partner_id: string;
            fair_id?: string;
            partner_location_id?: string;
        };
        /** @description Update an existing partner show. */
        putApiV1Show: {
            name?: string;
            description?: string;
            press_release?: string;
            /** @description Link to the press release for this show */
            press_release_url?: string;
            start_at?: string;
            end_at?: string;
            all_day?: string;
            fair_location?: string;
            featured?: string;
            batch_publish?: string;
            display_on_partner_profile?: string;
            /** @description List of artist ID's without associated artworks. */
            artist_ids?: string[];
            /** @description List of artist ID's with associated eligible (published) artworks (may not be not 100% accurate). */
            eligible_artwork_artist_ids?: string[];
            /** @description Galaxy Id (if this show belongs to a galaxy partner). */
            galaxy_partner_id?: string;
            /** @description City the show is in, can be used as a fallback if no location (or for ref. shows). */
            partner_city?: string;
            /** @description Whether the show is a group show or not, can be explicitly set. */
            group?: string;
            /** @description Downcased version of the show name to allow for correct alphabetical sort */
            sortable_name?: string;
            /** @description The reason this show was blocked from discovery. */
            discovery_blocked_reason?: string;
            duplicate_of_id?: string;
            /** @description If set, the ids of linked `ViewingRoom`s. */
            viewing_room_ids?: string[];
            partner_id: string;
            fair_id?: string;
            partner_location_id?: string;
        };
        /** @description Add an image to a hero unit. */
        postApiV1SiteHeroUnitSiteHeroUnitIdImage: {
            /** @description Image Type. */
            type: string;
            /** @description Remote URL for the image to upload. */
            remote_image_url?: string;
            /** @description Gemini token. */
            gemini_token?: string;
        };
        /** @description Update a site hero unit. */
        putApiV1SiteHeroUnit: {
            name?: string;
            description?: string;
            enabled?: string;
            start_at?: string;
            end_at?: string;
            link?: string;
            link_text?: string;
            /** Format: int32 */
            position?: number;
            menu_color_class?: string;
            type?: string;
            heading?: string;
            credit_line?: string;
            link_color_hover_hex?: string;
            link_color_off_hex?: string;
            mobile_title?: string;
            mobile_description?: string;
            mobile_menu_color_class?: string;
            /** @description Display on mobile. */
            display_on_mobile?: string;
            /** @description Display on desktop. */
            display_on_desktop?: string;
            /** @description Display on martsy. */
            display_on_martsy?: string;
            app_title?: string;
            app_description?: string;
        };
        /** @description Create a site hero unit. */
        postApiV1SiteHeroUnit: {
            name?: string;
            description?: string;
            enabled?: string;
            start_at?: string;
            end_at?: string;
            link?: string;
            link_text?: string;
            /** Format: int32 */
            position?: number;
            menu_color_class?: string;
            type?: string;
            heading?: string;
            credit_line?: string;
            link_color_hover_hex?: string;
            link_color_off_hex?: string;
            mobile_title?: string;
            mobile_description?: string;
            mobile_menu_color_class?: string;
            /** @description Display on mobile. */
            display_on_mobile?: string;
            /** @description Display on desktop. */
            display_on_desktop?: string;
            /** @description Display on martsy. */
            display_on_martsy?: string;
            app_title?: string;
            app_description?: string;
        };
        /** @description Create or return an existing customer account and Stripe customer for a user. */
        postApiV1StripeCustomer: {
            /** @description User Id. */
            user_id: string;
        };
        /** @description Update an existing tag. */
        putApiV1Tag: {
            name?: string;
            description?: string;
        };
        /** @description Get a token for a client app. */
        postApiV1TokenExchange: {
            /** @description ID of client application to get a JWT for. */
            client_application_id: string;
        };
        /** @description Update a user's art quiz. */
        putApiV1UserArtQuiz: {
            /** @description The id of the artwork to update. */
            artwork_id: string;
            /** @description When true clear the interaction. */
            clear_interaction?: boolean;
        };
        /** @description Creates a new user fair action for a given collector or sale profile. */
        postApiV1UserFairAction: {
            /** @description Fair id. */
            fair_id: string;
            /** @enum {string} */
            action: "Fair Partner Marketing" | "Invitee" | "Attendee" | "General Admission" | "Limited Access VIP" | "All Access VIP";
            /** @enum {string} */
            owner_type?: "UserSaleProfile" | "CollectorProfile";
            /** @description ID of owner. */
            owner_id?: string;
            /** @description Session ID of the inquirer if anonymous. */
            anonymous_session_id?: string;
            /** @description User id. */
            user_id?: string;
            /** @description Client's key for anonymous session. */
            session_id?: string;
        };
        /** @description Add an interest. */
        postApiV1UserInterest: {
            /** @enum {string} */
            owner_type: "UserSaleProfile" | "CollectorProfile";
            /** @description Interest id. */
            interest_id: string;
            /** @enum {string} */
            interest_type: "Artist" | "Gene";
            /** @enum {string} */
            category: "collected_before" | "interested_in_collecting";
            /** @description Collector/sale profile id. */
            owner_id?: string;
            /** @description Anonymous session id. */
            anonymous_session_id?: string;
            /** @description User id. */
            user_id?: string;
            /** @description Note */
            body?: string;
            /** @description Client's key for anonymous session. */
            session_id?: string;
        };
        /** @description Update a profile. */
        putApiV1UserSaleProfile: {
            /** @description Name. */
            name?: string;
            /** @description Email. */
            email?: string;
            /** @description Profession. */
            profession?: string;
            /** @description Employer. */
            employer?: string;
            /** @description Job Title. */
            job_title?: string;
            /** @description First Name. */
            first_name?: string;
            /** @description Last Name. */
            last_name?: string;
            /** @description Address 1 */
            address_1?: string;
            /** @description Address 2 */
            address_2?: string;
            /** @description City Name */
            city?: string;
            /** @description State Name */
            state?: string;
            /** @description Zip Code */
            zip?: string;
            /** @description Country */
            country?: string;
            /** @description Work Phone */
            work_phone?: string;
            /** @description Mobile Phone */
            mobile_phone?: string;
            /** @description Fax */
            fax?: string;
            /** @description Alternative Email */
            alternative_email?: string;
            /**
             * Format: int32
             * @description Approximate salary in USD
             */
            salary_usd?: number;
            /**
             * Format: int32
             * @description Approximate birth year
             */
            birth_year?: number;
            /** @description Spouse/Partner Name */
            spouse?: string;
            require_bidder_approval?: string;
        };
        /** @description Create a sale profile. */
        postApiV1UserSaleProfile: {
            /** @description Name. */
            name?: string;
            /** @description Email. */
            email?: string;
            /** @description Profession. */
            profession?: string;
            /** @description Employer. */
            employer?: string;
            /** @description Job Title. */
            job_title?: string;
            /** @description First Name. */
            first_name?: string;
            /** @description Last Name. */
            last_name?: string;
            /** @description Address 1 */
            address_1?: string;
            /** @description Address 2 */
            address_2?: string;
            /** @description City Name */
            city?: string;
            /** @description State Name */
            state?: string;
            /** @description Zip Code */
            zip?: string;
            /** @description Country */
            country?: string;
            /** @description Work Phone */
            work_phone?: string;
            /** @description Mobile Phone */
            mobile_phone?: string;
            /** @description Fax */
            fax?: string;
            /** @description Alternative Email */
            alternative_email?: string;
            /**
             * Format: int32
             * @description Approximate salary in USD
             */
            salary_usd?: number;
            /**
             * Format: int32
             * @description Approximate birth year
             */
            birth_year?: number;
            /** @description Spouse/Partner Name */
            spouse?: string;
            require_bidder_approval?: string;
        };
        /** @description Enable a lab feature for a user. */
        postApiV1UserIdLabFeature: {
            /** @description Name. */
            name?: string;
            display_follow_tooltip?: string;
            display_filter_tooltip?: string;
            display_inquiry_tooltip?: string;
            display_favorites_dialog?: string;
            /** @description Phone number. */
            phone?: string;
            /** @description Normalized phone number. */
            phone_number?: string;
            /** @description ISO 3166 country code for phone number. */
            phone_country_code?: string;
            /** @description Gender. */
            gender?: string;
            /** Format: int32 */
            price_range_min?: number;
            /** Format: int32 */
            price_range_max?: number;
            /** @description Number of artworks purchased per year. */
            artworks_per_year?: string;
            /** @description Is a collector? */
            is_collector?: string;
            /** @description Works in the art industry? */
            industry?: string;
            /** @description Profession. */
            profession?: string;
            /** @description Additional personal notes. */
            notes?: string;
            /** @description Shares FollowArtists, FollowGenes, and FollowProfiles with partners. */
            share_follows?: string;
            /** @description Receive purchase notifications. */
            receive_purchase_notification?: string;
            /** @description Receive outbid auctions notifications. */
            receive_outbid_notification?: string;
            /** @description Receive lot opening auctions notifications. */
            receive_lot_opening_soon_notification?: string;
            /** @description Receive auction starting/ending notifications. */
            receive_sale_opening_closing_notification?: string;
            /** @description Receive new works notifications. */
            receive_new_works_notification?: string;
            /** @description Receive new sales notifications. */
            receive_new_sales_notification?: string;
            /** @description Receive promotional notifications. */
            receive_promotion_notification?: string;
            /** @description Receive order notifications. */
            receive_order_notification?: string;
            /** @description Receive viewing room notifications. */
            receive_viewing_room_notification?: string;
            /** @description Receive partner show notifications. */
            receive_partner_show_notification?: string;
            /** @description Receive partner offer notifications. */
            receive_partner_offer_notification?: string;
            /** @description Email. */
            email?: string;
            /** @description Frequency of marketing emails. */
            email_frequency?: string;
            location?: string;
            collector_since?: string;
            /** @description Automatically publish saved artworks and followed artists to Facebook. */
            publish_to_facebook?: string;
            is_representative?: string;
            /** @description Is the admin available to be contacted about inquiries. */
            is_available_representative?: string;
            data_transfer_opt_out?: string;
            /** @description Preferred currency. */
            currency_preference?: string;
            /** @description Prefered unit of length. */
            length_unit_preference?: string;
        };
        /** @description Create a new user. */
        postApiV1User: {
            /** @description User name. */
            name?: string;
            display_follow_tooltip?: string;
            display_filter_tooltip?: string;
            display_inquiry_tooltip?: string;
            display_favorites_dialog?: string;
            /** @description Phone number. */
            phone?: string;
            /** @description Normalized phone number. */
            phone_number?: string;
            /** @description ISO 3166 country code for phone number. */
            phone_country_code?: string;
            /** @description Gender. */
            gender?: string;
            /** Format: int32 */
            price_range_min?: number;
            /** Format: int32 */
            price_range_max?: number;
            /** @description Number of artworks purchased per year. */
            artworks_per_year?: string;
            /** @description Is a collector? */
            is_collector?: string;
            /** @description Works in the art industry? */
            industry?: string;
            /** @description Profession. */
            profession?: string;
            /** @description Additional personal notes. */
            notes?: string;
            /** @description Shares FollowArtists, FollowGenes, and FollowProfiles with partners. */
            share_follows?: string;
            /** @description Receive purchase notifications. */
            receive_purchase_notification?: string;
            /** @description Receive outbid auctions notifications. */
            receive_outbid_notification?: string;
            /** @description Receive lot opening auctions notifications. */
            receive_lot_opening_soon_notification?: string;
            /** @description Receive auction starting/ending notifications. */
            receive_sale_opening_closing_notification?: string;
            /** @description Receive new works notifications. */
            receive_new_works_notification?: string;
            /** @description Receive new sales notifications. */
            receive_new_sales_notification?: string;
            /** @description Receive promotional notifications. */
            receive_promotion_notification?: string;
            /** @description Receive order notifications. */
            receive_order_notification?: string;
            /** @description Receive viewing room notifications. */
            receive_viewing_room_notification?: string;
            /** @description Receive partner show notifications. */
            receive_partner_show_notification?: string;
            /** @description Receive partner offer notifications. */
            receive_partner_offer_notification?: string;
            /** @description User email. */
            email?: string;
            /** @description Frequency of marketing emails. */
            email_frequency?: string;
            location?: string;
            collector_since?: string;
            /** @description Automatically publish saved artworks and followed artists to Facebook. */
            publish_to_facebook?: string;
            is_representative?: string;
            /** @description Is the admin available to be contacted about inquiries. */
            is_available_representative?: string;
            data_transfer_opt_out?: string;
            /** @description Preferred currency. */
            currency_preference?: string;
            /** @description Prefered unit of length. */
            length_unit_preference?: string;
            /** @description User password. */
            password?: string;
            /** @description User paddle number. */
            paddle_number?: string;
            /** @description How likely a user is to purchase anything. */
            likely_to_purchase?: string;
            /** @description Authentication provider. */
            provider?: string;
            /** @description OAuth token. */
            oauth_token?: string;
            /** @description JWT token used by oauth provider. */
            jwt?: string;
            /** @description User id provided by apple sign in. */
            apple_uid?: string;
            /** @description JWT used for apple sign in. */
            id_token?: string;
            /**
             * Format: int32
             * @description User collector level.
             */
            collector_level?: number;
            /** @description User action that led to signup */
            sign_up_intent?: string;
            /** @description Referer url that led to signup */
            sign_up_referer?: string;
            /** @description If true, user has accepted terms of use and privacy policy */
            accepted_terms_of_service?: boolean;
            /** @description If true, user has agreed to receive emails from Artsy */
            agreed_to_receive_emails?: boolean;
            /** @description Attempts to verify the source is a human (required for all but certain clients/providers) */
            recaptcha_token?: string;
        };
        /** @description Check whether a user exists by email address (used by Artsy clients for authentication flows). */
        postApiV1UserIdentify: {
            /** @description User email. */
            email: string;
            /** @description Recaptcha token. */
            recaptcha_token?: string;
        };
        /** @description Grants user access to a model. */
        postApiV1UserUserIdAccessControl: {
            /** @description Model. */
            model: string;
            /** @description Instance id of the model. */
            id: string;
        };
        /** @description Change a users password. */
        putApiV1UserIdPassword: {
            /** @description New password. */
            new_password: string;
            /** @description New password confirmation. */
            password_confirmation: string;
        };
        /** @description Update an existing user. */
        putApiV1User: {
            /** @description Name. */
            name?: string;
            display_follow_tooltip?: string;
            display_filter_tooltip?: string;
            display_inquiry_tooltip?: string;
            display_favorites_dialog?: string;
            /** @description Phone number. */
            phone?: string;
            /** @description Normalized phone number. */
            phone_number?: string;
            /** @description ISO 3166 country code for phone number. */
            phone_country_code?: string;
            /** @description Gender. */
            gender?: string;
            /** Format: int32 */
            price_range_min?: number;
            /** Format: int32 */
            price_range_max?: number;
            /** @description Number of artworks purchased per year. */
            artworks_per_year?: string;
            /** @description Is a collector? */
            is_collector?: string;
            /** @description Works in the art industry? */
            industry?: string;
            /** @description Profession. */
            profession?: string;
            /** @description Additional personal notes. */
            notes?: string;
            /** @description Shares FollowArtists, FollowGenes, and FollowProfiles with partners. */
            share_follows?: string;
            /** @description Receive purchase notifications. */
            receive_purchase_notification?: string;
            /** @description Receive outbid auctions notifications. */
            receive_outbid_notification?: string;
            /** @description Receive lot opening auctions notifications. */
            receive_lot_opening_soon_notification?: string;
            /** @description Receive auction starting/ending notifications. */
            receive_sale_opening_closing_notification?: string;
            /** @description Receive new works notifications. */
            receive_new_works_notification?: string;
            /** @description Receive new sales notifications. */
            receive_new_sales_notification?: string;
            /** @description Receive promotional notifications. */
            receive_promotion_notification?: string;
            /** @description Receive order notifications. */
            receive_order_notification?: string;
            /** @description Receive viewing room notifications. */
            receive_viewing_room_notification?: string;
            /** @description Receive partner show notifications. */
            receive_partner_show_notification?: string;
            /** @description Receive partner offer notifications. */
            receive_partner_offer_notification?: string;
            /** @description Email. */
            email?: string;
            /** @description Frequency of marketing emails. */
            email_frequency?: string;
            location?: string;
            collector_since?: string;
            /** @description Automatically publish saved artworks and followed artists to Facebook. */
            publish_to_facebook?: string;
            is_representative?: string;
            /** @description Is the admin available to be contacted about inquiries. */
            is_available_representative?: string;
            /** @description If true, user requests that personal data not be shared with or transferred to external parties */
            data_transfer_opt_out?: boolean;
            /** @description Preferred currency. */
            currency_preference?: string;
            /** @description Prefered unit of length. */
            length_unit_preference?: string;
            /** @description How likely a user is to purchase anything. */
            likely_to_purchase?: string;
            /** @description User paddle number. */
            paddle_number?: string;
            /**
             * Format: int32
             * @description User collector level.
             */
            collector_level?: number;
            /** @description If true, user has accepted terms of use and privacy policy */
            accepted_terms_of_service?: boolean;
            /** @description If true, user has agreed to receive emails from Artsy */
            agreed_to_receive_emails?: boolean;
        };
        /** @description Reset a password given a password token. */
        putApiV1UsersResetPassword: {
            /** @description Reset password token sent in an email. */
            reset_password_token: string;
            /** @description New password. */
            password: string;
            /** @description New password confirmation. */
            password_confirmation: string;
        };
        /** @description Send reset password instructions. */
        postApiV1UsersSendResetPasswordInstructions: {
            /** @description User email. */
            email: string;
        };
        /** @description Create a verified representative. */
        postApiV1VerifiedRepresentatives: {
            artist_id: string;
            partner_id: string;
        };
        /** @description Create a video. */
        postApiV1Video: {
            /** @description JSON response from Vimeo. */
            json_response: Record<string, never>;
        };
        /** @description Update a viewing room's subsections. */
        putApiV1ViewingRoomIdSubsections: {
            subsections: {
                attributes?: {
                    body?: string;
                    caption?: string;
                    title?: string;
                };
                ar_image_id?: string;
                /** @description If true, delete this subsection from the database */
                delete?: boolean;
                id?: string;
            }[];
        };
        /** @description Update a viewing room's artworks. */
        putApiV1ViewingRoomIdViewingRoomArtworks: {
            artworks: {
                artwork_id: string;
                delete?: boolean;
            }[];
        };
        /** @description Update a viewing room. */
        putApiV1ViewingRoom: {
            /** @description AR Image ID */
            ar_image_id?: string;
            /** @description Main text */
            body?: string;
            /** @description End datetime */
            end_at?: string;
            /** @description Introduction */
            intro_statement?: string;
            published?: boolean;
            /** @description Pullquote */
            pull_quote?: string;
            /** @description Start datetime */
            start_at?: string;
            /** @description Timezone */
            time_zone?: string;
            /** @description Title */
            title?: string;
        };
        /** @description Create a viewing room. */
        postApiV1ViewingRoom: {
            /** @description Partner ID */
            partner_id: string;
            /** @description AR Image ID */
            ar_image_id?: string;
            /** @description Main text */
            body?: string;
            /** @description End datetime */
            end_at?: string;
            /** @description Introduction */
            intro_statement?: string;
            /** @description Pullquote */
            pull_quote?: string;
            /** @description Start datetime */
            start_at?: string;
            /** @description Timezone */
            time_zone?: string;
            /** @description Title */
            title?: string;
        };
        /** @description Verify an address */
        postApiV1AddressVerification: {
            /** @description Address line 1 */
            address_line_1: string;
            /** @description Address line 2 */
            address_line_2?: string;
            /** @description City */
            city?: string;
            /** @description Postal code */
            postal_code: string;
            /** @description Region */
            region?: string;
            /** @description Country (ISO 2-letter code) */
            country: string;
        };
        postApiV1ClientApplicationIdClientApplicationPartner: {
            /** @description Partner id. */
            partner_id: string;
        };
        /** @description Executes fair booth creation process. */
        postApiV1FairBoothImport: {
            /** @description Fair exhibitor data in json format, typically coming from Waves (see fair_booth_data.json for example) */
            data: string[];
            /** @description Fair id. */
            fair_id: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getApiV1AccessControls: {
        parameters: {
            query?: {
                /** @description Property type. */
                property_type?: string;
                /** @description Property id. */
                property_id?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve access controls. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1AccessToken: {
        parameters: {
            query?: {
                /** @description Access token, defaults to value in the X-Access-Token header. */
                access_token?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Expire an OAuth access token. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1AccountRequests: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1AccountRequests"];
            };
        };
        responses: {
            /** @description Create an account request, which may be associated with a user. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1AdminsRepresentatives: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Sort order. */
                sort?: "name" | "-name" | "email" | "-email" | "collector_since" | "-collector_since";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve all representatives. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1AdminsAvailableRepresentatives: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Sort order. */
                sort?: "name" | "-name" | "email" | "-email" | "collector_since" | "-collector_since";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve available representatives. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1Admins: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Only return admins that are set as admins for any partners. */
                partner_admin?: boolean;
                /** @description Sort order. */
                sort?: "name" | "-name" | "email" | "-email" | "collector_since" | "-collector_since";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve all admins. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1ArtistCareerHighlights: {
        parameters: {
            query: {
                /** @description Artist id. */
                artist_id: string;
                /** @description Return only solo shows. */
                solo?: boolean;
                /** @description Return only group shows. */
                group?: boolean;
                /** @description Return only major institutions that have collected the artist's works. */
                collected?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return all artist career highlights for an artist. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1ArtistCareerHighlightId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Artist career highlight id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1ArtistCareerHighlight"];
            };
        };
        responses: {
            /** @description Update an artist career highlight. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1ArtistCareerHighlightId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Artist career highlight id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete an artist career highlight. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1ArtistCareerHighlight: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1ArtistCareerHighlight"];
            };
        };
        responses: {
            /** @description Create an artist career highlight. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1ArtistSeries: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                artist_id?: string;
                artwork_id?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    exclude_ids?: string[];
                };
            };
        };
        responses: {
            /** @description Retrieve artist series */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1ArtistSeriesId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Artist Series ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve an artist series */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1ArtistIdPartners: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Sort order. */
                sort?: "sortable_id" | "-sortable_id" | "published_artworks_count" | "-published_artworks_count";
                /** @description Only return partners that represent the artist. */
                represented_by?: string;
            };
            header?: never;
            path: {
                /** @description Artist id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve all partners that have artworks by an artist. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1ArtistIdPartnerArtists: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Sort order. */
                sort?: "sortable_id" | "-sortable_id" | "published_artworks_count" | "-published_artworks_count";
                /** @description Only return partner-artist relationships where the partner represents the artist. */
                represented_by?: string;
                /** @description Only return partner-artist relationships where the partner has entered a bio for the artist. */
                has_biography?: boolean;
                /** @description Only return featured partner artists. */
                featured?: boolean;
            };
            header?: never;
            path: {
                /** @description Artist id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve all partner artist relationships for a partner. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1ArtistIdGenome: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Artist id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve an artist's genome. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1ArtistIdGenome: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Artist id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1ArtistIdGenome"];
            };
        };
        responses: {
            /** @description Update an artist's genome. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1ArtistIdGenome: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Artist id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Clear an artist's genome. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1ArtistIdGenomeIncomplete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Artist id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Mark an artist's genome incomplete. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1ArtistIdGenomeComplete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Artist id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Mark an artist's genome complete. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1ArtistIdGenomeGenes: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
            };
            header?: never;
            path: {
                /** @description Artist id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve an artist's genes, sorted by value. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1ArtistIdMerge: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Artist id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1ArtistIdMerge"];
            };
        };
        responses: {
            /** @description Merge two artists (any artworks, follows, and posts) */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1ArtistIdDuplicates: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Artist's id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get a cluster of potentially duplicated artist records (including the specified Artist). */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "getApiV1ArtistIdImage(ImageVersion)": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Artist's id. */
                id: string;
                image_version: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get an artist's image. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1Artist: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1Artist"];
            };
        };
        responses: {
            /** @description Create a new artist. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1ArtistIdArtworksAll: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Sort order. */
                sort?: "title" | "-title" | "created_at" | "-created_at" | "-created_at,-id" | "deleted_at" | "-deleted_at" | "-iconicity" | "-merchandisability" | "published_at" | "-published_at" | "-partner_updated_at" | "availability" | "-recent_saves_count" | "-last_offerable_activity_at";
                /** @description Specify a gene id to sort artworks by the value of the gene, followed by recently published ones. Sorts by artwork iconicity by default. */
                gene_id?: string;
            };
            header?: never;
            path: {
                /** @description Artist id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description Filter the works by criteria, any combination of 'for_sale' and 'not_for_sale'. */
                    filter?: string[];
                };
            };
        };
        responses: {
            /** @description Retrieve deep data for all artist's artworks. Most iconic works appear first, followed by recently published ones. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1ArtistIdArtworks: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Sort order. */
                sort?: "title" | "-title" | "created_at" | "-created_at" | "-created_at,-id" | "deleted_at" | "-deleted_at" | "-iconicity" | "-merchandisability" | "published_at" | "-published_at" | "-partner_updated_at" | "availability" | "-recent_saves_count" | "-last_offerable_activity_at";
                /** @description Specify a gene id to sort artworks by the value of the gene, followed by recently published ones. Sorts by artwork iconicity by default. */
                gene_id?: string;
                /** @description Return only published artworks. */
                published?: string;
            };
            header?: never;
            path: {
                /** @description Artist id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description Filter the works by criteria, any combination of 'for_sale' and 'not_for_sale'. */
                    filter?: string[];
                    /** @description An array of artwork ids to exclude from the response. */
                    exclude_ids?: string[];
                };
            };
        };
        responses: {
            /** @description Retrieve all artist's artworks. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1ArtistIdAdminNote: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Artist id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Create an artist admin_note. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1ArtistIdAdminNotes: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Artist id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve all artist's admin_notes. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1ArtistId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve an artist. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1ArtistId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1Artist"];
            };
        };
        responses: {
            /** @description Update an existing artist. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1ArtistId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete an existing artist. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1ArtistIdArtworkInquiryRequests: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Sort order. */
                sort?: "-created_at" | "created_at" | "-outcome" | "outcome" | "likely_to_purchase" | "-likely_to_purchase" | "status" | "-status" | "flagged" | "-flagged" | "contact_gallery" | "-contact_gallery" | "status,-likely_to_purchase,created_at" | "last_message_received_at" | "-last_message_received_at";
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve all artwork inquiry requests by a artist. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1ArtistIdFollowUsers: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve all users that follow an artist. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1ArtistsMerge: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Merge two or more artists */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1Artists: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Sort order. */
                sort?: "_slugs" | "-_slugs" | "created_at" | "-created_at" | "sortable_id" | "-sortable_id" | "-trending";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description Returns these objects if passed in. */
                    ids?: string[];
                };
            };
        };
        responses: {
            /** @description Retrieve artists. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1ArtistsMatch: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Sort order. */
                sort?: "_slugs" | "-_slugs" | "created_at" | "-created_at" | "sortable_id" | "-sortable_id" | "-trending";
            };
            header?: never;
            path: {
                match: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a subset of artists. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1ArtistsPopular: {
        parameters: {
            query?: {
                /** @description Limit to top n artists. */
                size?: number;
                /** @description If true, will exclude followed artists. */
                exclude_followed_artists?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description Exclude these ids from results, may result in all artists being excluded. */
                    exclude_artist_ids?: string[];
                };
            };
        };
        responses: {
            /** @description Retrieve the most followed artists. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1ArtistsTrendingScores: {
        parameters: {
            query?: {
                /** @description Limit to top n artists. */
                n?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve trending artists with full score breakdown. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1ArtistsTrending: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Supply a gene filter. */
                gene?: string;
                /** @description Supply a max career stage filter. */
                max_career_stage?: number;
                /** @description Supply a min career stage filter. */
                min_career_stage?: number;
                /** @description Min number of for sale works */
                min_forsale_artworks?: number;
                /** @description Min number of followers */
                min_follow_count?: number;
                /** @description If true, will exclude followed artists. */
                exclude_followed_artists?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve trending artists in descending order. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1ArtworkVersionId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Version id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve an artwork version. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1ArtworksCollectionsBatch: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Artwork ids or slugs. */
                    artwork_ids: string[];
                    /** @description Collection ids or slugs. */
                    add_to?: string[];
                    /** @description Collection ids or slugs. */
                    remove_from?: string[];
                };
            };
        };
        responses: {
            /** @description Add / remove artworks to / from collections */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1ArtworksDeleted: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve deleted artworks. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1ArtworksSellable: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Only return artworks created after this timestamp. */
                created_at_since?: string;
                /** @description Minimum number of artists to feature in results. */
                min_artists_per_page?: string;
                /** @description Min artwork price filter. */
                min_price?: string;
                /** @description Max artwork price filter. */
                max_price?: string;
                /** @description Min artist career stage. */
                min_career_stage?: string;
                /** @description Max artist career stage. */
                max_career_stage?: string;
                /** @description Artwork category filter. */
                category?: string;
                /** @description Sort order. */
                sort?: "title" | "-title" | "created_at" | "-created_at" | "-created_at,-id" | "deleted_at" | "-deleted_at" | "-iconicity" | "-merchandisability" | "published_at" | "-published_at" | "-partner_updated_at" | "availability" | "-recent_saves_count" | "-last_offerable_activity_at";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve top sellable artworks. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1Artworks: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Only return artworks created after this timestamp. */
                created_at_since?: number;
                /** @description Only return artworks with this availability status. */
                availability?: string;
                /** @description Only return artworks from partners that are managed by given admin. */
                admin_id?: string;
                /** @description Only return artworks from partners of a given contract_type. */
                partner_contract_type?: "General" | "Subscription" | "Fair" | "Custom";
                /** @description Return only artworks in given published status. */
                published?: boolean;
                /** @description Works that are marketable. */
                marketable?: boolean;
                /** @description Exclude disliked artworks if authenticated. */
                exclude_disliked_artworks?: boolean;
                /** @description Sort order. */
                sort?: "title" | "-title" | "created_at" | "-created_at" | "-created_at,-id" | "deleted_at" | "-deleted_at" | "-iconicity" | "-merchandisability" | "published_at" | "-published_at" | "-partner_updated_at" | "availability" | "-recent_saves_count" | "-last_offerable_activity_at";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description Returns these objects if passed in. */
                    ids?: string[];
                    /** @description Only return artworks by these artists. */
                    artist_ids?: string[];
                };
            };
        };
        responses: {
            /** @description Retrieve all not deleted artworks. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1ArtworksDiscovery: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description get ArtworksDiscovery(s) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1ArtworkArtworkIdInventory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Artwork id. */
                artwork_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1ArtworkArtworkIdInventory"];
            };
        };
        responses: {
            /** @description Create or update an artwork's inventory. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1ArtworkArtworkIdImagesReposition: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Artwork id. */
                artwork_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Array of artwork image ids. */
                    image_ids: string[];
                };
            };
        };
        responses: {
            /** @description Reposition artwork images. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1ArtworkArtworkIdImages: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Sort order. */
                sort?: "position";
            };
            header?: never;
            path: {
                /** @description Artwork id. */
                artwork_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve artwork images. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1ArtworkArtworkIdImagesDefaultId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Artwork id. */
                artwork_id: string;
                /** @description Default image id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Set the default image. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1ArtworkArtworkIdImageId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Artwork id. */
                artwork_id: string;
                /** @description Image id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1ArtworkArtworkIdImage"];
            };
        };
        responses: {
            /** @description Update an artwork image. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1ArtworkArtworkIdImageId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Artwork id. */
                artwork_id: string;
                /** @description Image id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Remove an image from an artwork. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1ArtworkArtworkIdImage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Artwork id. */
                artwork_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1ArtworkArtworkIdImage"];
            };
        };
        responses: {
            /** @description Add an image to an artwork. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "getApiV1ArtworkArtworkIdDefaultImage(ImageVersion)": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Artwork id. */
                artwork_id: string;
                image_version: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get an artwork's default image. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "getApiV1ArtworkArtworkIdImageId(ImageVersion)": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Artwork id. */
                artwork_id: string;
                /** @description Image id. */
                id: string;
                /** @description Version of the image to download. */
                image_version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get an artwork's image. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1ArtworkIdGenome: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Artwork id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve an artwork's genome. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1ArtworkIdGenome: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Artwork id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1ArtworkIdGenome"];
            };
        };
        responses: {
            /** @description Update an artwork's genome. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1ArtworkIdGenome: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Artwork id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Clear an artwork's genome. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1ArtworkIdGenomeIncomplete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Artwork id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Mark an artwork's genome incomplete. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1ArtworkIdGenomeComplete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Artwork id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Mark an artwork's genome complete. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1ArtworkIdView: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Artwork id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Record a view of an artwork. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1ArtworkIdView: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Artwork id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete a recorded view of an artwork. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1Artwork: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1Artwork"];
            };
        };
        responses: {
            /** @description Create an artwork. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1ArtworkId: {
        parameters: {
            query?: {
                /** @description If true, will allow admins/trusted apps to retrieve deleted works. */
                include_deleted?: boolean;
            };
            header?: never;
            path: {
                /** @description Artwork id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve an artwork. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1ArtworkId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Artwork id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1Artwork"];
            };
        };
        responses: {
            /** @description Update an existing artwork. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1ArtworkId: {
        parameters: {
            query?: {
                /** @description Permanently delete artwork. */
                permanent?: boolean;
            };
            header?: never;
            path: {
                /** @description Artwork id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete an artwork. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1ArtworkIdTags: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Artwork id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Artwork tags. */
                    tags: string[];
                };
            };
        };
        responses: {
            /** @description Add/remove tags to an artwork. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1ArtworkIdArtworkInquiryRequests: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Sort order. */
                sort?: "-created_at" | "created_at" | "-outcome" | "outcome" | "likely_to_purchase" | "-likely_to_purchase" | "status" | "-status" | "flagged" | "-flagged" | "contact_gallery" | "-contact_gallery" | "status,-likely_to_purchase,created_at" | "last_message_received_at" | "-last_message_received_at";
            };
            header?: never;
            path: {
                /** @description Artwork id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve all artwork inquiry requests for an artwork. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1ArtworkArtworkIdEditionSetIdInventory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Artwork id. */
                artwork_id: string;
                /** @description Edition set id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1ArtworkArtworkIdEditionSetIdInventory"];
            };
        };
        responses: {
            /** @description Create or update an edition set's inventory. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1ArtworkArtworkIdEditionSetId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Artwork id. */
                artwork_id: string;
                /** @description Edition set id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1ArtworkArtworkIdEditionSet"];
            };
        };
        responses: {
            /** @description Update an existing edition set. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1ArtworkArtworkIdEditionSetId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Artwork id. */
                artwork_id: string;
                /** @description Edition set id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete an existing edition set. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1ArtworkArtworkIdEditionSet: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Artwork id. */
                artwork_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1ArtworkArtworkIdEditionSet"];
            };
        };
        responses: {
            /** @description Create an artwork edition set. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1BankAccountId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a bank account. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1BankAccountId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Bank account id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1BankAccount"];
            };
        };
        responses: {
            /** @description Update a bank account. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1BankAccount: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1BankAccount"];
            };
        };
        responses: {
            /** @description Add a bank account. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1BidderPositions: {
        parameters: {
            query: {
                /** @description Sale id. */
                sale_id: string;
                /** @description Artwork id. */
                artwork_id?: string;
                /** @description SaleArtwork id. */
                sale_artwork_id?: string;
                /** @description User placing bids. */
                user_id?: string;
                /** @description Return all Bidder Position fields. Default is false. */
                all?: boolean;
                /** @description Returns Bidder Positions that have (or have not) been retracted. */
                retracted?: boolean;
                /** @description Sort order. */
                sort?: "-max_bid_amount_cents" | "max_bid_amount_cents" | "created_at" | "-created_at" | "-max_bid_amount_cents,created_at";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve bidder positions. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1BidderPositionIdRetract: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Position id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1BidderPositionIdRetract"];
            };
        };
        responses: {
            /** @description Retract a bidder position. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1BidderPositionId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Position id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a bidder position. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1BidderPosition: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1BidderPosition"];
            };
        };
        responses: {
            /** @description Place a bid with a maximum amount in cents. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1BidderId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Bidder id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a bidder registration. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1BidderId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Bidder id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1Bidder"];
            };
        };
        responses: {
            /** @description Register to bid. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1Bidder: {
        parameters: {
            query: {
                /** @description Bidder phone number or paddle number. */
                number: string;
                /** @description Sale id. */
                sale_id: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Find a bidder registration by phone number or paddle number. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1Bidder: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1Bidder"];
            };
        };
        responses: {
            /** @description Register to bid. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1Bidders: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Sale id. */
                sale_id?: string;
                /** @description User registered as bidder. */
                user_id?: string;
                /** @description Sort order. */
                sort?: "created_at" | "-created_at" | "-last_bid_placed_at";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve all bidder registrations. Optionally scope by Sale or User. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1Bids: {
        parameters: {
            query?: {
                /** @description Sale id. */
                sale_id?: string;
                /** @description Artwork id. */
                artwork_id?: string;
                /** @description Bidder position id. */
                bidder_position_id?: string;
                /** @description Sale artwork id. */
                sale_artwork_id?: string;
                /** @description Sort order. */
                sort?: "-number" | "number" | "-amount_cents,-_id" | "amount_cents,-_id" | "-_id";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve bids. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1BidId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Bid id, or the id/key of the LotEvent::MaxBidPlaced. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a bid. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1BuyersPremiums: {
        parameters: {
            query?: {
                /** @description If true, will retrieve all including deleted premiums. */
                include_deleted?: boolean;
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve buyer's premiums. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1CallbacksStripeConnect: {
        parameters: {
            query?: never;
            header: {
                /** @description Stripe request signature */
                HTTP_STRIPE_SIGNATURE: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1CallbacksStripeConnect"];
            };
        };
        responses: {
            /** @description Receive Connect webhooks from Stripe. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1CallbacksStripe: {
        parameters: {
            query?: never;
            header: {
                /** @description Stripe request signature */
                HTTP_STRIPE_SIGNATURE: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1CallbacksStripe"];
            };
        };
        responses: {
            /** @description Receive webhooks from Stripe. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1CallbacksSegment: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Webhook for receiving updates from Segment */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1CallbacksJumio: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1CallbacksJumio"];
            };
        };
        responses: {
            /** @description Receive and process webhooks from Jumio */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1CallbacksGemini: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1CallbacksGemini"];
            };
        };
        responses: {
            /** @description Receive webhook from Gemini Image Processing Service. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1CallbacksBraze: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1CallbacksBraze"];
            };
        };
        responses: {
            /** @description Webhook for receiving updates from Braze */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1CollectionIdArtists: {
        parameters: {
            query: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description User id. */
                user_id: string;
                /** @description Include artists that have been created by the user. */
                include_personal_artists?: boolean;
                /** @description Sort order. */
                sort?: "_slugs" | "-_slugs" | "created_at" | "-created_at" | "sortable_id" | "-sortable_id" | "-trending";
            };
            header?: never;
            path: {
                /** @description Collection id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description Artist ids. */
                    artist_ids?: string[];
                };
            };
        };
        responses: {
            /** @description Retrieve an existing collection's artists. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1CollectionId: {
        parameters: {
            query: {
                /** @description Include private collections. */
                private?: string;
                /** @description User id. */
                user_id: string;
            };
            header?: never;
            path: {
                /** @description Collection id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve an existing collection. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1CollectionId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Collection id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1Collection"];
            };
        };
        responses: {
            /** @description Update a collection. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1CollectionId: {
        parameters: {
            query: {
                /** @description User id. */
                user_id: string;
            };
            header?: never;
            path: {
                /** @description Collection id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete an existing collection. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1Collection: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1Collection"];
            };
        };
        responses: {
            /** @description Create a collection. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1CollectionCollectionIdArtworkId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Collection id. */
                collection_id: string;
                /** @description Artwork id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1CollectionCollectionIdArtwork"];
            };
        };
        responses: {
            /** @description Add an artwork to a collection. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1CollectionCollectionIdArtworkId: {
        parameters: {
            query: {
                /** @description User id. */
                user_id: string;
            };
            header?: never;
            path: {
                /** @description Collection id. */
                collection_id: string;
                /** @description Artwork id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Remove an artwork from a collection. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1CollectionCollectionIdArtworks: {
        parameters: {
            query: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description User id. */
                user_id: string;
                /** @description Include private collections. */
                private?: boolean;
                /** @description Limit artworks to those exhibiting at the specified fair. */
                fair_id?: string;
                /** @description Limit artworks to those in the specified sale. */
                sale_id?: string;
                /** @description Limit artworks to those that are currently biddable in an auction. */
                in_auction?: boolean;
                /** @description Exclude artworks that have been purchased on Artsy and automatically added to the collection. */
                exclude_purchased_artworks?: boolean;
                /** @description Return all artwork properties to privileged callers. */
                all?: boolean;
                /** @description When true, only return for-sale artworks. */
                for_sale?: boolean;
                /** @description Minimum price in USD dollars. */
                price_min_major_usd?: number;
                /** @description Maximum price in USD dollars. */
                price_max_major_usd?: number;
                /** @description Sort order. */
                sort?: "position" | "-position" | "created_at" | "-created_at";
            };
            header?: never;
            path: {
                /** @description Collection id. */
                collection_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description Artworks to include. */
                    artworks?: string[];
                };
            };
        };
        responses: {
            /** @description Retrieve artworks within a collection. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1Collections: {
        parameters: {
            query: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Include private collections (will return both public and private collections if set to true). */
                private?: string;
                /** @description Include only saves collections. */
                saves?: string;
                /** @description Include only default collections. */
                default?: string;
                /** @description User id. */
                user_id: string;
                /** @description Artwork slug or id. If passed in, API will return collections (if any) the artwork appears in. */
                artwork_id?: string;
                /** @description Sort order. */
                sort?: "created_at" | "-created_at" | "updated_at" | "-updated_at";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve user's collections. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1CollectorProfiles: {
        parameters: {
            query?: {
                /** @description Only return collector profiles for users that started inquiries for a given partner */
                inquired_partner_id?: string;
                /** @description Only return collector profiles for a given email. */
                email?: string;
                /** @description Returns collector profiles for inquirers that contain a given term */
                name_contains?: string;
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description Only return the collector profile for a given user. */
                    user_id?: string[];
                };
            };
        };
        responses: {
            /** @description Retrieve collector profiles. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1CollectorProfileId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Collector profile id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1CollectorProfile"];
            };
        };
        responses: {
            /** @description Update an existing collector profile. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1CollectorProfileSummary: {
        parameters: {
            query: {
                collector_profile_id: string;
                artwork_id: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a summary of a collector profile/artwork combination. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1CreditCardId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Card id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a credit card. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1CreditCards: {
        parameters: {
            query?: {
                /** @description Credit card owner type. Limits to returning only cards that belong to User or Partner. */
                owner_type?: "User" | "Partner";
                /** @description Only return credit cards for a given user. */
                user_id?: string;
                /** @description Only return credit cards for a given partner. */
                partner_id?: string;
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Sort order. */
                sort?: "created_at" | "-created_at" | "name" | "-name" | "brand" | "-brand";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve credit cards. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1Cultures: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Sort order. */
                sort?: "name" | "-name" | "created_at" | "-created_at" | "updated_at" | "-updated_at";
                /** @description Restrict to cultures which can serve as nationalities for artists (default: false). */
                nationalities?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve cultures. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1Devices: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Only return devices for a given user. */
                user_id?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve devices. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1DeviceId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Existing device. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve an existing device. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1DeviceId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Existing device. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1Device"];
            };
        };
        responses: {
            /** @description Update an existing device. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1DeviceId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Existing device. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete an existing device. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1Device: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1Device"];
            };
        };
        responses: {
            /** @description Create or update a device. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1ExchangeRates: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve latest exchange rates. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1FairIdShows: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description A partner. Returns only shows from the fair by that partner. */
                partner?: string;
                /** @description A region. Returns only booths of partners from that region. */
                partner_region?: string;
                /** @description A boolean. Returns only booths with the specified value for private_partner. */
                private_partner?: string;
                /** @description An artist. Returns only shows from the fair by that artist. */
                artist?: string;
                /** @description A fair section. Returns only booths in the specified section. */
                section?: string;
                /** @description If true, returns only booths with artworks. */
                artworks?: boolean;
                /** @description Sort order. */
                sort?: "start_at" | "-start_at" | "end_at" | "-end_at" | "updated_at" | "-updated_at" | "name" | "-name" | "featured" | "-featured" | "sortable_name" | "-sortable_name";
            };
            header?: never;
            path: {
                /** @description Fair id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve all fair's shows. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1FairIdSections: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
            };
            header?: never;
            path: {
                /** @description Fair id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Fair's sections. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1FairIdPartners: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Partner region. */
                partner_region?: string;
                /** @description Partners with a private partner type. */
                private_partner?: string;
                /** @description Sort order. */
                sort?: "name" | "-name";
            };
            header?: never;
            path: {
                /** @description Fair id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Fair's partners. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1FairId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Fair id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a fair. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1FairId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Fair id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1Fair"];
            };
        };
        responses: {
            /** @description Update an existing fair. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1FairId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Fair id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete an existing fair. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1FairFairIdImage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Fair id. */
                fair_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1FairFairIdImage"];
            };
        };
        responses: {
            /** @description Modify the image on a fair. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1FairFairIdImage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Fair id. */
                fair_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1FairFairIdImage"];
            };
        };
        responses: {
            /** @description Add an image to a fair. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1Fair: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1Fair"];
            };
        };
        responses: {
            /** @description Create a new fair. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1FairIdArtists: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Fair section. */
                section?: string;
                /** @description Partner region. */
                partner_region?: string;
                /** @description Sort order. */
                sort?: "name" | "-name";
            };
            header?: never;
            path: {
                /** @description Fair id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Fair's artists. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1FairFairIdFairEventId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description FairEvent id. */
                id: string;
                /** @description Fair id. */
                fair_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a fair event. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1FairFairIdFairEventId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description FairEvent id. */
                id: string;
                /** @description Fair id. */
                fair_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1FairFairIdFairEvent"];
            };
        };
        responses: {
            /** @description Update an existing fair event. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1FairFairIdFairEventId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description FairEvent id. */
                id: string;
                /** @description Fair id. */
                fair_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete an existing fair event. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1FairFairIdFairEvent: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Fair id. */
                fair_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1FairFairIdFairEvent"];
            };
        };
        responses: {
            /** @description Create a new fair event. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1FairFairIdFairEvents: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Fair event group id. */
                fair_event_group_id?: string;
            };
            header?: never;
            path: {
                /** @description Fair id. */
                fair_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve all fair events. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1FairFairIdFairEventGroup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Fair id. */
                fair_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1FairFairIdFairEventGroup"];
            };
        };
        responses: {
            /** @description Create a new fair event group. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1FairFairIdFairEventGroupId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description FairEventGroup id. */
                id: string;
                /** @description Fair id. */
                fair_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a fair event group. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1FairFairIdFairEventGroups: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
            };
            header?: never;
            path: {
                /** @description Fair id. */
                fair_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve all fair event groups. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1FairOrganizers: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Sort order. */
                sort?: "name" | "-created_at";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve all fair organizers. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1FairOrganizerId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Fair organizer ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a fair organizer. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1FairOrganizerId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Fair organizer id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1FairOrganizer"];
            };
        };
        responses: {
            /** @description Update a fair organizer. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1FairOrganizerId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Fair organizer id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete a fair organizer. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1FairOrganizer: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1FairOrganizer"];
            };
        };
        responses: {
            /** @description Create a fair organizer. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1Fairs: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Limit to fairs that are 'current', 'running', 'closed' or 'upcoming'. */
                status?: string;
                /** @description Limit to fairs that are active. */
                active?: string;
                /** @description Coordinates to find fairs closest to. */
                near?: string;
                /** @description Max distance to use when geo-locating fairs, defaults to 75km. */
                max_distance?: string;
                /** @description Only return fairs that belong to this fair organizer. */
                fair_organizer_id?: string;
                /** @description Only return fairs that have full features */
                has_full_feature?: boolean;
                /** @description Only return fairs that have homepage sections */
                has_homepage_section?: boolean;
                /** @description Only return fairs that should have a listing */
                has_listing?: boolean;
                /** @description Sort order. */
                sort?: "created_at" | "-created_at" | "start_at" | "-start_at" | "name" | "-name";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description Only return fairs that match passed in ids. */
                    id?: string[];
                };
            };
        };
        responses: {
            /** @description Retrieve all fairs. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1FeaturedLinks: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Sort order. */
                sort?: "created_at" | "-created_at" | "title" | "-title";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get all links, optionally by label, item_type, or owner. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1FeaturedLinkId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Featured Link id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve an existing link. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1FeaturedLinkId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Featured Link id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1FeaturedLink"];
            };
        };
        responses: {
            /** @description Update an existing link. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1FeaturedLinkId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Featured Link id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete an existing link. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1FeaturedLink: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1FeaturedLink"];
            };
        };
        responses: {
            /** @description Create a new link. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1Features: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Sort order. */
                sort?: "name" | "-name" | "created_at" | "-created_at";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve features. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "getApiV1FeatureIdImage(ImageVersion)": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Feature id. */
                id: string;
                /** @description Image version. */
                image_version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get a feature's image. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1FeatureId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Feature id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve an existing feature. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1FeatureId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Feature id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1Feature"];
            };
        };
        responses: {
            /** @description Update an existing feature. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1FeatureId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Feature id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete an existing feature. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1Feature: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1Feature"];
            };
        };
        responses: {
            /** @description Create a feature. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1Feedback: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1Feedback"];
            };
        };
        responses: {
            /** @description Create feedback. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1FilterSaleArtworks: {
        parameters: {
            query?: {
                /** @description Filter to sale biddable status. */
                biddable_sale?: boolean;
                /** @description Auction lot estimate range. */
                estimate_range?: string;
                /** @description If true, will only include artworks by artists the user is following. */
                include_artworks_by_followed_artists?: boolean;
                /** @description Result page */
                page?: number;
                /** @description Works that are marketable. */
                marketable?: boolean;
                /** @description Sale id. */
                sale_id?: string;
                /** @description Maximum number of results to retrieve. */
                size?: number;
                /** @description Sorting criteria */
                sort?: "position" | "-position" | "searchable_estimate" | "-searchable_estimate" | "bidder_positions_count" | "-bidder_positions_count";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description Aggregations. */
                    aggregations?: string[];
                    /** @description Artist ids. */
                    artist_ids?: string[];
                    /** @description Gene id array */
                    gene_ids?: string[];
                };
            };
        };
        responses: {
            /** @description Filtered sale artworks search. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1FilterArtworks: {
        parameters: {
            query?: {
                /** @description When true, will only return works available for ecommerce purchase. */
                acquireable?: boolean;
                /** @description Artist id. */
                artist_id?: string;
                /** @description Artist series Id */
                artist_series_id?: string;
                /** @description When true, will only return works at a current auction. */
                at_auction?: boolean;
                /** @description Color */
                color?: string;
                /** @description Size */
                dimension_range?: string;
                /** @description Exclude disliked artworks if authenticated. */
                exclude_disliked_artworks?: boolean;
                /** @description Fair id. */
                fair_id?: string;
                /** @description When true, will only return for sale artworks */
                for_sale?: boolean;
                /** @description Temporary Gene id. */
                gene_id?: string;
                /** @description Height (inches) */
                height?: string;
                /** @description If true, will only include artworks by artists the user is following. */
                include_artworks_by_followed_artists?: boolean;
                /** @description If true, wont drop medium filter from medium aggreagtion computation. */
                include_medium_filter_in_aggregation?: boolean;
                /** @description Include unpublished artworks */
                include_unpublished?: boolean;
                /** @description When true, will return works that are inquireable but not acquireable. */
                inquireable_only?: boolean;
                /** @description When true, will only return inquireable works */
                inquireable?: boolean;
                /** @description When true, will only return exact keyword match */
                keyword_match_exact?: boolean;
                /** @description Keyword search */
                keyword?: string;
                /** @description When true, will only return marketable works (removing nude/provocative). */
                marketable?: boolean;
                /** @description Only return artworks in this marketing collection. */
                marketing_collection_id?: string;
                /** @description Temporary second slot for gene filtering */
                medium?: string;
                /** @description When true, will only return works available for the Make offer option */
                offerable?: boolean;
                /** @description Result page */
                page?: number;
                /** @description Partner id. */
                partner_id?: string;
                /** @description Partner Show Id */
                partner_show_id?: string;
                /** @description Period */
                period?: string;
                /** @description Price range */
                price_range?: string;
                /** @description Sale id. */
                sale_id?: string;
                /** @description Maximum number of results to retrieve. */
                size?: number;
                /** @description Sorting criteria */
                sort?: "-published_at" | "published_at" | "-year" | "year" | "-partner_updated_at" | "partner_updated_at" | "merchandisability" | "-merchandisability" | "prices" | "-prices" | "-has_price,prices" | "-has_price,-prices" | "sold,-has_price,prices" | "sold,-has_price,-prices" | "-decayed_merch" | "-weighted_iconicity" | "bidder_positions_count" | "-bidder_positions_count" | "sale_position" | "-sale_position" | "partner_show_position";
                /** @description Tag id. */
                tag_id?: string;
                /** @description When true, will include `seller_score` in `-decayed_merch` sorting. */
                use_seller_score?: boolean;
                /** @description Use current user's price range if available */
                user_price_range?: string;
                /** @description Width (inches) */
                width?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description Gene id array, combined via OR */
                    additional_gene_ids?: string[];
                    /** @description Aggregations. */
                    aggregations?: ("medium" | "followed_artists" | "attribution_class" | "dimension_range" | "for_sale" | "gallery" | "institution" | "partner" | "period" | "major_period" | "price_range" | "simple_price_histogram" | "color" | "total" | "artist" | "merchandisable_artists" | "location_city" | "artist_nationality" | "materials_terms" | "artist_series")[];
                    /** @description Artist ids. */
                    artist_ids?: string[];
                    /** @description Artist nationalities */
                    artist_nationalities?: string[];
                    /** @description Artist series ids (combined as OR) */
                    artist_series_ids?: string[];
                    /** @description Possible attribution classes of artwork */
                    attribution_class?: string[];
                    /** @description Multiple colors (combined as an OR). */
                    colors?: string[];
                    /** @description Array of artwork to ids to exclude */
                    exclude_artwork_ids?: string[];
                    /** @description Gene id array to include in aggregations */
                    extra_aggregation_gene_ids?: string[];
                    /** @description Gene id array, combined via AND */
                    gene_ids?: string[];
                    /** @description Array of artwork ids */
                    ids?: string[];
                    /** @description Location cities */
                    location_cities?: string[];
                    /** @description Major Periods array. */
                    major_periods?: string[];
                    /** @description Materials terms, detected from `medium` */
                    materials_terms?: string[];
                    /** @description Partner ids (combined as an OR). */
                    partner_ids?: string[];
                    /** @description Period array. */
                    periods?: string[];
                    /** @description Sizes */
                    sizes?: ("small" | "medium" | "large")[];
                };
            };
        };
        responses: {
            /** @description Filtered artworks search. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1FilterSales: {
        parameters: {
            query?: {
                /** @description One of upcoming, open or closed. */
                auction_state?: string;
                /** @description When true, include this type of sale. */
                include_artsy_licensed?: boolean;
                /** @description When true, include this type of sale. */
                include_benefit?: boolean;
                /** @description When true, include this type of sale. */
                include_live_auction?: boolean;
                /** @description When true, include this type of sale. */
                include_online_only?: boolean;
                /** @description Sorting criteria */
                sort?: "id" | "-id" | "name" | "-name" | "created_at" | "-created_at" | "start_at" | "-start_at" | "end_at" | "-end_at" | "eligible_sale_artworks_count" | "-eligible_sale_artworks_count" | "timely_at" | "-timely_at" | "timely_at,name" | "-timely_at,name" | "is_artsy_licensed,timely_at,name" | "-is_artsy_licensed,timely_at,name";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Filtered sales search. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1FollowShows: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Coordinates to find shows closest to. */
                near?: string;
                /** @description Max distance to use when geo-locating shows (default: 75 km). */
                max_distance?: string;
                /** @description Return shows that are 'upcoming', 'running', 'closed', 'current', and 'closing_soon' . */
                status?: "current" | "running" | "closed" | "upcoming" | "running_and_upcoming" | "closing_soon" | "active";
                /** @description Number of days which will be used to filter upcoming and closing soon shows. */
                day_threshold?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description Show IDs (not slugs) to include. */
                    show_ids?: string[];
                };
            };
        };
        responses: {
            /** @description Get all FollowShow instances that target the current user */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1FollowShows: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1FollowShows"];
            };
        };
        responses: {
            /** @description Add a show to the list of shows a user is following */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1FollowShows: {
        parameters: {
            query: {
                /** @description ID of the show to follow. */
                partner_show_id: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description allow a user to unfollow a show */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1GeneFamilies: {
        parameters: {
            query?: {
                /** @description Sort order. */
                sort?: "name" | "-name" | "position" | "-position";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a list of gene families */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1GeneTypeIdGenes: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Sort order. */
                sort?: "name" | "-name" | "counts.artists" | "-counts.artists" | "counts.artworks" | "-counts.artworks" | "published" | "-published" | "automated" | "-automated";
            };
            header?: never;
            path: {
                /** @description Gene type id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve deep data for all genes of a particular gene type. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1GeneType: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1GeneType"];
            };
        };
        responses: {
            /** @description Create a gene type. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1GeneTypeId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Gene type id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a gene type. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1GeneTypeId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Gene type id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1GeneType"];
            };
        };
        responses: {
            /** @description Updated a gene type. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1GeneTypeId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Gene type id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete a gene type. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1GeneTypes: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Sort order. */
                sort?: "name" | "-name" | "published" | "-published";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve all gene types. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1GeneIdArtworksAll: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Sort order. */
                sort?: "-created_at";
            };
            header?: never;
            path: {
                /** @description Partner id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve deep data for all partner artworks. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1GeneIdSimilar: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
            };
            header?: never;
            path: {
                /** @description Gene id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description Array of gene ids to exclude, may result in all genes being excluded. */
                    exclude_gene_ids?: string[];
                };
            };
        };
        responses: {
            /** @description Retrieve similar genes. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1GeneIdArtworks: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
            };
            header?: never;
            path: {
                /** @description Gene id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve artworks representative of a gene, ordered by gene value. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1GeneIdArtists: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Exclude artists that don't have any artworks. */
                exclude_artists_without_artworks?: boolean;
                /** @description Minimum gene value. */
                min_value?: number;
            };
            header?: never;
            path: {
                /** @description Gene id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve artists representative of a gene, ordered by gene value. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1Gene: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1Gene"];
            };
        };
        responses: {
            /** @description Create a gene. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1GeneId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Gene id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a gene. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1GeneId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Gene id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1Gene"];
            };
        };
        responses: {
            /** @description Updated a gene. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1GeneId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Gene id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete a gene. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "getApiV1GeneIdImage(ImageVersion)": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Gene id. */
                id: string;
                /** @description Image version. */
                image_version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get a gene's image. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1GenesPartnerApplied: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve all genes that are available for partner applied categories. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1GenesAll: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Sort order. */
                sort?: "name" | "-name" | "counts.artists" | "-counts.artists" | "counts.artworks" | "-counts.artworks" | "published" | "-published" | "automated" | "-automated";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve all genes, with all json. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1Genes: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Only include genes that are published (only applies for admins). */
                published?: boolean;
                /** @description Sort order. */
                sort?: "name" | "-name" | "counts.artists" | "-counts.artists" | "counts.artworks" | "-counts.artworks" | "published" | "-published" | "automated" | "-automated";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve all genes. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1GenomeMap: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a genome map, ie. all genes organized by type. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1HeroUnitsId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Hero Unit id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return a hero unit. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1HeroUnitsId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Hero Unit id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1HeroUnits"];
            };
        };
        responses: {
            /** @description Update a hero unit. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1HeroUnitsId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete a hero unit. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1HeroUnits: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return hero units sorted by position. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1HeroUnits: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1HeroUnits"];
            };
        };
        responses: {
            /** @description Create a hero unit. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1IdentityVerifications: {
        parameters: {
            query?: {
                user_id?: string;
                email?: string;
                name?: string;
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Sort order. */
                sort?: "-created_at";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a list of user identity verifications */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1IdentityVerificationIdScanReferences: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description fetch the scan references that have been created for an identity verification */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1IdentityVerificationIdOverride: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1IdentityVerificationIdOverride"];
            };
        };
        responses: {
            /** @description manually set the state on an identity verification */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1IdentityVerificationIdOverrides: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description fetch the overrides that have been applied to an identity verification */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1IdentityVerificationIdStart: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Call external identity verification service and return URL allowing the client to verify their identity */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1IdentityVerification: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1IdentityVerification"];
            };
        };
        responses: {
            /** @description Create an identity verification */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1IdentityVerificationId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve an identity verification. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1InquiryRequestQuestions: {
        parameters: {
            query: {
                /** @description Inquireable type. */
                inquireable_type: "Artwork";
                /** @description Inquireable ID. */
                inquireable_id: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve the inquiry questions. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1InquiryRequestId: {
        parameters: {
            query?: {
                /** @description Outcome Token used for authentication coming from email */
                outcome_token?: string;
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve an inquiry request by id. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1InquiryRequestId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1InquiryRequest"];
            };
        };
        responses: {
            /** @description Update an existing inquiry request. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1InquiryRequestId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete an existing inquiry request. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1InquiryRequestIdStatus: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Artwork inquiry request id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1InquiryRequestIdStatus"];
            };
        };
        responses: {
            /** @description Add a status to an inquiry request. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1InquiryRequests: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Inquired object type. Limits to returning only ArtworkInquiryRequests or PartnerShowInquiryRequests. */
                type?: "artwork" | "partner_show";
                /** @description Only return inquiries for artworks belonging to a given partner. */
                partner_id?: string;
                /** @description Only return inquiries for artworks belonging to partners that are managed by a given admin. */
                admin_id?: string;
                /** @description Only return inquiries for artworks that are part of a given fair. */
                fair_id?: string;
                /** @description Only return inquiries for artworks that are part of a given auction. */
                sale_id?: string;
                /** @description Sort order. */
                sort?: "-created_at" | "created_at" | "-outcome" | "outcome" | "likely_to_purchase" | "-likely_to_purchase" | "status" | "-status" | "flagged" | "-flagged" | "contact_gallery" | "-contact_gallery" | "status,-likely_to_purchase,created_at" | "last_message_received_at" | "-last_message_received_at";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description Only return inquiries with given id(s) */
                    id?: string[];
                };
            };
        };
        responses: {
            /** @description Retrieve all artwork inquiry requests. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1InvoiceId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The invoice ID. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get an individual invoice. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1InvoiceId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The invoice ID. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1Invoice"];
            };
        };
        responses: {
            /** @description Update an invoice. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1Invoice: {
        parameters: {
            query: {
                /** @description The invoice's secret token. */
                token: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get a ready/paid invoice by token. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1Invoice: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1Invoice"];
            };
        };
        responses: {
            /** @description Create an invoice. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1InvoiceInvoiceIdPayment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The invoice id. */
                invoice_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1InvoiceInvoiceIdPayment"];
            };
        };
        responses: {
            /** @description Add a payment. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1InvoiceInvoiceIdLineItemId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The invoice id. */
                invoice_id: string;
                /** @description The individual line item's id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1InvoiceInvoiceIdLineItem"];
            };
        };
        responses: {
            /** @description Update a line item. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1InvoiceInvoiceIdLineItemId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The invoice id. */
                invoice_id: string;
                /** @description The individual line item's id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete a line item. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1InvoiceInvoiceIdLineItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The invoice id. */
                invoice_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1InvoiceInvoiceIdLineItem"];
            };
        };
        responses: {
            /** @description Add a line item. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1Invoices: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Return invoices that belong to a given user. */
                user_id?: string;
                /** @description Optional invoice state. */
                state?: "draft" | "ready" | "paid" | "canceled";
                /** @description Optional sale. */
                sale_id?: string;
                /** @description Optional artwork. */
                artwork_id?: string;
                /** @description Optional artwork in a sale or auction. */
                sale_artwork_id?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get invoices. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1Labs: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve all available lab features. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1Maps: {
        parameters: {
            query: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Return maps for the given fair. */
                fair_id: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve maps. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1MarketingCollectionsMarketingCollectionIdArtworksArtworkId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Marketing collection ID. */
                marketing_collection_id: string;
                /** @description Artwork ID. */
                artwork_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Adds an artwork to a manually curated collection */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1MarketingCollectionsMarketingCollectionIdArtworksArtworkId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Marketing collection ID. */
                marketing_collection_id: string;
                /** @description Artwork ID. */
                artwork_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Removes an artwork from a manually curated collection */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MarketingCollectionsId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Marketing collection ID. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a marketing collection. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MarketingCollections: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Sort order. */
                sort?: "created_at" | "-created_at" | "updated_at" | "-updated_at";
                /** @description Filter by featured artist content */
                is_featured_artist_content?: boolean;
                /** @description Filter by artist ID */
                artist_id?: string;
                /** @description Filter by related collection ID */
                related_to_collection_id?: string;
                /** @description Filter by category */
                category?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description Returns these objects if passed in. */
                    ids?: string[];
                    /** @description Filter by slugs */
                    slugs?: string[];
                };
            };
        };
        responses: {
            /** @description Retrieve marketing collections. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MarketingCollectionsCategories: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve marketing collections grouped by category. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MatchPartnerIdArtists: {
        parameters: {
            query?: {
                /** @description Term to match. */
                term?: string;
                /** @description Maximum number of items to retrieve. */
                size?: number;
                /** @description Page to retrieve. */
                page?: number;
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description Exclude ids from results */
                    exclude_ids?: string[];
                };
            };
        };
        responses: {
            /** @description Match a partner's artists by term. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MatchPartnerIdShows: {
        parameters: {
            query?: {
                /** @description Term to match. */
                term?: string;
                /** @description Maximum number of items to retrieve. */
                size?: number;
                /** @description Page to retrieve. */
                page?: number;
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description Exclude ids from results */
                    exclude_ids?: string[];
                };
            };
        };
        responses: {
            /** @description Match a partner's partner shows by term. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MatchPartnerIdArtworks: {
        parameters: {
            query?: {
                /** @description Term to match. */
                term?: string;
                /** @description Maximum number of items to retrieve. */
                size?: number;
                /** @description Page to retrieve. */
                page?: number;
                /** @description Filtering based on visibility type */
                visibility_level?: "unlisted" | "listed";
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description Exclude ids from results */
                    exclude_ids?: string[];
                };
            };
        };
        responses: {
            /** @description Match a partner's artworks by term. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MatchSaleArtworks: {
        parameters: {
            query?: {
                /** @description Term to match. */
                term?: string;
                /** @description Maximum number of items to retrieve. */
                size?: number;
                /** @description Page to retrieve. */
                page?: number;
                /** @description Sale id. */
                sale_id?: string;
                include_unpublished?: boolean;
                visibility_level?: "unlisted" | "listed";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description Exclude ids from results */
                    exclude_ids?: string[];
                };
            };
        };
        responses: {
            /** @description Match sale artworks by term. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MatchSuggest: {
        parameters: {
            query?: {
                /** @description Term to auto suggest for. */
                term?: string;
                /** @description Maximum number of items to retrieve. */
                size?: number;
                /** @description Page to retrieve. */
                page?: number;
                /** @description Only return items visible to public. */
                visible_to_public?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description Which models (ES indexes) to search. */
                    indexes?: string[];
                    /** @description Aggregations. */
                    aggregations?: string[];
                };
            };
        };
        responses: {
            /** @description Global Auto Suggest (by name). */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1Match: {
        parameters: {
            query?: {
                /** @description Term to match. */
                term?: string;
                /** @description Maximum number of items to retrieve. */
                size?: number;
                /** @description Page to retrieve. */
                page?: number;
                /** @description Only return items visible to public. */
                visible_to_public?: string;
                /** @description Only return artists and shows at the given fair. */
                fair_id?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description Exclude ids from results */
                    exclude_ids?: string[];
                    /** @description Which models (ES indexes) to search. */
                    indexes?: string[];
                    /** @description Aggregations. */
                    aggregations?: string[];
                };
            };
        };
        responses: {
            /** @description Global Search (by name). */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MatchUsers: {
        parameters: {
            query?: {
                /** @description Term to match. */
                term?: string;
                /** @description Maximum number of items to retrieve. */
                size?: number;
                /** @description Page to retrieve. */
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description Exclude ids from results */
                    exclude_ids?: string[];
                };
            };
        };
        responses: {
            /** @description Autocomplete users by name & email. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MatchArtists: {
        parameters: {
            query?: {
                /** @description Term to match. */
                term?: string;
                /** @description Maximum number of items to retrieve. */
                size?: number;
                /** @description Page to retrieve. */
                page?: number;
                /** @description Custom sort for artist search. */
                sort?: string;
                /** @description Filtering by artists that are a part of target supply. */
                target_supply?: boolean;
                /** @description Only return artists visible to public. */
                visible_to_public?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description Exclude ids from results */
                    exclude_ids?: string[];
                };
            };
        };
        responses: {
            /** @description Search artists by name */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MatchPartnerShows: {
        parameters: {
            query?: {
                /** @description Term to match. */
                term?: string;
                /** @description Maximum number of items to retrieve. */
                size?: number;
                /** @description Page to retrieve. */
                page?: number;
                /** @description Filtering by partner */
                partner_id?: string;
                /** @description Filtering by galaxy partner */
                galaxy_partner_id?: string;
                /** @description When true, will include reference-type shows as well. */
                is_reference?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description Exclude ids from results */
                    exclude_ids?: string[];
                };
            };
        };
        responses: {
            /** @description Search partner shows by name */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MatchSales: {
        parameters: {
            query?: {
                /** @description Term to match. */
                term?: string;
                /** @description Maximum number of items to retrieve. */
                size?: number;
                /** @description Page to retrieve. */
                page?: number;
                /** @description Filter sales by auction type */
                is_auction?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description Exclude ids from results */
                    exclude_ids?: string[];
                };
            };
        };
        responses: {
            /** @description Search sales by name */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MatchCultures: {
        parameters: {
            query?: {
                /** @description Term to match. */
                term?: string;
                /** @description Maximum number of items to retrieve. */
                size?: number;
                /** @description Page to retrieve. */
                page?: number;
                /** @description Filter cultures by nationality */
                is_nationality?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description Exclude ids from results */
                    exclude_ids?: string[];
                };
            };
        };
        responses: {
            /** @description Search cultures by name */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MatchGenes: {
        parameters: {
            query?: {
                /** @description Term to match. */
                term?: string;
                /** @description Maximum number of items to retrieve. */
                size?: number;
                /** @description Page to retrieve. */
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description Exclude ids from results */
                    exclude_ids?: string[];
                };
            };
        };
        responses: {
            /** @description Search genes by name */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MatchFairs: {
        parameters: {
            query?: {
                /** @description Term to match. */
                term?: string;
                /** @description Maximum number of items to retrieve. */
                size?: number;
                /** @description Page to retrieve. */
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description Exclude ids from results */
                    exclude_ids?: string[];
                };
            };
        };
        responses: {
            /** @description Search fairs by name */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MatchTags: {
        parameters: {
            query?: {
                /** @description Term to match. */
                term?: string;
                /** @description Maximum number of items to retrieve. */
                size?: number;
                /** @description Page to retrieve. */
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description Exclude ids from results */
                    exclude_ids?: string[];
                };
            };
        };
        responses: {
            /** @description Autocomplete tags by name. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MatchProfiles: {
        parameters: {
            query?: {
                /** @description Term to match. */
                term?: string;
                /** @description Maximum number of items to retrieve. */
                size?: number;
                /** @description Page to retrieve. */
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description Exclude ids from results */
                    exclude_ids?: string[];
                };
            };
        };
        responses: {
            /** @description Autocomplete profiles by name. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MatchPartners: {
        parameters: {
            query?: {
                /** @description Term to match. */
                term?: string;
                /** @description Maximum number of items to retrieve. */
                size?: number;
                /** @description Page to retrieve. */
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description Exclude ids from results */
                    exclude_ids?: string[];
                };
            };
        };
        responses: {
            /** @description Autocomplete partners by name. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MatchPages: {
        parameters: {
            query?: {
                /** @description Term to match. */
                term?: string;
                /** @description Maximum number of items to retrieve. */
                size?: number;
                /** @description Page to retrieve. */
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description Exclude ids from results */
                    exclude_ids?: string[];
                };
            };
        };
        responses: {
            /** @description Autocomplete pages by name. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MatchSets: {
        parameters: {
            query?: {
                /** @description Term to match. */
                term?: string;
                /** @description Maximum number of items to retrieve. */
                size?: number;
                /** @description Page to retrieve. */
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description Exclude ids from results */
                    exclude_ids?: string[];
                };
            };
        };
        responses: {
            /** @description Autocomplete ordered_sets by name. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MatchHeroUnits: {
        parameters: {
            query?: {
                /** @description Term to match. */
                term?: string;
                /** @description Maximum number of items to retrieve. */
                size?: number;
                /** @description Page to retrieve. */
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description Exclude ids from results */
                    exclude_ids?: string[];
                };
            };
        };
        responses: {
            /** @description Autocomplete hero_units by name. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MatchFeatures: {
        parameters: {
            query?: {
                /** @description Term to match. */
                term?: string;
                /** @description Maximum number of items to retrieve. */
                size?: number;
                /** @description Page to retrieve. */
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description Exclude ids from results */
                    exclude_ids?: string[];
                };
            };
        };
        responses: {
            /** @description Autocomplete features by name. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MatchFeaturedLinks: {
        parameters: {
            query?: {
                /** @description Term to match. */
                term?: string;
                /** @description Maximum number of items to retrieve. */
                size?: number;
                /** @description Page to retrieve. */
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description Exclude ids from results */
                    exclude_ids?: string[];
                };
            };
        };
        responses: {
            /** @description Autocomplete featured_links by name. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MatchFairOrganizers: {
        parameters: {
            query?: {
                /** @description Term to match. */
                term?: string;
                /** @description Maximum number of items to retrieve. */
                size?: number;
                /** @description Page to retrieve. */
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description Exclude ids from results */
                    exclude_ids?: string[];
                };
            };
        };
        responses: {
            /** @description Autocomplete fair_organizers by name. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MatchArtworks: {
        parameters: {
            query?: {
                /** @description Term to match. */
                term?: string;
                /** @description Published artworks. */
                published?: boolean;
                /** @description Genome marked as complete */
                genomed?: boolean;
                /** @description Fairs. */
                fair_id?: string;
                /** @description Artist. */
                artist_id?: string;
                /** @description Partner Shows. */
                partner_show_id?: string;
                /** @description Marked as deleted. */
                deleted?: string;
                /** @description Partner. */
                partner_id?: string;
                /** @description Maximum number of items to retrieve. */
                size?: number;
                /** @description Page to retrieve. */
                page?: number;
                visibility_level?: "unlisted" | "listed";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Autocomplete artworks by name. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MeAnonymousSessions: {
        parameters: {
            query?: {
                /** @description Session id associated with the anonymous sessions. */
                session_id?: string;
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve anonymous sessions. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MeAnonymousSessionId: {
        parameters: {
            query: {
                /** @description Email associated with the anonymous sessions. */
                email: string;
                /** @description Session id associated with the anonymous sessions. */
                session_id: string;
            };
            header?: never;
            path: {
                /** @description Anonymous session id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve an anonymous session. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1MeAnonymousSessionId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Anonymous session id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1MeAnonymousSession"];
            };
        };
        responses: {
            /** @description Update an existing anonymous session. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1MeAnonymousSession: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1MeAnonymousSession"];
            };
        };
        responses: {
            /** @description Updates an anonymous session. Uses cookied session_id if not specified. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1MeAnonymousSession: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1MeAnonymousSession"];
            };
        };
        responses: {
            /** @description Creates [or updates] an anonymous session. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1MeAlertUserSearchCriteriaId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_search_criteria_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1MeAlert"];
            };
        };
        responses: {
            /** @description Update an alert. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1MeAlertUserSearchCriteriaId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_search_criteria_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Soft-delete (disable) an alert. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MeAlertId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of user search criteria OR search criteria */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve an alert. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1MeAlert: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1MeAlert"];
            };
        };
        responses: {
            /** @description Create an alert. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MeAlerts: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Sorting criteria */
                sort?: "name" | "-enabled_at";
                "search_criteria[acquireable]"?: boolean;
                "search_criteria[at_auction]"?: boolean;
                "search_criteria[dimension_range]"?: string;
                "search_criteria[for_sale]"?: boolean;
                "search_criteria[height]"?: string;
                "search_criteria[inquireable_only]"?: boolean;
                "search_criteria[keyword]"?: string;
                "search_criteria[offerable]"?: boolean;
                "search_criteria[price_range]"?: string;
                "search_criteria[width]"?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    "search_criteria[additional_gene_ids]"?: string[];
                    "search_criteria[artist_ids]"?: string[];
                    "search_criteria[artist_series_ids]"?: string[];
                    "search_criteria[attribution_class]"?: string[];
                    "search_criteria[colors]"?: string[];
                    "search_criteria[location_cities]"?: string[];
                    "search_criteria[major_periods]"?: string[];
                    "search_criteria[materials_terms]"?: string[];
                    "search_criteria[partner_ids]"?: string[];
                    "search_criteria[sizes]"?: string[];
                };
            };
        };
        responses: {
            /** @description get Alert(s) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MeArtists: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve artists under management. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MeArtworkInquiryRequests: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Artwork id. */
                artwork?: string;
                /** @description External session id to track logged out actions. */
                session_id?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve inquiry requests. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1MeArtworkInquiryRequestIdSend: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Inquiry request id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1MeArtworkInquiryRequestIdSend"];
            };
        };
        responses: {
            /** @description Send a delayed inquiry request. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MeArtworkInquiryRequestId: {
        parameters: {
            query?: {
                /** @description External session id to track logged out actions. */
                session_id?: string;
            };
            header?: never;
            path: {
                /** @description Inquiry request id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve an existing inquiry request. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1MeArtworkInquiryRequestId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Inquiry request id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1MeArtworkInquiryRequest"];
            };
        };
        responses: {
            /** @description Update an existing inquiry request. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1MeArtworkInquiryRequestId: {
        parameters: {
            query?: {
                /** @description Client's key for anonymous session. */
                session_id?: string;
            };
            header?: never;
            path: {
                /** @description Inquiry request id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete an existing inquiry request. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1MeArtworkInquiryRequest: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1MeArtworkInquiryRequest"];
            };
        };
        responses: {
            /** @description Create an artwork inquiry request. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1MeTriggerCampaign: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1MeTriggerCampaign"];
            };
        };
        responses: {
            /** @description Trigger a campaign send. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MeLotStandings: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Sort order. */
                sort?: "-created_at";
                /** @description Sale id. */
                sale_id?: string;
                /** @description Artwork id. */
                artwork_id?: string;
                /** @description SaleArtwork id. */
                sale_artwork_id?: string;
                /** @description Return only lots in live sales. */
                live?: boolean;
                /** @description Return only lots in sales with sync to causality off. */
                causality_sync_off?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve my standing on given lots. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MeLabs: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve my lab features. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1MeRecentlyViewedArtworks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1MeRecentlyViewedArtworks"];
            };
        };
        responses: {
            /** @description Record a recently viewed artwork. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1MeUserFlags: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1MeUserFlags"];
            };
        };
        responses: {
            /** @description Set (or unset) user flag. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1Me: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve current user info. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1Me: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1Me"];
            };
        };
        responses: {
            /** @description Update user info. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1Me: {
        parameters: {
            query?: {
                /** @description Reason for deleting the account. */
                explanation?: string;
                /** @description Current password. */
                password?: string;
                /** @description Refeerrer location. */
                url?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete current user. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1MePassword: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1MePassword"];
            };
        };
        responses: {
            /** @description Change current user password. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MePing: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Validate current user token (only). */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MeBidders: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Filter for a specific sale */
                sale_id?: string;
                /** @description When true, limit results to active sales only */
                active?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve my bidders. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MeBidderPositions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Deprecated - returns an empty list. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1MeToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1MeToken"];
            };
        };
        responses: {
            /** @description Get a token for a client app. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1MeTrustToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Create a trust token valid for other Artsy services. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1MeAuthenticationsProvider: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A 3rd party account provider, such as facebook or apple. */
                provider: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1MeAuthentications"];
            };
        };
        responses: {
            /** @description Link a 3rd party account. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1MeAuthenticationsProvider: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A 3rd party account provider, such as facebook or apple. */
                provider: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Unlink a 3rd party account. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MeAuthentications: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve third party authentications. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MeBankAccounts: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Sort order. */
                sort?: "created_at" | "-created_at" | "bank_name" | "-bank_name";
                /** @description Bank account type. */
                type?: "us_bank_account" | "sepa_debit";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve bank accounts. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1MeBankAccountId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Bank account id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Deactive a bank account. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MeBidderPositionId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Bidder Position id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a bidder position. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1MeBidderPosition: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1MeBidderPosition"];
            };
        };
        responses: {
            /** @description Place a bid with a maximum amount in cents. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1MeCollections: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1MeCollections"];
            };
        };
        responses: {
            /** @description Batch update Collections. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1MeCollectorProfileIcon: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1MeCollectorProfileIcon"];
            };
        };
        responses: {
            /** @description Change user icon. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1MeCollectorProfileIcon: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete user icon. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MeCollectorProfile: {
        parameters: {
            query?: {
                /** @description Anonymous session id */
                anonymous_session_id?: string;
                /** @description Session id associated with the anonymous session. */
                session_id?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get the existing collector profile for the current user or an anonymous session. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1MeCollectorProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1MeCollectorProfile"];
            };
        };
        responses: {
            /** @description Update an existing collector profile for the current user or an anonymous session. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1MeCollectorProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1MeCollectorProfile"];
            };
        };
        responses: {
            /** @description Create a new collector profile for the current user or an anonymous session. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1MeCollectorProfileCollectorReferenceId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1MeCollectorProfileCollectorReference"];
            };
        };
        responses: {
            /** @description Update a collector reference. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1MeCollectorProfileCollectorReferenceId: {
        parameters: {
            query?: {
                /** @description Anonymous session id */
                anonymous_session_id?: string;
                /** @description Session id associated with the anonymous session. */
                session_id?: string;
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete an existing collector reference. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MeCollectorProfileCollectorReferences: {
        parameters: {
            query?: {
                /** @description Anonymous session id */
                anonymous_session_id?: string;
                /** @description Session id associated with the anonymous session. */
                session_id?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve all collector references for a collector profile. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1MeCollectorProfileCollectorReference: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1MeCollectorProfileCollectorReference"];
            };
        };
        responses: {
            /** @description Create a collector reference. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1MeConfirmationEmails: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Send a confirmation email. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MeCreditCards: {
        parameters: {
            query?: {
                /** @description Only return credit cards that are qualified_for_bidding. */
                qualified_for_bidding?: boolean;
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Sort order. */
                sort?: "created_at" | "-created_at" | "name" | "-name" | "brand" | "-brand";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve my credit cards. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1MeCreditCards: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1MeCreditCards"];
            };
        };
        responses: {
            /** @description Add a credit card. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1MeCreditCardId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Card id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Deactive a credit card. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MeFollowGenes: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description Genes to include. */
                    genes?: string[];
                };
            };
        };
        responses: {
            /** @description Retrieve genes that you follow. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MeFollowArtists: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Fair within which to search for artists. */
                fair_id?: string;
                /** @description Show within which to search for followed artists */
                show_id?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description Artists to include. */
                    artists?: string[];
                };
            };
        };
        responses: {
            /** @description Retrieve artists that you follow. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MeFollowArtistId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Followed artist reference id or artist id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Follow reference for a followed artist. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1MeFollowArtistId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Followed artist reference id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1MeFollowArtist"];
            };
        };
        responses: {
            /** @description Update a followed artist reference. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1MeFollowArtistId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Followed artist reference id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Stop following an artist. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1MeFollowArtist: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1MeFollowArtist"];
            };
        };
        responses: {
            /** @description Follow an artist. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MeFollowProfilesArtworks: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description If true, will only include for sale artworks. */
                for_sale?: boolean;
                /** @description Sort order. */
                sort?: "title" | "-title" | "created_at" | "-created_at" | "-created_at,-id" | "deleted_at" | "-deleted_at" | "-iconicity" | "-merchandisability" | "published_at" | "-published_at" | "-partner_updated_at" | "availability" | "-recent_saves_count" | "-last_offerable_activity_at";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve artworks based on profile follows. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MeFollowArtistsArtworks: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description If true, will only include for sale artworks. */
                for_sale?: boolean;
                /** @description Sort order. */
                sort?: "title" | "-title" | "created_at" | "-created_at" | "-created_at,-id" | "deleted_at" | "-deleted_at" | "-iconicity" | "-merchandisability" | "published_at" | "-published_at" | "-partner_updated_at" | "availability" | "-recent_saves_count" | "-last_offerable_activity_at";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve artworks based on artist follows. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MeFollowGeneId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Followed gene reference id or gene id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Followed reference for a followed gene. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1MeFollowGeneId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Followed gene reference id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1MeFollowGene"];
            };
        };
        responses: {
            /** @description Update a followed gene reference. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1MeFollowGeneId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Followed gene reference id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Stop following a gene. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1MeFollowGene: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1MeFollowGene"];
            };
        };
        responses: {
            /** @description Follow a gene. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MeFollowProfiles: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Fair within which to search for followed partners. */
                fair_id?: string;
                /** @description If true, includes only machine-assisted follows. */
                auto?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description Profiles to include. */
                    profiles?: string[];
                    /** @description Restrict profiles to given owner type. */
                    owner_types?: string[];
                };
            };
        };
        responses: {
            /** @description Retrieve profiles that you follow. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1MeFollowProfiles: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1MeFollowProfiles"];
            };
        };
        responses: {
            /** @description Follow 1 or more profiles. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MeFollowProfileId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Followed profile reference id or profile handle. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Followed reference for a followed profile. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1MeFollowProfileId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Followed profile reference id or profile handle. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Stop following a profile. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1MeFollowProfileProfileId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Profile id. */
                profile_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1MeFollowProfile"];
            };
        };
        responses: {
            /** @description Follow a profile. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1MeFollowProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1MeFollowProfile"];
            };
        };
        responses: {
            /** @description Follow a profile. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MeFollowShows: {
        parameters: {
            query: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Fair within which to search for followed partners. */
                fair_id: string;
                /** @description If true, includes only machine-assisted follows. */
                auto?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve shows at a fair by partners whose profiles you follow. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MeFollowArtistsShows: {
        parameters: {
            query?: {
                /** @description Sorting criteria */
                sort?: "created_at" | "-created_at" | "end_at" | "-end_at" | "start_at" | "-start_at" | "name" | "-name" | "-featured,-start_at" | "-featured,-end_at" | "sortable_name" | "-sortable_name" | "fully_qualified_name" | "-fully_qualified_name" | "-relevance,-start_at";
                /** @description Return shows that are 'current', 'running', 'closed' or 'upcoming'. */
                status?: "current" | "running" | "closed" | "upcoming" | "running_and_upcoming" | "closing_soon" | "active";
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve visible_to_public shows based on artist follows (default sorted by start_at). */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1MeInquiryIntroduction: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1MeInquiryIntroduction"];
            };
        };
        responses: {
            /** @description Generate gallery introduction based on params. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MeInquiryRequests: {
        parameters: {
            query: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Optional inquireable id, but must include inquireable_type. */
                inquireable_id?: string;
                /** @description Optional inquireable type. */
                inquireable_type: "artwork" | "partner_show";
                /** @description External session id to track logged out actions. */
                session_id?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve inquiry requests. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1MeInquiryRequestIdSend: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Inquiry request id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1MeInquiryRequestIdSend"];
            };
        };
        responses: {
            /** @description Send a delayed inquiry request. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MeInquiryRequestId: {
        parameters: {
            query?: {
                /** @description External session id to track logged out actions. */
                session_id?: string;
            };
            header?: never;
            path: {
                /** @description Inquiry request id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve an existing inquiry request. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1MeInquiryRequestId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Inquiry request id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1MeInquiryRequest"];
            };
        };
        responses: {
            /** @description Update an existing inquiry request. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1MeInquiryRequestId: {
        parameters: {
            query?: {
                /** @description External session id to track logged out actions. */
                session_id?: string;
            };
            header?: never;
            path: {
                /** @description Inquiry request id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete an existing inquiry request. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1MeInquiryRequest: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1MeInquiryRequest"];
            };
        };
        responses: {
            /** @description Create an inquiry request. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1MeLabId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Feature id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Turn a lab feature on. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1MeLabId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Feature id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Turn a lab feature off. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MeModules: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve states of eligible modules for a user */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MeMyCollectionArtworks: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Exclude artworks that have been purchased on Artsy and automatically added to the collection. */
                exclude_purchased_artworks?: boolean;
                /** @description Show only target supply artworks. */
                include_only_target_supply?: boolean;
                /** @description Sort order. */
                sort?: "position" | "-position" | "created_at" | "-created_at";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description Artworks to include. */
                    artworks?: string[];
                    /** @description Filter artworks by artist IDs. */
                    artist_ids?: string[];
                };
            };
        };
        responses: {
            /** @description Retrieve current user's MyCollection artworks */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1MeNotificationsMarkAsSeen: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1MeNotificationsMarkAsSeen"];
            };
        };
        responses: {
            /** @description Mark notifications feed as seen */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1MeNotifications: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1MeNotifications"];
            };
        };
        responses: {
            /** @description Mark a user's notifications read */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MeNotificationsId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve one user's notification by notification ID */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MeNotificationsFeed: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description Filter notifications by activity types. */
                    activity_types?: string[];
                };
            };
        };
        responses: {
            /** @description Retrieve a user's notifications in bundles */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MePartners: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description Array of partner IDs to search for. */
                    partner_ids?: string[];
                };
            };
        };
        responses: {
            /** @description Retrieve partners under management. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MePartnerOffers: {
        parameters: {
            query?: {
                /** @description Artwork ID. */
                artwork_id?: string;
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Sort order. */
                sort?: "created_at" | "-created_at" | "end_at" | "-end_at";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List partner offers for the current user */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MePartnerOfferId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner offer id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Show a partner offer. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MeRepresentations: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Sort order. */
                sort?: "name" | "-name" | "email" | "-email" | "collector_since" | "-collector_since";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve specialist's representations. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1MeRequestPriceEstimate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1MeRequestPriceEstimate"];
            };
        };
        responses: {
            /** @description Request Price Estimate from the Artsy Specialist (does not fail if request has already been made) */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MeSearchCriteriaId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description get SearchCriteria(s) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1MeSecondFactorsId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Second factor id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1MeSecondFactors"];
            };
        };
        responses: {
            /** @description Update a disabled app or SMS second factor */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1MeSecondFactorsId: {
        parameters: {
            query: {
                password: string;
            };
            header?: never;
            path: {
                /** @description Second factor id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Disable (soft-delete) an enabled second factor */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1MeSecondFactorsIdEnable: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Second factor id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1MeSecondFactorsIdEnable"];
            };
        };
        responses: {
            /** @description Enable a disabled second factor */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1MeSecondFactorsIdDeliver: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Second factor id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Triggers delivery of a second factor */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MeSecondFactors: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description Filter by second factor kind. */
                    kinds?: ("app" | "backup" | "sms")[];
                };
            };
        };
        responses: {
            /** @description Retrieve current user's enabled second factors. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1MeSecondFactors: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1MeSecondFactors"];
            };
        };
        responses: {
            /** @description Create a new app/sms second factor, or re-generate backups. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MeShows: {
        parameters: {
            query?: {
                /** @description Sorting criteria */
                sort?: "created_at" | "-created_at" | "end_at" | "-end_at" | "start_at" | "-start_at" | "name" | "-name" | "-featured,-start_at" | "-featured,-end_at" | "sortable_name" | "-sortable_name" | "fully_qualified_name" | "-fully_qualified_name" | "-relevance,-start_at";
                /** @description Return shows that are 'current', 'running', 'closed' or 'upcoming'. */
                status?: "current" | "running" | "closed" | "upcoming" | "running_and_upcoming" | "closing_soon" | "active";
                /** @description Coordinates to return shows closest to. */
                near?: string;
                /** @description Max distance to use when geo-locating shows, defaults to 75km. */
                max_distance?: string;
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve shows based on artist follows, partner follows and location. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MeSuggestedArtists: {
        parameters: {
            query: {
                /** @description Artist id. */
                artist_id: string;
                /** @description If true, will only include artists with at least one published for-sale work. */
                exclude_artists_without_forsale_artworks?: boolean;
                /** @description If true, will only include artists with at least one published work. */
                exclude_artists_without_artworks?: boolean;
                /** @description If true, will exclude followed artists. */
                exclude_followed_artists?: boolean;
                /** @description If true, will include featured artists if no results are found */
                include_fallback_artists?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description Exclude these ids from results, may result in all artists being excluded. */
                    exclude_artist_ids?: string[];
                };
            };
        };
        responses: {
            /** @description Retrieve suggested artists to follow. For now these are just related artists. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MeSuggestedArtworksHomepage: {
        parameters: {
            query?: {
                /** @description Limit. */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Deprecated genomic recommendations API. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MeTasks: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List tasks for the current user */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1MeTaskIdAcknowledge: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Task id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Acknowledge a task */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1MeTaskIdDismiss: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Task id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Dismiss a task */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MeUserFairActions: {
        parameters: {
            query?: {
                /** @description Sort order. */
                sort?: "-_id" | "_id";
                /** @description Anonymous session id */
                anonymous_session_id?: string;
                /** @description Session id associated with the anonymous session. */
                session_id?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve user fair actions for the current user or an anonymous session. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1MeUserFairAction: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1MeUserFairAction"];
            };
        };
        responses: {
            /** @description Create a user fair action for the current user or an anonymous session. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MeUserInterests: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Type of interest. */
                interest_type?: "Artist" | "Gene";
                /** @description Id of the user Interest. Can be an Artist ID or a Gene ID */
                interest_id?: string;
                /** @description UserInterest Category */
                category?: "collected_before" | "interested_in_collecting";
                /** @description Anonymous session id. */
                anonymous_session_id?: string;
                /** @description Client's key for anonymous session. */
                session_id?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve user interests of a collector profile. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MeUserInterestId: {
        parameters: {
            query?: {
                /** @description Anonymous session id */
                anonymous_session_id?: string;
                /** @description Session id associated with the anonymous session. */
                session_id?: string;
            };
            header?: never;
            path: {
                /** @description Bookmarked interest reference id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get an interest bookmark. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1MeUserInterestId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Bookmarked interest reference id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1MeUserInterest"];
            };
        };
        responses: {
            /** @description Update a bookmarked interest reference. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1MeUserInterestId: {
        parameters: {
            query?: {
                /** @description Anonymous session id */
                anonymous_session_id?: string;
                /** @description Session id associated with the anonymous session. */
                session_id?: string;
            };
            header?: never;
            path: {
                /** @description Either the `id` or the `interest_id` of a user interest */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Stop bookmarking an interest. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1MeUserInterest: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1MeUserInterest"];
            };
        };
        responses: {
            /** @description Bookmark an interest. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MeUserInterestArtists: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve artists that you bookmarked. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1MerchantAccounts: {
        parameters: {
            query: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Partner Id. */
                partner_id: string;
                /** @description Flag for including deactivated merchant accounts. */
                include_deactivated?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve merchant accounts. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1MerchantAccountId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Merchant account Id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Deactivate a merchant account for a partner. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1MerchantAccount: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1MerchantAccount"];
            };
        };
        responses: {
            /** @description Create or reactivate a merchant account for a partner. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1NotificationPreferences: {
        parameters: {
            query?: {
                /** @description Auth token. */
                authentication_token?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get notification preferences. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1NotificationPreferences: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1NotificationPreferences"];
            };
        };
        responses: {
            /** @description Update notification preferences. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1Pages: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Sort order. */
                sort?: "created_at" | "-created_at" | "name" | "-name";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve all pages. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PageId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Page id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve an existing page. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1PageId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Page id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1Page"];
            };
        };
        responses: {
            /** @description Update an existing page. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1PageId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Page id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete an existing page. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1Page: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1Page"];
            };
        };
        responses: {
            /** @description Create a page. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "getApiV1PartnerIdSize(Type)": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                id: string;
                /** @description Images, documents or all. */
                type: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get total bytes for a partner's documents and images. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerPartnerIdShowIdNeighbors: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                partner_id: string;
                /** @description Show id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Given a partner show, retrieve the next and previous shows sorted by -start_at */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerPartnerIdShowId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                partner_id: string;
                /** @description Show id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a partner show. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1PartnerPartnerIdShowId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                partner_id: string;
                /** @description Show id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1PartnerPartnerIdShow"];
            };
        };
        responses: {
            /** @description Update an existing partner show. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1PartnerPartnerIdShowId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                partner_id: string;
                /** @description Show id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete an existing partner show. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1PartnerIdShow: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1PartnerIdShow"];
            };
        };
        responses: {
            /** @description Create a new partner show. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerPartnerIdShows: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Artist id. If passed in, endpoint will return shows at this partner the artist is in. */
                artist_id?: string;
                /** @description Artwork id. If passed in, endpoint will return shows at this partner the artwork is in. */
                artwork_id?: string;
                /** @description Partner show status. */
                status?: "current" | "running" | "closed" | "upcoming" | "running_and_upcoming" | "closing_soon" | "active";
                /** @description Show only displayable shows. */
                displayable?: boolean;
                /** @description Include local discovery stubs in admin results. */
                include_local_discovery?: boolean;
                /** @description Allows to select only fair shows or only shows that are not at the fair. */
                at_a_fair?: boolean;
                /** @description Sort order. */
                sort?: "created_at" | "-created_at" | "end_at" | "-end_at" | "start_at" | "-start_at" | "name" | "-name" | "-featured,-start_at" | "-featured,-end_at" | "sortable_name" | "-sortable_name" | "fully_qualified_name" | "-fully_qualified_name" | "-relevance,-start_at";
            };
            header?: never;
            path: {
                /** @description Partner id. */
                partner_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve all partner shows. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerPartnerIdShowShowIdDocumentId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                partner_id: string;
                /** @description Show id. */
                show_id: string;
                /** @description Document id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a partner show document. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1PartnerPartnerIdShowShowIdDocumentId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                partner_id: string;
                /** @description Show id. */
                show_id: string;
                /** @description Document id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1PartnerPartnerIdShowShowIdDocument"];
            };
        };
        responses: {
            /** @description Update a partner show document. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1PartnerPartnerIdShowShowIdDocumentId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                partner_id: string;
                /** @description Show id. */
                show_id: string;
                /** @description Document id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete a partner show document. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1PartnerPartnerIdShowShowIdDocument: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                partner_id: string;
                /** @description Show id. */
                show_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1PartnerPartnerIdShowShowIdDocument"];
            };
        };
        responses: {
            /** @description Create a partner show document. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerPartnerIdShowShowIdDocuments: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
            };
            header?: never;
            path: {
                /** @description Partner id. */
                partner_id: string;
                /** @description Show id. */
                show_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve all partner show documents for a given partner and show. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1PartnerPartnerIdShowPartnerShowIdArtworkId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                partner_id: string;
                /** @description Partner show id. */
                partner_show_id: string;
                /** @description Artwork id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1PartnerPartnerIdShowPartnerShowIdArtwork"];
            };
        };
        responses: {
            /** @description Update an artwork within a partner show. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1PartnerPartnerIdShowPartnerShowIdArtworkId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                partner_id: string;
                /** @description Partner show id. */
                partner_show_id: string;
                /** @description Artwork id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1PartnerPartnerIdShowPartnerShowIdArtwork"];
            };
        };
        responses: {
            /** @description Add an artwork to a partner show. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1PartnerPartnerIdShowPartnerShowIdArtworkId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                partner_id: string;
                /** @description Partner show id. */
                partner_show_id: string;
                /** @description Artwork id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Remove an artwork from a partner show. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1PartnerPartnerIdShowPartnerShowIdReposition: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                partner_id: string;
                /** @description Partner show id. */
                partner_show_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Array of artwork ids in the show. */
                    artwork_ids: string[];
                };
            };
        };
        responses: {
            /** @description Reposition artworks in a partner show. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerPartnerIdShowPartnerShowIdArtworks: {
        parameters: {
            query?: {
                /** @description Return artworks without an artist. */
                without_artist?: boolean;
                /** @description Artist id. */
                artist_id?: string;
                /** @description Return artworks with a given availability. */
                availability?: "for sale" | "not for sale" | "on hold" | "on loan" | "permanent collection" | "sold";
                /** @description Return artworks with for_sale availability. */
                for_sale?: boolean;
                /** @description Return artworks with availability other than not-for-sale. */
                for_sale_sold_on_hold?: boolean;
                /** @description Return artworks with availability other than for_sale. */
                not_for_sale?: boolean;
                /** @description Return only artworks in given published status. */
                published?: boolean;
            };
            header?: never;
            path: {
                /** @description Partner id. */
                partner_id: string;
                /** @description Partner show id. */
                partner_show_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description Return artworks with a given visibility level */
                    visibility_levels?: ("unlisted" | "listed")[];
                    /** @description An array of artwork ids to exclude from the response. */
                    exclude_ids?: string[];
                };
            };
        };
        responses: {
            /** @description Retrieve all artworks at a partner show sorted by position. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerPartnerIdShowPartnerShowIdArtworksAll: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Return artworks without an artist. */
                without_artist?: boolean;
                /** @description Return artworks with a given availability. */
                availability?: "for sale" | "not for sale" | "on hold" | "on loan" | "permanent collection" | "sold";
                /** @description Return artworks available for buy now */
                ecommerce?: boolean;
                /** @description Return artworks available for make offer */
                offer?: boolean;
                /** @description Return artworks with for_sale availability. */
                for_sale?: boolean;
                /** @description Return artworks with availability other than not-for-sale. */
                for_sale_sold_on_hold?: boolean;
                /** @description Return artworks with availability other than for_sale. */
                not_for_sale?: boolean;
                /** @description Return only artworks in given published status. */
                published?: boolean;
            };
            header?: never;
            path: {
                /** @description Partner id. */
                partner_id: string;
                /** @description Partner show id. */
                partner_show_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description Return artworks with a given visibility level */
                    visibility_levels?: ("unlisted" | "listed")[];
                };
            };
        };
        responses: {
            /** @description Retrieve deep data for all artworks at a partner show. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerPartnerIdShowPartnerShowIdArtists: {
        parameters: {
            query?: {
                /** @description Pass to filter out unpublished works. */
                published?: boolean;
            };
            header?: never;
            path: {
                /** @description Partner id. */
                partner_id: string;
                /** @description Partner show id. */
                partner_show_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve all artists at a partner show. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerPartnerIdLocationId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                partner_id: string;
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a partner location. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1PartnerPartnerIdLocationId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                partner_id: string;
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1PartnerPartnerIdLocation"];
            };
        };
        responses: {
            /** @description Update an existing partner location. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1PartnerPartnerIdLocationId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                partner_id: string;
                /** @description Location id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete an existing partner location. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1PartnerPartnerIdLocationIdBillingLocation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                partner_id: string;
                /** @description Location id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Set an existing partner location as a billing location (for subscription tax purposes). */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1PartnerIdLocation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1PartnerIdLocation"];
            };
        };
        responses: {
            /** @description Create a new partner location. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1PartnerPartnerIdLocationsReposition: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                partner_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Array of partner location ids. */
                    location_ids: string[];
                };
            };
        };
        responses: {
            /** @description Reposition partner locations. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerPartnerIdLocations: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Include private locations. */
                private?: boolean;
            };
            header?: never;
            path: {
                /** @description Partner id. */
                partner_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description Array of address types. */
                    address_type?: string[];
                };
            };
        };
        responses: {
            /** @description Retrieve all partner locations. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerPartnerIdLocationLocationIdDayScheduleId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                partner_id: string;
                /** @description Location id. */
                location_id: string;
                /** @description Schedule id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a partner location day schedule. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1PartnerPartnerIdLocationLocationIdDayScheduleId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                partner_id: string;
                /** @description Location id. */
                location_id: string;
                /** @description Schedule id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Update a partner location day schedule. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1PartnerPartnerIdLocationLocationIdDayScheduleId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                partner_id: string;
                /** @description Location id. */
                location_id: string;
                /** @description Schedule id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete a partner location day schedule. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1PartnerPartnerIdLocationLocationIdDaySchedule: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                partner_id: string;
                /** @description Location id. */
                location_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Create a partner location schedule. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerPartnerIdLocationLocationIdDaySchedules: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                partner_id: string;
                /** @description Location id. */
                location_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve all day schedules for a given location. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve an existing partner. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1PartnerId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1Partner"];
            };
        };
        responses: {
            /** @description Update an existing partner. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1PartnerId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete an existing partner. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerIdArtworkInquiryRequests: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Sort order. */
                sort?: "-created_at" | "created_at" | "-outcome" | "outcome" | "likely_to_purchase" | "-likely_to_purchase" | "status" | "-status" | "flagged" | "-flagged" | "contact_gallery" | "-contact_gallery" | "status,-likely_to_purchase,created_at" | "last_message_received_at" | "-last_message_received_at";
            };
            header?: never;
            path: {
                /** @description Partner id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve all artwork inquiry requests by a partner. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1Partner: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1Partner"];
            };
        };
        responses: {
            /** @description Create a new partner. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerPartnerIdDocuments: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
            };
            header?: never;
            path: {
                /** @description Partner id. */
                partner_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description One or more document ids. */
                    document_ids?: string[];
                };
            };
        };
        responses: {
            /** @description Retrieve all documents for a given partner. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerPartnerIdContactId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                partner_id: string;
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a partner contact. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1PartnerPartnerIdContactId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                partner_id: string;
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1PartnerPartnerIdContact"];
            };
        };
        responses: {
            /** @description Update an existing partner contact. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1PartnerPartnerIdContactId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                partner_id: string;
                /** @description Contact id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete an existing partner contact. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1PartnerPartnerIdContact: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                partner_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1PartnerPartnerIdContact"];
            };
        };
        responses: {
            /** @description Create a new partner contact. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1PartnerPartnerIdContactsReposition: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                partner_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Array of partner contact ids. */
                    contact_ids: string[];
                };
            };
        };
        responses: {
            /** @description Reposition partner contacts. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerPartnerIdContacts: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Contact type. */
                contact_type?: string;
                /** @description Partner location object id. */
                partner_location?: string;
                /** @description Only return contacts with given value for can_contact. */
                can_contact?: boolean;
            };
            header?: never;
            path: {
                /** @description Partner id. */
                partner_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve all partner contacts. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1PartnerPartnerIdContactIdContactType: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                partner_id: string;
                /** @description Partner Contact id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1PartnerPartnerIdContactIdContactType"];
            };
        };
        responses: {
            /** @description Update the contact type for a partner contact. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1PartnerPartnerIdCommissionExemptionsCredit: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                partner_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1PartnerPartnerIdCommissionExemptionsCredit"];
            };
        };
        responses: {
            /** @description Add a commission exemption credit in USD. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerIdArtworkArtworkIdGenome: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                id: string;
                /** @description Artwork id. */
                artwork_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve an artwork's genome. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1PartnerIdArtworkArtworkIdGenome: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                id: string;
                /** @description Artwork id. */
                artwork_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1PartnerIdArtworkArtworkIdGenome"];
            };
        };
        responses: {
            /** @description Update an artwork's genome. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerIdArtworks: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Sort order. */
                sort?: "title" | "-title" | "created_at" | "-created_at" | "-created_at,-id" | "deleted_at" | "-deleted_at" | "-iconicity" | "-merchandisability" | "published_at" | "-published_at" | "-partner_updated_at" | "availability" | "-recent_saves_count" | "-last_offerable_activity_at";
                /** @description Return artworks that changed availability after a given timestamp. */
                availability_changed_since?: number;
                /** @description Return artworks by a given artist. */
                artist_id?: string;
                /** @description Return artworks included in a Viewing Room */
                viewing_room_id?: string;
                /** @description Return artworks without an artist. */
                without_artist?: boolean;
                /** @description Return artworks with a given availability. */
                availability?: "for sale" | "not for sale" | "on hold" | "on loan" | "permanent collection" | "sold";
                /** @description Return artworks with for_sale availability. */
                for_sale?: boolean;
                /** @description Return artworks with availability other than not-for-sale. */
                for_sale_sold_on_hold?: boolean;
                /** @description Return artworks with availability other than for_sale. */
                not_for_sale?: boolean;
                /** @description Return only artworks in given published status. */
                published?: boolean;
                /** @description Return artworks published within the last x seconds. */
                published_within?: number;
                /** @description Return artworks that are missing priority metadata */
                missing_priority_metadata?: boolean;
                /** @description Return artworks that are partner-offerable. */
                partner_offerable?: boolean;
            };
            header?: never;
            path: {
                /** @description Partner id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description One or more artwork ids. */
                    artwork_id?: string[];
                    /** @description Return artworks with a given visibility level */
                    visibility_levels?: ("unlisted" | "listed")[];
                    /** @description An array of artwork ids to exclude from the response. */
                    exclude_ids?: string[];
                };
            };
        };
        responses: {
            /** @description Retrieve all partner artworks. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1PartnerIdArtworks: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1PartnerIdArtworks"];
            };
        };
        responses: {
            /** @description Bulk edit all partner artworks. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1PartnerIdArtworksDuplicate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1PartnerIdArtworksDuplicate"];
            };
        };
        responses: {
            /** @description Create an artwork by duplicating attributes from original artwork. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerIdArtworksArtworkIdOfferableActivity: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                id: string;
                /** @description Artwork id. */
                artwork_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve offerable activity for a partner artwork. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerIdArtworksAll: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Return artworks by a given artist. */
                artist_id?: string;
                /** @description Return artworks without an artist. */
                without_artist?: string;
                /** @description Desired format. */
                format?: string;
                /** @description Return artworks with a given availability. */
                availability?: "for sale" | "not for sale" | "on hold" | "on loan" | "permanent collection" | "sold";
                /** @description External id value */
                external_id?: string;
                /** @description Either "ne" for not equal queries or "eq" for equal queries. */
                external_id_operator?: "eq" | "ne";
                /** @description Import Source value */
                import_source?: string;
                /** @description Either "ne" for not equal queries or "eq" for equal queries. */
                import_source_operator?: "eq" | "ne";
                /** @description Return artworks available for buy now */
                ecommerce?: boolean;
                /** @description Return artworks available for make offer */
                offer?: boolean;
                /** @description Return artworks with for_sale availability. */
                for_sale?: boolean;
                /** @description Return artworks with availability other than not-for-sale. */
                for_sale_sold_on_hold?: boolean;
                /** @description Return artworks with availability other than for_sale. */
                not_for_sale?: boolean;
                /** @description Return only artworks in given published status. */
                published?: boolean;
                /** @description Return artworks that belong to a category. */
                category?: string;
                /** @description Return artworks that are at a given partner location. */
                partner_location_id?: string;
                /** @description Return artworks matching a specific price visibility setting. */
                price_visibility?: "hidden" | "exact" | "range";
                /** @description Return artworks missing pricing information. */
                missing_price_info?: boolean;
                /** @description Return artworks that have pricing information but it is hidden or displayed as range. */
                missing_visible_price?: boolean;
                /** @description Return artworks that are missing a medium. */
                missing_medium?: boolean;
                /** @description Return artworks that are missing a category. */
                missing_category?: boolean;
                /** @description Return artworks that are missing a partner genome. */
                missing_partner_genes?: boolean;
                /** @description Include deleted artworks in the results. */
                include_deleted?: boolean;
                /** @description Sort order. */
                sort?: "title" | "-title" | "created_at" | "-created_at" | "-created_at,-id" | "deleted_at" | "-deleted_at" | "-iconicity" | "-merchandisability" | "published_at" | "-published_at" | "-partner_updated_at" | "availability" | "-recent_saves_count" | "-last_offerable_activity_at";
            };
            header?: never;
            path: {
                /** @description Partner id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description One or more artwork ids. */
                    artwork_id?: string[];
                    /** @description Return artworks with a given visibility level */
                    visibility_levels?: ("unlisted" | "listed")[];
                };
            };
        };
        responses: {
            /** @description Retrieve deep data for all partner artworks. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerIdArtistArtistIdNeighbors: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                id: string;
                /** @description Artist id. */
                artist_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Given a partner artist, retrieve the next and previous artists sorted by -sort_id */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerIdArtistArtistId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                id: string;
                /** @description Artist id. */
                artist_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve partner artist. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1PartnerIdArtistArtistId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                id: string;
                /** @description Artist id. */
                artist_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1PartnerIdArtist"];
            };
        };
        responses: {
            /** @description Update an existing partner artist. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1PartnerIdArtistArtistId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                id: string;
                /** @description Artist id. */
                artist_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete a partner artist. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerIdArtists: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Only return artists represented by this partner. */
                represented_by?: string;
                /** @description Only return artists that are to be displayed on the partner profile page. */
                display_on_partner_profile?: string;
                /** @description Sort order. */
                sort?: "_slugs" | "-_slugs" | "created_at" | "-created_at" | "sortable_id" | "-sortable_id" | "-trending";
            };
            header?: never;
            path: {
                /** @description Partner id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve all partner artists. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerIdPartnerArtistsAll: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Only return artists represented by this partner. */
                represented_by?: string;
                /** @description Only return artists that are to be displayed on the partner profile page. */
                display_on_partner_profile?: string;
                /** @description Only return artists that are missing biographies. */
                missing_biography?: boolean;
                /** @description Sort order. */
                sort?: "_slugs" | "-_slugs" | "created_at" | "-created_at" | "sortable_id" | "-sortable_id" | "-trending";
            };
            header?: never;
            path: {
                /** @description Partner id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve deep data for all partner artists. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerIdPartnerArtists: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Only return artists represented by this partner. */
                represented_by?: string;
                /** @description Only return artists that are to be displayed on the partner profile page. */
                display_on_partner_profile?: string;
                /** @description Only returns artists that have published arwtorks. */
                has_published_artworks?: boolean;
                /** @description Return artists that are represented by the partner and those that are not but have published artworks. Do not use in conjunction with represented_by and has_published_artworks. */
                represented_by_or_has_published_artworks?: boolean;
                /** @description Sort order. */
                sort?: "_slugs" | "-_slugs" | "created_at" | "-created_at" | "sortable_id" | "-sortable_id" | "-trending";
            };
            header?: never;
            path: {
                /** @description Partner id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description Artist ids. */
                    artist_ids?: string[];
                };
            };
        };
        responses: {
            /** @description Retrieve all partner artists. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerPartnerIdArtistArtistIdDocumentId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                partner_id: string;
                /** @description Artist id. */
                artist_id: string;
                /** @description Document id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a partner artist document. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1PartnerPartnerIdArtistArtistIdDocumentId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                partner_id: string;
                /** @description Artist id. */
                artist_id: string;
                /** @description Document id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1PartnerPartnerIdArtistArtistIdDocument"];
            };
        };
        responses: {
            /** @description Update a partner artist document. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1PartnerPartnerIdArtistArtistIdDocumentId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                partner_id: string;
                /** @description Artist id. */
                artist_id: string;
                /** @description Document id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete a partner artist document. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1PartnerPartnerIdArtistArtistIdDocument: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                partner_id: string;
                /** @description Artist id. */
                artist_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1PartnerPartnerIdArtistArtistIdDocument"];
            };
        };
        responses: {
            /** @description Create a partner artist document. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerPartnerIdArtistArtistIdDocuments: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
            };
            header?: never;
            path: {
                /** @description Partner id. */
                partner_id: string;
                /** @description Artist id. */
                artist_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve all partner artist documents for a given partner and artist. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1PartnerPartnerIdArtistArtistIdPartnerArtistArtworksReposition: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                partner_id: string;
                /** @description Artist id. */
                artist_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Array of partner artist artwork ids. */
                    partner_artist_artwork_ids: string[];
                };
            };
        };
        responses: {
            /** @description Reposition partner artist artworks. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerPartnerIdArtistArtistIdPartnerArtistArtworkIdNeighbors: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                partner_id: string;
                /** @description Artist id. */
                artist_id: string;
                /** @description Artwork id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Given an artwork, retrieve the next and previous partner artist artworks sorted by position */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerPartnerIdArtistArtistIdPartnerArtistArtworks: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Sort order. */
                sort?: "position" | "-position";
            };
            header?: never;
            path: {
                /** @description Partner id. */
                partner_id: string;
                /** @description Artist id. */
                artist_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve partner published artworks by a given artist. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerPartnerIdArtistArtistIdPartnerArtistArtworksAll: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Return artworks with a given availability. */
                availability?: "for sale" | "not for sale" | "on hold" | "on loan" | "permanent collection" | "sold";
                /** @description Return artworks with for_sale availability. */
                for_sale?: boolean;
                /** @description Return artworks with availability other than not-for-sale. */
                for_sale_sold_on_hold?: boolean;
                /** @description Return artworks with availability other than for_sale. */
                not_for_sale?: boolean;
                /** @description Return only artworks in given published status. */
                published?: boolean;
                /** @description Sort order. */
                sort?: "position" | "-position";
            };
            header?: never;
            path: {
                /** @description Partner id. */
                partner_id: string;
                /** @description Artist id. */
                artist_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description Return artworks with a given visibility level */
                    visibility_levels?: ("unlisted" | "listed")[];
                };
            };
        };
        responses: {
            /** @description Retrieve full json of all partner artist artworks for a given partner and artist. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerPartnerIdArtistArtistIdArtworks: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Sort order. */
                sort?: "title" | "-title" | "created_at" | "-created_at" | "-created_at,-id" | "deleted_at" | "-deleted_at" | "-iconicity" | "-merchandisability" | "published_at" | "-published_at" | "-partner_updated_at" | "availability" | "-recent_saves_count" | "-last_offerable_activity_at";
            };
            header?: never;
            path: {
                /** @description Partner id. */
                partner_id: string;
                /** @description Artist id. */
                artist_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve partner published artworks by a given artist. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerPartnerIdArtistArtistIdArtworksAll: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Return artworks with a given availability. */
                availability?: "for sale" | "not for sale" | "on hold" | "on loan" | "permanent collection" | "sold";
                /** @description Return artworks available for buy now */
                ecommerce?: boolean;
                /** @description Return artworks available for make offer */
                offer?: boolean;
                /** @description Return artworks with for_sale availability. */
                for_sale?: boolean;
                /** @description Return artworks with availability other than not-for-sale. */
                for_sale_sold_on_hold?: boolean;
                /** @description Return artworks with availability other than for_sale. */
                not_for_sale?: boolean;
                /** @description Return only artworks in given published status. */
                published?: boolean;
                /** @description Return artworks that are at a given partner location. */
                partner_location_id?: string;
                /** @description Sort order. */
                sort?: "title" | "-title" | "created_at" | "-created_at" | "-created_at,-id" | "deleted_at" | "-deleted_at" | "-iconicity" | "-merchandisability" | "published_at" | "-published_at" | "-partner_updated_at" | "availability" | "-recent_saves_count" | "-last_offerable_activity_at";
            };
            header?: never;
            path: {
                /** @description Partner id. */
                partner_id: string;
                /** @description Artist id. */
                artist_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description Return artworks with a given visibility level */
                    visibility_levels?: ("unlisted" | "listed")[];
                };
            };
        };
        responses: {
            /** @description Retrieve full json of all artworks for a given partner and artist. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerPartnerIdAlbumId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                partner_id: string;
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a partner album. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1PartnerPartnerIdAlbumId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                partner_id: string;
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1PartnerPartnerIdAlbum"];
            };
        };
        responses: {
            /** @description Update an existing partner album. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1PartnerPartnerIdAlbumId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                partner_id: string;
                /** @description Album id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete an existing album. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1PartnerIdAlbum: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1PartnerIdAlbum"];
            };
        };
        responses: {
            /** @description Create a new partner album. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerPartnerIdAlbums: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Sort order. */
                sort?: "created_at" | "-created_at" | "name" | "-name";
            };
            header?: never;
            path: {
                /** @description Partner id. */
                partner_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve all partner albums. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1PartnerPartnerIdAlbumPartnerAlbumIdArtworkId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                partner_id: string;
                /** @description Partner album id. */
                partner_album_id: string;
                /** @description Artwork id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1PartnerPartnerIdAlbumPartnerAlbumIdArtwork"];
            };
        };
        responses: {
            /** @description Update an artwork within a partner album. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1PartnerPartnerIdAlbumPartnerAlbumIdArtworkId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                partner_id: string;
                /** @description Partner album id. */
                partner_album_id: string;
                /** @description Artwork id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1PartnerPartnerIdAlbumPartnerAlbumIdArtwork"];
            };
        };
        responses: {
            /** @description Add an artwork to a partner album. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1PartnerPartnerIdAlbumPartnerAlbumIdArtworkId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                partner_id: string;
                /** @description Partner album id. */
                partner_album_id: string;
                /** @description Artwork id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Remove an artwork from a partner album. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1PartnerPartnerIdAlbumPartnerAlbumIdReposition: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                partner_id: string;
                /** @description Partner album id. */
                partner_album_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Array of artwork ids in the album. */
                    artwork_ids: string[];
                };
            };
        };
        responses: {
            /** @description Reposition artworks in a partner album. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerPartnerIdAlbumPartnerAlbumIdArtworks: {
        parameters: {
            query?: {
                /** @description Pass to filter out unpublished works. */
                published?: boolean;
            };
            header?: never;
            path: {
                /** @description Partner id. */
                partner_id: string;
                /** @description Partner album id. */
                partner_album_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve all artworks at a partner album sorted by position. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerPartnerIdViewingRooms: {
        parameters: {
            query?: {
                viewing_room_id?: string;
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
            };
            header?: never;
            path: {
                partner_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return partner's viewing rooms. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerPartnerIdPartnerSearchCriteriaHits: {
        parameters: {
            query?: {
                page?: number;
                size?: number;
            };
            header?: never;
            path: {
                partner_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description get PartnerSearchCriteriaHit(s) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerPartnerIdPartnerSearchCriteriaId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                partner_id: number;
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description get PartnerSearchCriteria(s) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerPartnerIdPartnerSearchCriterias: {
        parameters: {
            query?: {
                page?: number;
                size?: number;
                /** @description When true, include total count in headers */
                total_count?: boolean;
                /** @description Artist id. */
                artist_id?: string;
            };
            header?: never;
            path: {
                partner_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description get PartnerSearchCriteria(s) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerPartnerIdInquiryRequestInquiryRequestId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                partner_id: string;
                /** @description Inquiry Request id. */
                inquiry_request_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve details for existing inquiry request. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerPartnerIdInquiryRequests: {
        parameters: {
            query?: {
                /** @description Inquired object type. Limits to returning only ArtworkInquiryRequests or PartnerShowInquiryRequests. */
                type?: "artwork" | "partner_show";
                /** @description Id of the inquired on object. Artwork or PartnerShow id. */
                inquireable_id?: string;
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Sort order. */
                sort?: "-created_at" | "created_at" | "-outcome" | "outcome" | "likely_to_purchase" | "-likely_to_purchase" | "status" | "-status" | "flagged" | "-flagged" | "contact_gallery" | "-contact_gallery" | "status,-likely_to_purchase,created_at" | "last_message_received_at" | "-last_message_received_at";
            };
            header?: never;
            path: {
                /** @description Partner id. */
                partner_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve all inquiry_requests for a given partner. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerPartnerIdInquiryRequestInquiryRequestIdCollectorProfile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                partner_id: string;
                /** @description Inquiry Request id. */
                inquiry_request_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve details of a collector profile of an inquiry request */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerPartnerIdCreditCardCreditCardId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                partner_id: string;
                /** @description Credit card id. */
                credit_card_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve an existing partner credit card. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1PartnerPartnerIdCreditCardCreditCardId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                partner_id: string;
                /** @description Credit Card id. */
                credit_card_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Deactivates a partner credit card. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1PartnerPartnerIdCreditCardCreditCardIdDefault: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                partner_id: string;
                /** @description Credit card id. */
                credit_card_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Set an existing partner credit card to default. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerPartnerIdCreditCards: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                partner_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve all active partner credit cards. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1PartnerPartnerIdCreditCard: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                partner_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1PartnerPartnerIdCreditCard"];
            };
        };
        responses: {
            /** @description Creates a new partner credit card with a given token attached to the partner's customer account. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1PartnerPartnerIdOptInArtworksIntoCommerce: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                partner_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1PartnerPartnerIdOptInArtworksIntoCommerce"];
            };
        };
        responses: {
            /** @description Opt artworks into Commerce and Make Offer listing options */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1PartnerPartnerIdCommerceOptInEligibleArtworksReport: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                partner_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1PartnerPartnerIdCommerceOptInEligibleArtworksReport"];
            };
        };
        responses: {
            /** @description Send an email to the current user containing artwork data */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1PartnerPartnerIdBankAccountBankAccountIdRefresh: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner ID. */
                partner_id: string;
                /** @description Bank Account id. */
                bank_account_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Refresh bank account. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1PartnerPartnerIdBankAccount: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner ID. */
                partner_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1PartnerPartnerIdBankAccount"];
            };
        };
        responses: {
            /** @description Add a bank account to a partner. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1PartnerPartnerIdBankAccountBankAccountId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                partner_id: string;
                /** @description Bank Account id. */
                bank_account_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Deactivates a partner bank account. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1PartnerPartnerIdBankAccountBankAccountIdDefault: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                partner_id: string;
                /** @description Bank account id. */
                bank_account_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Set an existing partner bank account to default. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerPartnerIdBankAccounts: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                partner_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve all active partner bank accounts. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1PartnerPartnerIdBankAccountSetupIntent: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                partner_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Create a setup intent for a partner and returns the client secret of it. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerPartnerIdArtistsWithAlertCounts: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Sort order. */
                sort?: "sortable_id" | "-sortable_id";
            };
            header?: never;
            path: {
                partner_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a list of all artists in a partners roster with their alert counts. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1PartnerIdUnpublishAllWorks: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Unpublish all artworks for the partner. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1PartnerIdNetsuiteSync: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Update partner based off of associated Customer in Netsuite */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1PartnerIdRebuild: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Rebuild counts and determine access permissions for an existing partner. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1PartnerIdPartnerFlags: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1PartnerIdPartnerFlags"];
            };
        };
        responses: {
            /** @description Sets (or unsets) a partner flag. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerIdAll: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve deep data for an existing partner. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerPartnerIdShowShowIdEvents: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Sort order. */
                sort?: "end_at" | "-end_at" | "start_at" | "-start_at";
            };
            header?: never;
            path: {
                partner_id: number;
                show_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve all partner show events for a given show. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1PartnerPartnerIdShowShowIdEvent: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                partner_id: number;
                show_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1PartnerPartnerIdShowShowIdEvent"];
            };
        };
        responses: {
            /** @description Create a partner show event. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerPartnerIdShowShowIdEventId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                partner_id: number;
                show_id: number;
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a partner show event. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1PartnerPartnerIdShowShowIdEventId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                partner_id: number;
                show_id: number;
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Update a partner show event. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1PartnerPartnerIdShowShowIdEventId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                partner_id: number;
                show_id: number;
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete a partner show event. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerCategories: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Partner Category Type (Gallery|Institution). */
                category_type?: string;
                /** @description Filter by whether category is internal. */
                internal?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve all partner categories. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerCategoryId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner Category id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a partner category. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1PartnerCategoryId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1PartnerCategory"];
            };
        };
        responses: {
            /** @description Update an existing partner category. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1PartnerCategoryId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner Category id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete a partner category. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1PartnerCategory: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1PartnerCategory"];
            };
        };
        responses: {
            /** @description Create a new partner category. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerCommunications: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve partner Api_v1_Partner_Communications. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerCommunicationId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner Communication id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve an existing partner communication. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1PartnerCommunicationId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner Communication id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1PartnerCommunication"];
            };
        };
        responses: {
            /** @description Update an existing partner communication. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1PartnerCommunicationId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner Communication id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete an existing partner communication. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1PartnerCommunicationIdPartnerContactPartnerContactId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner Communication id. */
                id: string;
                /** @description Partner Contact id. */
                partner_contact_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1PartnerCommunicationIdPartnerContact"];
            };
        };
        responses: {
            /** @description Add a partner contact to a partner communication. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1PartnerCommunicationIdPartnerContactPartnerContactId: {
        parameters: {
            query?: {
                name?: string;
            };
            header?: never;
            path: {
                /** @description Partner Communication id. */
                id: string;
                /** @description Partner Contact id. */
                partner_contact_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Remove a partner contact to a partner communication. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerCommunicationIdPartnerContacts: {
        parameters: {
            query?: {
                name?: string;
                /** @description Partner identifier. */
                partner?: string;
            };
            header?: never;
            path: {
                /** @description Partner Communication id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List partner contacts for a partner communication. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1PartnerCommunication: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1PartnerCommunication"];
            };
        };
        responses: {
            /** @description Create a partner communication. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerGeneCategories: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a map of partner gene categories and genes. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1PartnerOffer: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1PartnerOffer"];
            };
        };
        responses: {
            /** @description Create a partner offer. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerOfferPartnerOfferId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner offer id. */
                partner_offer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Show a partner offer. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerOffers: {
        parameters: {
            query: {
                /** @description Artwork ID. */
                artwork_id: string;
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Sort order. */
                sort?: "created_at" | "-created_at" | "end_at" | "-end_at";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List partner offers. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerShowEvents: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Partner id. */
                partner_id?: string;
                /** @description Return partner show events that are 'current', 'running', 'closed' or 'upcoming'. */
                status?: string;
                /** @description Sort order. */
                sort?: "end_at" | "-end_at" | "start_at" | "-start_at";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve all partner show events. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerSubscriptionCharges: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Partner ID. */
                partner_id?: string;
                /** @description Filter the charges by their state. */
                state?: "pending" | "completed" | "failed" | "refunded" | "deferred" | "disputed" | "waived" | "archived" | "payment processing";
                /** @description Filter the charges by subscription. */
                subscription_id?: string;
                /** @description Start of bill date range (YYYY-MM-DD). */
                bill_date_from?: string;
                /** @description End of bill date range (YYYY-MM-DD). */
                bill_date_to?: string;
                /** @description Sort order. */
                sort?: "-created_at" | "created_at" | "-bill_date" | "bill_date";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description Return charges with given payment methods */
                    payment_method?: ("check" | "credit card" | "other" | "wire transfer" | "us bank account" | "credit card")[];
                };
            };
        };
        responses: {
            /** @description Retrieve partner subscription charges. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1PartnerSubscriptionCharge: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1PartnerSubscriptionCharge"];
            };
        };
        responses: {
            /** @description Create a partner subscription charge. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1PartnerSubscriptionChargeIdLineItemLineItemId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner Subscription Charge Line Item id. */
                line_item_id: string;
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Remove a line item from a charge. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerSubscriptionChargeId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve an existing partner subscription charge. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1PartnerSubscriptionChargeId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1PartnerSubscriptionCharge"];
            };
        };
        responses: {
            /** @description Update an existing partner subscription charge. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1PartnerSubscriptionChargeId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete a partner subscription charge */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1PartnerSubscriptionChargeIdLineItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1PartnerSubscriptionChargeIdLineItem"];
            };
        };
        responses: {
            /** @description Add a line item to a charge. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1PartnerSubscriptionChargeIdReceivePayment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1PartnerSubscriptionChargeIdReceivePayment"];
            };
        };
        responses: {
            /** @description Mark an existing charge as completed. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1PartnerSubscriptionChargeIdRetry: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retry an existing failed partner subscription charge. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1PartnerSubscriptionChargeIdBill: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Bill an existing partner subscription charge. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerSubscriptionEvents: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Sort order. */
                sort?: "-created_at" | "created_at";
                /** @description Partner id. */
                partner_id?: string;
                /** @description Partner Susbscription Charge id. */
                charge_id?: string;
                /** @description Event type. One of the PartnerSubscriptionEvent::Types values. */
                type?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve partner subscription events. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerSubscriptionEventId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner Subscription Event id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve an existing partner subscription event. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerSubscriptionInvoices: {
        parameters: {
            query: {
                /** @description Partner id. */
                partner_id: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve partner subscription invoices. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerSubscriptionInvoiceId: {
        parameters: {
            query: {
                /** @description Partner id. */
                partner_id: string;
            };
            header?: never;
            path: {
                /** @description Invoice id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a partner subscription invoice. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerSubscriptionPlans: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Sort order. */
                sort?: "-price_in_cents" | "price_in_cents";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve partner subscription plans. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerSubscriptionPlanId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner Subscription Plan id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve an existing partner subscription plan. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1PartnerSubscriptionPlanId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner Subscription Plan id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1PartnerSubscriptionPlan"];
            };
        };
        responses: {
            /** @description Update an existing partner subscription plan. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1PartnerSubscriptionPlanId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner Subscription Plan id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete an existing partner subscription plan. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1PartnerSubscriptionPlan: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1PartnerSubscriptionPlan"];
            };
        };
        responses: {
            /** @description Create a partner subscription plan. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerSubscriptions: {
        parameters: {
            query?: {
                /** @description Partner id to filter for. */
                partner_id?: string;
                /** @description Subscription plan id to filter for. */
                plan_id?: string;
                /** @description Only return subscriptions for partners that have a given admin. */
                admin_id?: string;
                /** @description Only return subscriptions for partners that were outreached by a given admin. */
                outreach_admin_id?: string;
                /** @description Only return subscriptions for partners that have a given referral contact. */
                referral_contact_id?: string;
                /** @description Include only active subscriptions. */
                active?: boolean;
                /** @description Include only pending subscriptions. */
                pending?: boolean;
                /** @description Include only upcoming subscriptions. */
                upcoming?: boolean;
                /** @description Include only current subscriptions. */
                current?: boolean;
                /** @description Include only expired subscriptions. */
                expired?: boolean;
                /** @description Include only churned subscriptions. */
                churned?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve partner subscriptions. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1PartnerSubscriptions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1PartnerSubscriptions"];
            };
        };
        responses: {
            /** @description Add a partner to a partner subscription plan. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerSubscriptionId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner subscription id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a partner subscription. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1PartnerSubscriptionId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1PartnerSubscription"];
            };
        };
        responses: {
            /** @description Updates a partner subscription. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1PartnerSubscriptionId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner subscription id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete an existing not-active subscription. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1PartnerSubscriptionIdTerminate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner subscription id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1PartnerSubscriptionIdTerminate"];
            };
        };
        responses: {
            /** @description Terminates a partner subscription. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1PartnerSubscriptionIdActivate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner subscription id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1PartnerSubscriptionIdActivate"];
            };
        };
        responses: {
            /** @description Activates a partner subscription. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerArtists: {
        parameters: {
            query: {
                /** @description Artist ID */
                artist_id: string;
                /** @description Filter to only representation relationships when true */
                represented_by?: boolean;
                /** @description When true, filter to only relationships that can be displayed on the front end. */
                display_on_partner_profile?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description Filter to partners matching any of these 0 or more category ids/slugs */
                    partner_category?: string[];
                };
            };
        };
        responses: {
            /** @description Retrieve partner/artist pairs */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerArtistId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner Artist id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a partner artist. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1PartnerArtistId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner Artist id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1PartnerArtist"];
            };
        };
        responses: {
            /** @description Update a partner artist. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1Partners: {
        parameters: {
            query?: {
                /** @description Only include partners with 'full' profiles. */
                has_full_profile?: boolean;
                /** @description Only return partners that are managed by a given admin (admin-only). */
                admin_id?: string;
                /** @description Only return partners of a given contract_type. (admin-only). */
                contract_type?: "General" | "Subscription" | "Fair" | "Custom";
                /** @description Only include partners belonging to a partner subscription plan (admin-only). */
                partner_subscription_plan_id?: string;
                /** @description Coordinates to find partners closest to. */
                near?: string;
                /** @description Max distance to use when geo-locating partners, defaults to 75km. */
                max_distance?: string;
                /** @description Comma-delineated list of lat,lng pairs making up a polygon to search inside. */
                geo_within?: string;
                /** @description Only include partners eligible for carousel. */
                eligible_for_carousel?: boolean;
                /** @description Only include partners eligible for primary (visible) bucket. */
                eligible_for_primary_bucket?: boolean;
                /** @description Only include partners eligible for secondary bucket. */
                eligible_for_secondary_bucket?: boolean;
                /** @description Only include partners eligible for listing. */
                eligible_for_listing?: boolean;
                /** @description Exclude partners the user follows (only effective when `include_partners_with_followed_artists` is set to true). */
                exclude_followed_partners?: boolean;
                /** @description If true, will only return partners that list artists that the user follows */
                include_partners_with_followed_artists?: boolean;
                /** @description Result page */
                page?: number;
                /** @description Maximum number of results to retrieve. */
                size?: number;
                /** @description Term to match. */
                term?: string;
                /** @description Sort order. */
                sort?: "_slugs" | "-_slugs" | "created_at" | "-created_at" | "sortable_id" | "-sortable_id" | "relative_size" | "-relative_size" | "-published_at" | "-random_score" | "distance";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description Aggregations. */
                    aggregations?: string[];
                    /** @description Only return partners of the specified _type(s). */
                    type?: string[];
                    /** @description Only return partners of the specified partner categories. Accepts list of slugs. */
                    partner_categories?: string[];
                    /** @description Returns only partners that match passed in ids, ignores other params. */
                    id?: string[];
                };
            };
        };
        responses: {
            /** @description Retrieve all partners. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1PartnerShowPartnerShowIdImagesReposition: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner show id. */
                partner_show_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Array of partner show image ids. */
                    image_ids: string[];
                };
            };
        };
        responses: {
            /** @description Reposition partner show images. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerShowPartnerShowIdImages: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Only include non-covers when set to false. */
                default?: boolean;
                /** @description Sort order. */
                sort?: "position";
            };
            header?: never;
            path: {
                /** @description Partner Show id. */
                partner_show_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve partner show's images. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1PartnerShowPartnerShowIdImageIdArtistArtistId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner Show id. */
                partner_show_id: string;
                /** @description Image id. */
                id: string;
                /** @description Artwork id. */
                artist_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Remove an artist from a partner show's image. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1PartnerShowPartnerShowIdImageIdArtworkArtworkId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner Show id. */
                partner_show_id: string;
                /** @description Image id. */
                id: string;
                /** @description Artwork id. */
                artwork_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Remove an artwork from a partner show's image. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1PartnerShowPartnerShowIdImageId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner Show id. */
                partner_show_id: string;
                /** @description Image id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1PartnerShowPartnerShowIdImage"];
            };
        };
        responses: {
            /** @description Update a partner show's image. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1PartnerShowPartnerShowIdImageId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner Show id. */
                partner_show_id: string;
                /** @description Image id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Remove an image from a partner show. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1PartnerShowPartnerShowIdImage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner Show id. */
                partner_show_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1PartnerShowPartnerShowIdImage"];
            };
        };
        responses: {
            /** @description Add an image to a partner show. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "getApiV1PartnerShowPartnerShowIdDefaultImage(ImageVersion)": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner Show id. */
                partner_show_id: string;
                image_version: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get a partner show's default (cover) image. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "getApiV1PartnerShowPartnerShowIdImageId(ImageVersion)": {
        parameters: {
            query?: {
                /** @description Filename to download the image as. */
                filename?: string;
            };
            header?: never;
            path: {
                /** @description Partner Show id. */
                partner_show_id: string;
                /** @description Image id. */
                id: string;
                image_version: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get an partner show's image (install shot). */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1Periods: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Sort order. */
                sort?: "name" | "-name" | "created_at" | "-created_at";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve periods. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1Period: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1Period"];
            };
        };
        responses: {
            /** @description Create a new period */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PeriodId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Period id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a period. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1PeriodId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Period id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1Period"];
            };
        };
        responses: {
            /** @description Update an existing period */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1PeriodId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Period id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete an existing period */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "getApiV1ProfileIdImage(ImageVersion)": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Profile id. */
                id: string;
                /** @description Image version. */
                image_version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get a profile's image. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1ProfileId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a profile. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1ProfileId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Profile id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1Profile"];
            };
        };
        responses: {
            /** @description Update a profile. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1ProfileId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Profile id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete a profile. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1Profile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1Profile"];
            };
        };
        responses: {
            /** @description Create a profile. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1ProfileIdCoverImage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Profile id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve profile cover image. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1ProfileIdCoverImage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Profile id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1ProfileIdCoverImage"];
            };
        };
        responses: {
            /** @description Update profile cover. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1ProfileIdCoverImage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Profile id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1ProfileIdCoverImage"];
            };
        };
        responses: {
            /** @description Change profile cover. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1ProfileIdCoverImage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Profile id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete profile cover image. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1ProfileIdIcon: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Profile id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve profile icon. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1ProfileIdIcon: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Profile id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1ProfileIdIcon"];
            };
        };
        responses: {
            /** @description Update profile icon. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1ProfileIdIcon: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Profile id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1ProfileIdIcon"];
            };
        };
        responses: {
            /** @description Change profile icon. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1ProfileIdIcon: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Profile id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete profile icon. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1Purchases: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Only return purchases with no owner_type. */
                without_owner_type?: boolean;
                /** @description Only return purchases with no owner. */
                without_owner?: boolean;
                /** @description Only return purchases belonging to partners that are managed by a given admin. */
                admin_id?: string;
                /** @description Sort order. */
                sort?: "created_at" | "-created_at" | "sale_date" | "-sale_date" | "owner_type" | "-owner_type" | "owner_id" | "-owner_id" | "artwork_id" | "-artwork_id";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve purchases. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1PurchaseId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Purchase id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1Purchase"];
            };
        };
        responses: {
            /** @description Update a purchase. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1PurchaseId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Purchase id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete an existing purchase. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1Purchase: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1Purchase"];
            };
        };
        responses: {
            /** @description Create a purchase object for artwork sale. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1RelatedPosts: {
        parameters: {
            query?: {
                /** @description Sort order. */
                sort?: "created_at" | "-created_at";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description Artworks. */
                    artwork?: string[];
                    /** @description Artists. */
                    artist?: string[];
                };
            };
        };
        responses: {
            /** @description Return related posts, deprecated. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1RelatedArtworks: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description If true, will only include for sale artworks. */
                for_sale?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": {
                    /** @description Artwork id. */
                    artwork_id: string[];
                };
            };
        };
        responses: {
            /** @description Related artworks */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1RelatedSales: {
        parameters: {
            query?: {
                /** @description Artwork id. */
                artwork_id?: string;
                /** @description Artist id. */
                artist_id?: string;
                /** @description If true, will restrict to only live sales. */
                live?: string;
                /** @description If true, will restrict to only auctions. */
                is_auction?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description Artwork id. */
                    artwork?: string[];
                };
            };
        };
        responses: {
            /** @description Sales related to an artwork. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1RelatedShows: {
        parameters: {
            query?: {
                /** @description Artwork id. */
                artwork_id?: string;
                /** @description Artist id. */
                artist_id?: string;
                /** @description Fair id. */
                fair_id?: string;
                /** @description Whether to include reference shows (default: false). */
                is_reference?: boolean;
                /** @description True/false to return solo shows, or group shows. */
                solo_show?: boolean;
                /** @description True/false to return only institutional shows, or gallery shows. */
                is_institution?: boolean;
                /** @description True/false to return fair booths, or non fair booths. */
                at_a_fair?: boolean;
                /** @description True/false to return top tier shows, or lower tier ones. */
                top_tier?: boolean;
                /** @description True/false to return highest tier shows, or lower tier ones. */
                highest_tier?: boolean;
                /** @description If true, returns only active shows. */
                active?: boolean;
                /** @description Can filter by closed, running, and upcoming. */
                status?: "closed" | "running" | "upcoming";
                /** @description Whether to include displayable shows (default: all). */
                displayable?: boolean;
                /** @description If false, will include all shows (default: true) */
                visible_to_public?: boolean;
                /** @description If true, will include only shows with a location, if false only shows without a location. */
                has_location?: boolean;
                /** @description Result page */
                page?: string;
                /** @description Maximum number of results to retrieve. */
                size?: number;
                /** @description Sort order. */
                sort?: "end_at" | "-end_at" | "start_at" | "-start_at" | "-relevance,-start_at";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description Artwork id. */
                    artwork?: string[];
                    /** @description Artist id. */
                    artist?: string[];
                };
            };
        };
        responses: {
            /** @description Shows related to an artwork, or an artist. Optionally restricts shows to booths at a fair. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1RelatedFairs: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": {
                    /** @description Artwork id. */
                    artwork: string[];
                };
            };
        };
        responses: {
            /** @description Fairs related to an artwork. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1RelatedLayerIdArtists: {
        parameters: {
            query?: {
                /** @description If true, will only include artists with at least one published work. */
                exclude_artists_without_artworks?: boolean;
                /** @description Min number of for sale works */
                min_forsale_artworks?: number;
            };
            header?: never;
            path: {
                /** @description Layer id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": {
                    /** @description Artists. */
                    artist: string[];
                };
            };
        };
        responses: {
            /** @description Search within a layer. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1RelatedLayerTypeIdArtworks: {
        parameters: {
            query?: {
                /** @description Number of artworks to return. */
                size?: number;
            };
            header?: never;
            path: {
                /** @description Layer id. */
                id: string;
                type: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": {
                    /** @description Artworks. */
                    artwork: string[];
                };
            };
        };
        responses: {
            /** @description Search within a layer. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1RelatedLayers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description Artists. */
                    artist?: string[];
                    /** @description Artworks. */
                    artwork?: string[];
                };
            };
        };
        responses: {
            /** @description Retrieve search layers. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1RelatedGenes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": {
                    /** @description Artists. */
                    artist: string[];
                };
            };
        };
        responses: {
            /** @description Return related genes. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1RelatedArtists: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": {
                    /** @description Artists. */
                    artist: string[];
                };
            };
        };
        responses: {
            /** @description Return similar artists. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1RepresentativeIdArtworkInquiryRequests: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Sort order. */
                sort?: "-created_at" | "created_at" | "-outcome" | "outcome" | "likely_to_purchase" | "-likely_to_purchase" | "status" | "-status" | "flagged" | "-flagged" | "contact_gallery" | "-contact_gallery" | "status,-likely_to_purchase,created_at" | "last_message_received_at" | "-last_message_received_at";
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve all artwork inquiries the admin represents. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1SaleAgreementsId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The sale agreement's ID. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get an individual sale agreement. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1SaleAgreementsId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the sale agreement. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1SaleAgreements"];
            };
        };
        responses: {
            /** @description Update a sale agreement. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1SaleAgreements: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Sort order. */
                sort?: "created_at" | "-created_at" | "status" | "-status";
                /** @description Return the sale agreements with the provided status. */
                status?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get all sale_agreements, optionally by status. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1SaleAgreements: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1SaleAgreements"];
            };
        };
        responses: {
            /** @description Create a new sale agreement. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1SaleArtworkId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Sale artwork id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve sale_artwork. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1SaleArtworks: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Sort order. */
                sort?: "position" | "end_at" | "-end_at" | "timely_at";
                /** @description Artwork id. */
                artwork_id?: string;
                /** @description If true, will filter sale artworks the user has watched */
                include_watched_artworks?: boolean;
                /** @description If true, will filter sale artworks by only artists followed by current user or passed-in user_id */
                include_artworks_by_followed_artists?: boolean;
                /** @description If true, does not include artworks for which sale has ended */
                exclude_closed_lots?: boolean;
                /** @description Sale Status */
                live_sale?: boolean;
                /** @description Filter only for sale artworks that are currently accept bids. */
                biddable_sale?: boolean;
                /** @description When true, only return auction artworks. */
                is_auction?: boolean;
                /** @description When present, will return sale artworks for the given user. If not present, will return sale artworks for the current user. */
                user_id?: string;
                /** @description If true, include sale artworks that are withdrawn for admins/trusted apps. */
                withdrawn?: boolean;
                /** @description Works that are marketable. */
                marketable?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve sale_artworks for a given artwork. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1SaleIdSaleAgreement: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Sale id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get the sale agreement associated with the sale */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1SaleIdUnpublishArtworks: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Sale id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Batch un-publish all of the artworks in a sale. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1SaleIdPublishArtworks: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Sale id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Batch publish all of the artworks in a sale. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1SaleIdEndSale: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Sale id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description End sale on demand. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1SaleIdRegisteredBiddersReport: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Sale id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Deliver registered bidders report to admins. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1SaleId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Sale id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve an existing sale. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1SaleId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Sale id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1Sale"];
            };
        };
        responses: {
            /** @description Update an existing sale. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1SaleId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Sale id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete an existing sale. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1Sale: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1Sale"];
            };
        };
        responses: {
            /** @description Create a sale. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1SaleSaleIdSaleArtworkArtworkIdCalculatedCost: {
        parameters: {
            query: {
                /** @description Bid amount in cents. */
                bid_amount_cents: number;
            };
            header?: never;
            path: {
                /** @description Sale id. */
                sale_id: string;
                /** @description Artwork id. */
                artwork_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get the calculated cost for an artwork in a sale. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1SaleSaleIdSaleArtworkArtworkId: {
        parameters: {
            query?: {
                /** @description If true, include sale artworks that are withdrawn for admins/trusted apps. */
                withdrawn?: boolean;
            };
            header?: never;
            path: {
                /** @description Sale id. */
                sale_id: string;
                /** @description Artwork id. */
                artwork_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get a sale artwork from a sale. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1SaleSaleIdSaleArtworkArtworkId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Sale id. */
                sale_id: string;
                /** @description Artwork id. */
                artwork_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1SaleSaleIdSaleArtwork"];
            };
        };
        responses: {
            /** @description Update a sale artwork. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1SaleSaleIdSaleArtwork: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Sale id. */
                sale_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1SaleSaleIdSaleArtwork"];
            };
        };
        responses: {
            /** @description Add an artwork to a sale. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1SaleSaleIdSaleArtworks: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description If present, will filter lots to either open or closed. */
                status?: "open" | "closed";
                /** @description Only return sale artworks that have bids. */
                has_bids?: boolean;
                /** @description If true, include sale artworks that are withdrawn for admins/trusted apps. */
                withdrawn?: boolean;
                /** @description Sort order. */
                sort?: "position" | "-position";
            };
            header?: never;
            path: {
                /** @description Sale id. */
                sale_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description Returns these objects if passed in. */
                    ids?: string[];
                    /** @description An array of sale artwork database ids to exclude from the response. */
                    exclude_ids?: string[];
                    /** @description An array of artwork database ids to include in the response. */
                    artwork_ids?: string[];
                };
            };
        };
        responses: {
            /** @description Retrieve artworks within a given sale. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1Sales: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Returns sales owned by this partner. */
                partner_id?: string;
                /** @description Formats result for batched queries, preserves nulls in the list and maintains order in `id`. */
                batched?: boolean;
                /** @description Returns sales the user has registered for if true, returns sales the user has not registered for if false. */
                registered?: boolean;
                /** @description Returns sales filtered to a particular type of auction. */
                auction_state?: "open" | "closed" | "upcoming";
                /** @description Returns sales that are Artsy-licensed if true, returns sales that are not Artsy-licensed if false. */
                is_artsy_licensed?: boolean;
                /** @description Returns sales that are benefit auctions if true, returns sales that are not benefit auctions if false. */
                is_benefit?: boolean;
                /** @description Returns sales that start at or after this time. */
                min_start_at?: string;
                /** @description Sort order. */
                sort?: "id" | "-id" | "name" | "-name" | "created_at" | "-created_at" | "start_at" | "-start_at" | "end_at" | "-end_at" | "eligible_sale_artworks_count" | "-eligible_sale_artworks_count" | "timely_at" | "-timely_at" | "timely_at,name" | "-timely_at,name" | "is_artsy_licensed,timely_at,name" | "-is_artsy_licensed,timely_at,name";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": {
                    /** @description Restrict to this subset of sales. `sort` will be respected if provided. With `batched`, order is preserved. */
                    id: string[];
                };
            };
        };
        responses: {
            /** @description Retrieve sales. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1SearchFilteredTypeIdOptions: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                type: number;
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Filter options. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1SearchFilteredTypeId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                type: number;
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Filtered gene/tag/fair/artist search. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1SetsContains: {
        parameters: {
            query: {
                /** @description Item type. */
                item_type: string;
                /** @description Item id. */
                item_id: string;
                /** @description Sort order. */
                sort?: "_id" | "-_id" | "key" | "-key" | "created_at" | "-created_at" | "owner_type" | "-owner_type" | "owner_id" | "-owner_id" | "item_type" | "-item_type" | "name" | "-name" | "internal_name" | "-internal_name";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get all sets, that contain the given item. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1Sets: {
        parameters: {
            query?: {
                /** @description Sort order. */
                sort?: "_id" | "-_id" | "key" | "-key" | "created_at" | "-created_at" | "owner_type" | "-owner_type" | "owner_id" | "-owner_id" | "item_type" | "-item_type" | "name" | "-name" | "internal_name" | "-internal_name";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get all sets, optionally by label, item_type, or owner. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1SetIdItemItemId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Set id. */
                id: string;
                /** @description Item id. */
                item_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1SetIdItem"];
            };
        };
        responses: {
            /** @description Update an item in an existing set. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1SetIdItemItemId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Set id. */
                id: string;
                /** @description Item id. */
                item_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete an item from an existing set. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1SetIdItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Set id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1SetIdItem"];
            };
        };
        responses: {
            /** @description Add an item to an existing set. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1SetIdItems: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description True to reject items without images. */
                has_image?: boolean;
                /** @description Exclude disliked artworks if authenticated. */
                exclude_disliked_artworks?: boolean;
            };
            header?: never;
            path: {
                /** @description Set id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get all items in an existing set. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1SetId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Set id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve an existing set. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1SetId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Set id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1Set"];
            };
        };
        responses: {
            /** @description Update an existing set. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1SetId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Set id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete an existing set. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1Set: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1Set"];
            };
        };
        responses: {
            /** @description Create a new set. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1Shortcut: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1Shortcut"];
            };
        };
        responses: {
            /** @description Create a new shortcut for a given long URL (and optional short URL). */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1ShortcutShort: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Shortcut id or shortcut name. */
                short: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a shortcut by short. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1ShortcutShort: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Shortcut short. */
                short: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1Shortcut"];
            };
        };
        responses: {
            /** @description Update an existing shortcut. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1ShortcutShort: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Shortcut short. */
                short: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete an existing shortcut. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1Shortcuts: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Sort order. */
                sort?: "short" | "-short" | "created_at" | "-created_at";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve all shortcuts. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1ShowId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner show id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a partner show. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1ShowId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1Show"];
            };
        };
        responses: {
            /** @description Update an existing partner show. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1ShowId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Show id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete a show. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1Show: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1Show"];
            };
        };
        responses: {
            /** @description Create a new partner show. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1Shows: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Filter shows by the artwork on exhibit. */
                artwork?: string;
                /** @description Return shows that are 'current', 'running', 'closed', 'upcoming' or 'active'. */
                status?: "current" | "running" | "closed" | "upcoming" | "running_and_upcoming" | "closing_soon" | "active";
                /** @description Number of days which will be used to filter upcoming and closing soon shows. */
                day_threshold?: number;
                /** @description Coordinates to find shows closest to. */
                near?: string;
                /** @description Max distance to use when geo-locating shows (default: 75 km). */
                max_distance?: string;
                /** @description Only return shows at the given fair. */
                fair_id?: string;
                /** @description Only return shows at the given partner. */
                partner_id?: string;
                /** @description Include all displayable shows. */
                displayable?: boolean;
                /** @description Include local discovery shows. */
                include_local_discovery?: boolean;
                /** @description Only return shows that are part of a fair. */
                at_a_fair?: boolean;
                /** @description If true, will include only shows with a location, if false only shows without a location. */
                has_location?: boolean;
                /** @description Include shows that were flagged as non-discoverable. */
                include_discovery_blocked?: boolean;
                /** @description Sort order. */
                sort?: "created_at" | "-created_at" | "end_at" | "-end_at" | "start_at" | "-start_at" | "name" | "-name" | "-featured,-start_at" | "-featured,-end_at" | "sortable_name" | "-sortable_name" | "fully_qualified_name" | "-fully_qualified_name" | "-relevance,-start_at";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description Only return shows that match passed in ids. */
                    id?: string[];
                    /** @description Only return shows that match passed in partner types. */
                    partner_types?: ("Auction" | "Demo" | "Gallery" | "Private Collector" | "Private Dealer" | "Institution" | "Institutional Seller" | "Brand")[];
                };
            };
        };
        responses: {
            /** @description Retrieve all partner shows. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1ShowsFeed: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve all displayable, non-fair partner shows feed. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1SiteHeroUnitSiteHeroUnitIdImage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Hero Unit id. */
                site_hero_unit_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1SiteHeroUnitSiteHeroUnitIdImage"];
            };
        };
        responses: {
            /** @description Add an image to a hero unit. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1SiteHeroUnitId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Site hero unit id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a site hero unit. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1SiteHeroUnitId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Site hero unit id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1SiteHeroUnit"];
            };
        };
        responses: {
            /** @description Update a site hero unit. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1SiteHeroUnitId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Site hero unit id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete a site hero unit. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1SiteHeroUnit: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1SiteHeroUnit"];
            };
        };
        responses: {
            /** @description Create a site hero unit. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1SiteHeroUnits: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Only return enabled site hero units. */
                enabled?: string;
                /** @description Only return enabled site hero units. */
                "Grape::API::Boolean"?: string;
                /** @description Don't return non-mobile hero units. */
                mobile?: boolean;
                /** @description Don't return non-desktop hero units. */
                desktop?: boolean;
                /** @description Don't return non-martsy hero units. */
                martsy?: boolean;
                /** @description Sort order. */
                sort?: "position";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve all site hero units. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1StripeCustomer: {
        parameters: {
            query: {
                /** @description Partner Id. */
                partner_id: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve Stripe customer for a partner. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1StripeCustomer: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1StripeCustomer"];
            };
        };
        responses: {
            /** @description Create or return an existing customer account and Stripe customer for a user. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1SystemRoles: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List all available roles */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "getApiV1SystemTime(Zone)": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Time zone, one of local or utc. */
                zone: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return system time. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1SystemCache: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Clear rails cache. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1SystemInfo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve system info. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1SystemUp: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description System up check. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1SystemBoomStatusCode: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description An HTTP response status code. */
                status_code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return a specific error response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1SystemBoom: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Raise an exception with an optional error status to return. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1SystemPing: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return pong. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1TagId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Tag id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a tag. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1TagId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Tag id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1Tag"];
            };
        };
        responses: {
            /** @description Update an existing tag. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1TagId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Tag id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete a tag. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "getApiV1TagIdImage(ImageVersion)": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Tag's id. */
                id: string;
                image_version: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get a tag's image. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1TagIdArtworks: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
            };
            header?: never;
            path: {
                /** @description Tag id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve tagged artworks. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1Tags: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Sort order. */
                sort?: "name" | "-name" | "created_at" | "-created_at";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve all tags. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1TokenExchange: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1TokenExchange"];
            };
        };
        responses: {
            /** @description Get a token for a client app. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1UserArtQuiz: {
        parameters: {
            query?: {
                /** @description The id of the user to retrieve the art quiz for. */
                user_id?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a user's art quiz. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1UserArtQuiz: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1UserArtQuiz"];
            };
        };
        responses: {
            /** @description Update a user's art quiz. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1UserFairActions: {
        parameters: {
            query?: {
                /** @description Sort order. */
                sort?: "-_id" | "_id";
                owner_type?: "UserSaleProfile" | "CollectorProfile";
                /** @description ID of owner */
                owner_id?: string;
                /** @description Session ID of the inquirer if anonymous. */
                anonymous_session_id?: string;
                /** @description Client's key for anonymous session. */
                session_id?: string;
                /** @description User id. */
                user_id?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve user fair actions for a given collector or sale profile. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1UserFairActionId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description UserFairAction id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete a user-fair action */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1UserFairAction: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1UserFairAction"];
            };
        };
        responses: {
            /** @description Creates a new user fair action for a given collector or sale profile. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1UserInterests: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Collector profile or sale profile id. */
                owner_id?: string;
                owner_type?: "UserSaleProfile" | "CollectorProfile";
                /** @description Type of interest. */
                interest_type?: "Artist" | "Gene";
                /** @description Category of interest. */
                category?: "collected_before" | "interested_in_collecting";
                /** @description Anonymous session id. */
                anonymous_session_id?: string;
                /** @description Client's key for anonymous session. */
                session_id?: string;
                /** @description User id. */
                user_id?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve user interests of a collector profile. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1UserInterestId: {
        parameters: {
            query?: {
                /** @description Anonymous session id. */
                anonymous_session_id?: string;
                /** @description Client's key for anonymous session. */
                session_id?: string;
            };
            header?: never;
            path: {
                /** @description User interest id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get an interest. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1UserInterestId: {
        parameters: {
            query?: {
                /** @description Anonymous session id. */
                anonymous_session_id?: string;
                /** @description Client's key for anonymous session. */
                session_id?: string;
            };
            header?: never;
            path: {
                /** @description User interest id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete an interest. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1UserInterest: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1UserInterest"];
            };
        };
        responses: {
            /** @description Add an interest. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1UserSaleProfileId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Sale profile id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a sale profile. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1UserSaleProfileId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Sale profile id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1UserSaleProfile"];
            };
        };
        responses: {
            /** @description Update a profile. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1UserSaleProfileId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Sale profile id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete a sale profile. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1UserSaleProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1UserSaleProfile"];
            };
        };
        responses: {
            /** @description Create a sale profile. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1UserIdRepresentativeRepresentativeId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User id. */
                id: string;
                /** @description Representative's id. */
                representative_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Update a user's representative. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1UserIdRepresentative: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a user's representative. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1UserIdLabFeatureFeatureId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User id. */
                id: string;
                /** @description Lab Feature id. */
                feature_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1UserIdLabFeature"];
            };
        };
        responses: {
            /** @description Enable a lab feature for a user. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1UserIdLabFeatureFeatureId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User id. */
                id: string;
                /** @description Lab Feature id. */
                feature_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Disables a lab feature for a user. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1UserIdLabFeatures: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a user's enabled lab features. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1User: {
        parameters: {
            query: {
                /** @description User email. */
                email: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Check whether a user exists by email address. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1User: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1User"];
            };
        };
        responses: {
            /** @description Create a new user. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1UserIdentify: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1UserIdentify"];
            };
        };
        responses: {
            /** @description Check whether a user exists by email address (used by Artsy clients for authentication flows). */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1UserIdAdminNoteAdminNoteId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User id. */
                id: string;
                /** @description Admin note id. */
                admin_note_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve one user admin_note. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1UserIdAdminNoteAdminNoteId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User id. */
                id: string;
                /** @description Admin note id. */
                admin_note_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Update an existing admin_note. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1UserIdAdminNoteAdminNoteId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User id. */
                id: string;
                /** @description Admin note id. */
                admin_note_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete an existing admin_note. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1UserIdAdminNotes: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve all user's admin_notes. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1UserIdAdminNote: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Create a user admin_note. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1UserUserIdAccessControlId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User id. */
                user_id: string;
                /** @description Access control id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete a user's access control. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1UserIdAccessControls: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Property model, eg. 'partner'. */
                model?: "partner" | "artist" | "artwork" | "profile";
            };
            header?: never;
            path: {
                /** @description User id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get user's access controls. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1UserUserIdAccessControl: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User id. */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1UserUserIdAccessControl"];
            };
        };
        responses: {
            /** @description Grants user access to a model. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1UserIdBackupCode: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Send the User a 2FA backup code */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1UserIdPassword: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1UserIdPassword"];
            };
        };
        responses: {
            /** @description Change a users password. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1UserIdRecentlyViewedArtworkIds: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve all recently viewed artworks by a user. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1UserIdArtworkInquiryRequests: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Sort order. */
                sort?: "-created_at" | "created_at" | "-outcome" | "outcome" | "likely_to_purchase" | "-likely_to_purchase" | "status" | "-status" | "flagged" | "-flagged" | "contact_gallery" | "-contact_gallery" | "status,-likely_to_purchase,created_at" | "last_message_received_at" | "-last_message_received_at";
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve all artwork inquiry requests by a user. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1UserIdSuggestedGenes: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve suggested genes for a user. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1UserIdSuggestedSimilarArtists: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Limit the number of suggestions per artist. */
                limit_per_artist?: number;
                /** @description When true, will only include artists with for sale works. */
                exclude_artists_without_forsale_artworks?: boolean;
                /** @description If true, will exclude followed artists as a suggestion. */
                exclude_followed_artists?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve suggested artists for a user, based on similar artists. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1UserIdFollowProfiles: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Profile type. */
                type?: string;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve all profiles followed by a user. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1UserIdFollowGenes: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Sort order. */
                sort?: "name" | "-name" | "counts.artists" | "-counts.artists" | "counts.artworks" | "-counts.artworks" | "published" | "-published" | "automated" | "-automated";
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve all genes followed by a user. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1UserIdRolesRoleType: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
                /** @description Role type. */
                role_type: "admin" | "billing_admin" | "consignments_manager" | "consignments_representative" | "content_manager" | "customer_support" | "editorial" | "genomer" | "metadata_admin" | "partner_support" | "role_manager" | "sales_admin" | "sales_observer" | "subscriptions_manager" | "team" | "verification_admin";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Add a new role to the user */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1UserIdRolesRoleType: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
                /** @description Role type. */
                role_type: "admin" | "billing_admin" | "consignments_manager" | "consignments_representative" | "content_manager" | "customer_support" | "editorial" | "genomer" | "metadata_admin" | "partner_support" | "role_manager" | "sales_admin" | "sales_observer" | "subscriptions_manager" | "team" | "verification_admin";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Remove a role from a user */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1UserIdFollowArtists: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Sort order. */
                sort?: "_slugs" | "-_slugs" | "created_at" | "-created_at" | "sortable_id" | "-sortable_id" | "-trending";
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve all artists followed by a user. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1UserId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a user by id. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1UserId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1User"];
            };
        };
        responses: {
            /** @description Update an existing user. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1UserId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete an existing user. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1UsersResetPassword: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1UsersResetPassword"];
            };
        };
        responses: {
            /** @description Reset a password given a password token. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1UsersSendResetPasswordInstructions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1UsersSendResetPasswordInstructions"];
            };
        };
        responses: {
            /** @description Send reset password instructions. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1Users: {
        parameters: {
            query?: {
                /** @description Scope of user data to return (default: all). */
                properties?: "short" | "public" | "all";
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Sort order. */
                sort?: "name" | "-name" | "email" | "-email" | "collector_since" | "-collector_since";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description Only return users that match passed in ids. */
                    id?: string[];
                    /** @description Return users that have any of the specified roles (required, depending on privilege level). */
                    roles?: ("admin" | "billing_admin" | "consignments_manager" | "consignments_representative" | "content_manager" | "customer_support" | "editorial" | "genomer" | "metadata_admin" | "partner_support" | "role_manager" | "sales_admin" | "sales_observer" | "subscriptions_manager" | "team" | "verification_admin")[];
                };
            };
        };
        responses: {
            /** @description Retrieve all users. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1VerifiedRepresentativesId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete a verified representative. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1VerifiedRepresentatives: {
        parameters: {
            query?: {
                artist_id?: string;
                partner_id?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get list of verified representatives. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1VerifiedRepresentatives: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1VerifiedRepresentatives"];
            };
        };
        responses: {
            /** @description Create a verified representative. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1Video: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1Video"];
            };
        };
        responses: {
            /** @description Create a video. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1VideoId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Video id. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a video. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1ViewingRooms: {
        parameters: {
            query?: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                partner_id?: string;
                featured?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    ids?: string[];
                    statuses?: ("draft" | "scheduled" | "live" | "closed")[];
                };
            };
        };
        responses: {
            /** @description Retrieve viewing rooms */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1ViewingRoomIdSubsections: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Viewing room id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a viewing room's subsections. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1ViewingRoomIdSubsections: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1ViewingRoomIdSubsections"];
            };
        };
        responses: {
            /** @description Update a viewing room's subsections. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1ViewingRoomIdViewingRoomArtworks: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Viewing room id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve join entities between viewing rooms and artworks. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1ViewingRoomIdViewingRoomArtworks: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1ViewingRoomIdViewingRoomArtworks"];
            };
        };
        responses: {
            /** @description Update a viewing room's artworks. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1ViewingRoomId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Viewing room id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a viewing room. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV1ViewingRoomId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Viewing Room ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putApiV1ViewingRoom"];
            };
        };
        responses: {
            /** @description Update a viewing room. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1ViewingRoomId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Viewing Room ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete a viewing_room. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1ViewingRoom: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1ViewingRoom"];
            };
        };
        responses: {
            /** @description Create a viewing room. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1XappToken: {
        parameters: {
            query: {
                /** @description Client id. */
                client_id: string;
                /** @description Client secret. */
                client_secret: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Obtain an XApp token. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1AddressVerification: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1AddressVerification"];
            };
        };
        responses: {
            /** @description Verify an address */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV1ClientApplicationIdClientApplicationPartnerClientApplicationPartnerId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Client application id. */
                id: string;
                /** @description Client application partner id. */
                client_application_partner_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description deleted ClientApplicationPartner */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1ClientApplicationIdClientApplicationPartner: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Client application id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1ClientApplicationIdClientApplicationPartner"];
            };
        };
        responses: {
            /** @description created ClientApplicationPartner */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1ClientApplicationIdClientApplicationPartners: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Client application id. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description get ClientApplicationPartner(s) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1FairBoothImport: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["postApiV1FairBoothImport"];
            };
        };
        responses: {
            /** @description Executes fair booth creation process. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1Increments: {
        parameters: {
            query?: {
                /** @description ID or slug of sale by which to filter increment strategies. */
                sale_id?: string;
                /** @description Key by which to filter increment strategies. */
                key?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description get Increment(s) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1IncrementKey: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Key identifying increment strategy. */
                key: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description get Increment(s) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerCollectorProfileCollectorProfileIdPartnerEngagement: {
        parameters: {
            query: {
                /** @description Partner id. */
                partner_id: string;
            };
            header?: never;
            path: {
                /** @description CollectorProfile id. */
                collector_profile_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve information related to partner engagement. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerCollectorProfileCollectorProfileIdArtworkInquiryRequestsCount: {
        parameters: {
            query: {
                /** @description Partner id. */
                partner_id: string;
                /** @description When present, only consider inquiry requests for this artist. */
                artist_id?: string;
            };
            header?: never;
            path: {
                /** @description CollectorProfile id. */
                collector_profile_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a count of artwork inquiries made by a collector profile. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerCollectorProfileCollectorProfileIdUserInterests: {
        parameters: {
            query: {
                /** @description Page number to retrieve, starting at 1. */
                page?: number;
                /** @description Offset from which to retrieve. */
                offset?: number;
                /** @description Number of items to retrieve for this page or from the current offset. */
                size?: string;
                /** @description Cursor for pagination. */
                cursor?: string;
                /** @description Partner id. */
                partner_id: string;
            };
            header?: never;
            path: {
                /** @description CollectorProfile id. */
                collector_profile_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve user interests of a collector profile. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerCollectorProfile: {
        parameters: {
            query: {
                /** @description Partner id. */
                partner_id: string;
                /** @description User id. */
                user_id: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve details of a partner collector profile */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PartnerCollectorProfiles: {
        parameters: {
            query: {
                /** @description Partner id. */
                partner_id: string;
                /** @description When true, include total count in headers */
                total_count?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": {
                    /** @description User ids. */
                    user_ids: string[];
                };
            };
        };
        responses: {
            /** @description get PartnerCollectorProfile(s) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1Profiles: {
        parameters: {
            query?: {
                /** @description Type of owner. */
                owner_type?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description One or more profile ids. */
                    id?: string[];
                    /** @description One or more owner ids. */
                    owner_ids?: string[];
                };
            };
        };
        responses: {
            /** @description Retrieve 1 or more profiles. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1WebhookDeliveries: {
        parameters: {
            query: {
                /** @description Client application ID. */
                client_application_id: string;
                page?: number;
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description get WebhookDelivery(s) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1WebhookDeliveryIdRedeliver: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description created Redeliver */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1WebhookDeliveryId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description get WebhookDelivery(s) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
