{
  "openapi": "3.0.1",
  "info": {
    "title": "Artsy Internal API",
    "termsOfService": "https://developers.artsy.net/terms",
    "contact": {
      "name": "Artsy API Developers",
      "url": "https://developers.artsy.net",
      "email": "artsy-api-developers@googlegroups.com"
    },
    "version": "v1"
  },
  "servers": [
    {
      "url": "//api.artsy.net/"
    }
  ],
  "tags": [
    {
      "name": "access_controls",
      "description": "Operations about access_controls"
    },
    {
      "name": "access_token",
      "description": "Operations about access_tokens"
    },
    {
      "name": "account_requests",
      "description": "Operations about account_requests"
    },
    {
      "name": "admins",
      "description": "Operations about admins"
    },
    {
      "name": "artist_career_highlights",
      "description": "Operations about artist_career_highlights"
    },
    {
      "name": "artist_career_highlight",
      "description": "Operations about artist_career_highlights"
    },
    {
      "name": "artist_series",
      "description": "Operations about artist_series"
    },
    {
      "name": "artist",
      "description": "Operations about artists"
    },
    {
      "name": "artists",
      "description": "Operations about artists"
    },
    {
      "name": "artwork_version",
      "description": "Operations about artwork_versions"
    },
    {
      "name": "artworks",
      "description": "Operations about artworks"
    },
    {
      "name": "artworks_discovery",
      "description": "Operations about artworks_discoveries"
    },
    {
      "name": "artwork",
      "description": "Operations about artworks"
    },
    {
      "name": "bank_account",
      "description": "Operations about bank_accounts"
    },
    {
      "name": "bidder_positions",
      "description": "Operations about bidder_positions"
    },
    {
      "name": "bidder_position",
      "description": "Operations about bidder_positions"
    },
    {
      "name": "bidder",
      "description": "Operations about bidders"
    },
    {
      "name": "bidders",
      "description": "Operations about bidders"
    },
    {
      "name": "bids",
      "description": "Operations about bids"
    },
    {
      "name": "bid",
      "description": "Operations about bids"
    },
    {
      "name": "buyers_premiums",
      "description": "Operations about buyers_premiums"
    },
    {
      "name": "callbacks",
      "description": "Operations about callbacks"
    },
    {
      "name": "collection",
      "description": "Operations about collections"
    },
    {
      "name": "collections",
      "description": "Operations about collections"
    },
    {
      "name": "collector_profiles",
      "description": "Operations about collector_profiles"
    },
    {
      "name": "collector_profile",
      "description": "Operations about collector_profiles"
    },
    {
      "name": "collector_profile_summary",
      "description": "Operations about collector_profile_summaries"
    },
    {
      "name": "credit_card",
      "description": "Operations about credit_cards"
    },
    {
      "name": "credit_cards",
      "description": "Operations about credit_cards"
    },
    {
      "name": "cultures",
      "description": "Operations about cultures"
    },
    {
      "name": "devices",
      "description": "Operations about devices"
    },
    {
      "name": "device",
      "description": "Operations about devices"
    },
    {
      "name": "exchange_rates",
      "description": "Operations about exchange_rates"
    },
    {
      "name": "fair",
      "description": "Operations about fairs"
    },
    {
      "name": "fair_organizers",
      "description": "Operations about fair_organizers"
    },
    {
      "name": "fair_organizer",
      "description": "Operations about fair_organizers"
    },
    {
      "name": "fairs",
      "description": "Operations about fairs"
    },
    {
      "name": "featured_links",
      "description": "Operations about featured_links"
    },
    {
      "name": "featured_link",
      "description": "Operations about featured_links"
    },
    {
      "name": "features",
      "description": "Operations about features"
    },
    {
      "name": "feature",
      "description": "Operations about features"
    },
    {
      "name": "feedback",
      "description": "Operations about feedback"
    },
    {
      "name": "filter",
      "description": "Operations about filters"
    },
    {
      "name": "follow_shows",
      "description": "Operations about follow_shows"
    },
    {
      "name": "gene_families",
      "description": "Operations about gene_families"
    },
    {
      "name": "gene_type",
      "description": "Operations about gene_types"
    },
    {
      "name": "gene_types",
      "description": "Operations about gene_types"
    },
    {
      "name": "gene",
      "description": "Operations about genes"
    },
    {
      "name": "genes",
      "description": "Operations about genes"
    },
    {
      "name": "genome",
      "description": "Operations about genomes"
    },
    {
      "name": "hero_units",
      "description": "Operations about hero_units"
    },
    {
      "name": "identity_verifications",
      "description": "Operations about identity_verifications"
    },
    {
      "name": "identity_verification",
      "description": "Operations about identity_verifications"
    },
    {
      "name": "inquiry_request_questions",
      "description": "Operations about inquiry_request_questions"
    },
    {
      "name": "inquiry_request",
      "description": "Operations about inquiry_requests"
    },
    {
      "name": "inquiry_requests",
      "description": "Operations about inquiry_requests"
    },
    {
      "name": "invoice",
      "description": "Operations about invoices"
    },
    {
      "name": "invoices",
      "description": "Operations about invoices"
    },
    {
      "name": "labs",
      "description": "Operations about labs"
    },
    {
      "name": "maps",
      "description": "Operations about maps"
    },
    {
      "name": "marketing_collections",
      "description": "Operations about marketing_collections"
    },
    {
      "name": "marketing_collections_categories",
      "description": "Operations about marketing_collections_categories"
    },
    {
      "name": "match",
      "description": "Operations about matches"
    },
    {
      "name": "me",
      "description": "Operations about mes"
    },
    {
      "name": "merchant_accounts",
      "description": "Operations about merchant_accounts"
    },
    {
      "name": "merchant_account",
      "description": "Operations about merchant_accounts"
    },
    {
      "name": "notification_preferences",
      "description": "Operations about notification_preferences"
    },
    {
      "name": "pages",
      "description": "Operations about pages"
    },
    {
      "name": "page",
      "description": "Operations about pages"
    },
    {
      "name": "partner",
      "description": "Operations about partners"
    },
    {
      "name": "partner_categories",
      "description": "Operations about partner_categories"
    },
    {
      "name": "partner_category",
      "description": "Operations about partner_categories"
    },
    {
      "name": "partner_communications",
      "description": "Operations about partner_communications"
    },
    {
      "name": "partner_communication",
      "description": "Operations about partner_communications"
    },
    {
      "name": "partner_gene_categories",
      "description": "Operations about partner_gene_categories"
    },
    {
      "name": "partner_offer",
      "description": "Operations about partner_offers"
    },
    {
      "name": "partner_offers",
      "description": "Operations about partner_offers"
    },
    {
      "name": "partner_show_events",
      "description": "Operations about partner_show_events"
    },
    {
      "name": "partner_subscription_charges",
      "description": "Operations about partner_subscription_charges"
    },
    {
      "name": "partner_subscription_charge",
      "description": "Operations about partner_subscription_charges"
    },
    {
      "name": "partner_subscription_events",
      "description": "Operations about partner_subscription_events"
    },
    {
      "name": "partner_subscription_event",
      "description": "Operations about partner_subscription_events"
    },
    {
      "name": "partner_subscription_invoices",
      "description": "Operations about partner_subscription_invoices"
    },
    {
      "name": "partner_subscription_invoice",
      "description": "Operations about partner_subscription_invoices"
    },
    {
      "name": "partner_subscription_plans",
      "description": "Operations about partner_subscription_plans"
    },
    {
      "name": "partner_subscription_plan",
      "description": "Operations about partner_subscription_plans"
    },
    {
      "name": "partner_subscriptions",
      "description": "Operations about partner_subscriptions"
    },
    {
      "name": "partner_subscription",
      "description": "Operations about partner_subscriptions"
    },
    {
      "name": "partner_artists",
      "description": "Operations about partner_artists"
    },
    {
      "name": "partner_artist",
      "description": "Operations about partner_artists"
    },
    {
      "name": "partners",
      "description": "Operations about partners"
    },
    {
      "name": "partner_show",
      "description": "Operations about partner_shows"
    },
    {
      "name": "periods",
      "description": "Operations about periods"
    },
    {
      "name": "period",
      "description": "Operations about periods"
    },
    {
      "name": "profile",
      "description": "Operations about profiles"
    },
    {
      "name": "purchases",
      "description": "Operations about purchases"
    },
    {
      "name": "purchase",
      "description": "Operations about purchases"
    },
    {
      "name": "related",
      "description": "Operations about relateds"
    },
    {
      "name": "representative",
      "description": "Operations about representatives"
    },
    {
      "name": "sale_agreements",
      "description": "Operations about sale_agreements"
    },
    {
      "name": "sale_artwork",
      "description": "Operations about sale_artworks"
    },
    {
      "name": "sale_artworks",
      "description": "Operations about sale_artworks"
    },
    {
      "name": "sale",
      "description": "Operations about sales"
    },
    {
      "name": "sales",
      "description": "Operations about sales"
    },
    {
      "name": "search",
      "description": "Operations about searches"
    },
    {
      "name": "sets",
      "description": "Operations about sets"
    },
    {
      "name": "set",
      "description": "Operations about sets"
    },
    {
      "name": "shortcut",
      "description": "Operations about shortcuts"
    },
    {
      "name": "shortcuts",
      "description": "Operations about shortcuts"
    },
    {
      "name": "show",
      "description": "Operations about shows"
    },
    {
      "name": "shows",
      "description": "Operations about shows"
    },
    {
      "name": "site_hero_unit",
      "description": "Operations about site_hero_units"
    },
    {
      "name": "site_hero_units",
      "description": "Operations about site_hero_units"
    },
    {
      "name": "stripe_customer",
      "description": "Operations about stripe_customers"
    },
    {
      "name": "system",
      "description": "Operations about systems"
    },
    {
      "name": "tag",
      "description": "Operations about tags"
    },
    {
      "name": "tags",
      "description": "Operations about tags"
    },
    {
      "name": "token",
      "description": "Operations about tokens"
    },
    {
      "name": "user_art_quiz",
      "description": "Operations about user_art_quizzes"
    },
    {
      "name": "user_fair_actions",
      "description": "Operations about user_fair_actions"
    },
    {
      "name": "user_fair_action",
      "description": "Operations about user_fair_actions"
    },
    {
      "name": "user_interests",
      "description": "Operations about user_interests"
    },
    {
      "name": "user_interest",
      "description": "Operations about user_interests"
    },
    {
      "name": "user_sale_profile",
      "description": "Operations about user_sale_profiles"
    },
    {
      "name": "user",
      "description": "Operations about users"
    },
    {
      "name": "users",
      "description": "Operations about users"
    },
    {
      "name": "verified_representatives",
      "description": "Operations about verified_representatives"
    },
    {
      "name": "video",
      "description": "Operations about videos"
    },
    {
      "name": "viewing_rooms",
      "description": "Operations about viewing_rooms"
    },
    {
      "name": "viewing_room",
      "description": "Operations about viewing_rooms"
    },
    {
      "name": "xapp_token",
      "description": "Operations about xapp_tokens"
    },
    {
      "name": "address_verification",
      "description": "Operations about address_verifications"
    },
    {
      "name": "client_application",
      "description": "Operations about client_applications"
    },
    {
      "name": "fair_booth_import",
      "description": "Operations about fair_booth_imports"
    },
    {
      "name": "increments",
      "description": "Operations about increments"
    },
    {
      "name": "increment",
      "description": "Operations about increments"
    },
    {
      "name": "partner_collector_profile",
      "description": "Operations about partner_collector_profiles"
    },
    {
      "name": "partner_collector_profiles",
      "description": "Operations about partner_collector_profiles"
    },
    {
      "name": "profiles",
      "description": "Operations about profiles"
    },
    {
      "name": "webhook_deliveries",
      "description": "Operations about webhook_deliveries"
    },
    {
      "name": "webhook_delivery",
      "description": "Operations about webhook_deliveries"
    }
  ],
  "paths": {
    "/api/v1/access_controls": {
      "get": {
        "tags": [
          "access_controls"
        ],
        "description": "Retrieve access controls.",
        "operationId": "getApiV1AccessControls",
        "parameters": [
          {
            "name": "property_type",
            "in": "query",
            "description": "Property type.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "property_id",
            "in": "query",
            "description": "Property id.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve access controls.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/access_token": {
      "delete": {
        "tags": [
          "access_token"
        ],
        "description": "Expire an OAuth access token.",
        "operationId": "deleteApiV1AccessToken",
        "parameters": [
          {
            "name": "access_token",
            "in": "query",
            "description": "Access token, defaults to value in the X-Access-Token header.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Expire an OAuth access token.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/account_requests": {
      "post": {
        "tags": [
          "account_requests"
        ],
        "description": "Create an account request, which may be associated with a user.",
        "operationId": "postApiV1AccountRequests",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1AccountRequests"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create an account request, which may be associated with a user.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1AccountRequests"
      }
    },
    "/api/v1/admins/representatives": {
      "get": {
        "tags": [
          "admins"
        ],
        "description": "Retrieve all representatives.",
        "operationId": "getApiV1AdminsRepresentatives",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "name",
                "-name",
                "email",
                "-email",
                "collector_since",
                "-collector_since"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve all representatives.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/admins/available_representatives": {
      "get": {
        "tags": [
          "admins"
        ],
        "description": "Retrieve available representatives.",
        "operationId": "getApiV1AdminsAvailableRepresentatives",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "name",
                "-name",
                "email",
                "-email",
                "collector_since",
                "-collector_since"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve available representatives.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/admins": {
      "get": {
        "tags": [
          "admins"
        ],
        "description": "Retrieve all admins.",
        "operationId": "getApiV1Admins",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partner_admin",
            "in": "query",
            "description": "Only return admins that are set as admins for any partners.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "name",
                "-name",
                "email",
                "-email",
                "collector_since",
                "-collector_since"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve all admins.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/artist_career_highlights": {
      "get": {
        "tags": [
          "artist_career_highlights"
        ],
        "description": "Return all artist career highlights for an artist.",
        "operationId": "getApiV1ArtistCareerHighlights",
        "parameters": [
          {
            "name": "artist_id",
            "in": "query",
            "description": "Artist id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "solo",
            "in": "query",
            "description": "Return only solo shows.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "group",
            "in": "query",
            "description": "Return only group shows.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "collected",
            "in": "query",
            "description": "Return only major institutions that have collected the artist's works.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return all artist career highlights for an artist.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/artist_career_highlight/{id}": {
      "put": {
        "tags": [
          "artist_career_highlight"
        ],
        "description": "Update an artist career highlight.",
        "operationId": "putApiV1ArtistCareerHighlightId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Artist career highlight id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1ArtistCareerHighlight"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update an artist career highlight.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1ArtistCareerHighlight"
      },
      "delete": {
        "tags": [
          "artist_career_highlight"
        ],
        "description": "Delete an artist career highlight.",
        "operationId": "deleteApiV1ArtistCareerHighlightId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Artist career highlight id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete an artist career highlight.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/artist_career_highlight": {
      "post": {
        "tags": [
          "artist_career_highlight"
        ],
        "description": "Create an artist career highlight.",
        "operationId": "postApiV1ArtistCareerHighlight",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1ArtistCareerHighlight"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create an artist career highlight.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1ArtistCareerHighlight"
      }
    },
    "/api/v1/artist_series": {
      "get": {
        "tags": [
          "artist_series"
        ],
        "description": "Retrieve artist series",
        "operationId": "getApiV1ArtistSeries",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "artist_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "artwork_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "exclude_ids": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Retrieve artist series",
            "content": {}
          }
        }
      }
    },
    "/api/v1/artist_series/{id}": {
      "get": {
        "tags": [
          "artist_series"
        ],
        "description": "Retrieve an artist series",
        "operationId": "getApiV1ArtistSeriesId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Artist Series ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve an artist series",
            "content": {}
          }
        }
      }
    },
    "/api/v1/artist/{id}/partners": {
      "get": {
        "tags": [
          "artist"
        ],
        "description": "Retrieve all partners that have artworks by an artist.",
        "operationId": "getApiV1ArtistIdPartners",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "sortable_id",
                "-sortable_id",
                "published_artworks_count",
                "-published_artworks_count"
              ]
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Artist id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "represented_by",
            "in": "query",
            "description": "Only return partners that represent the artist.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve all partners that have artworks by an artist.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/artist/{id}/partner_artists": {
      "get": {
        "tags": [
          "artist"
        ],
        "description": "Retrieve all partner artist relationships for a partner.",
        "operationId": "getApiV1ArtistIdPartnerArtists",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "sortable_id",
                "-sortable_id",
                "published_artworks_count",
                "-published_artworks_count"
              ]
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Artist id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "represented_by",
            "in": "query",
            "description": "Only return partner-artist relationships where the partner represents the artist.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "has_biography",
            "in": "query",
            "description": "Only return partner-artist relationships where the partner has entered a bio for the artist.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "featured",
            "in": "query",
            "description": "Only return featured partner artists.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve all partner artist relationships for a partner.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/artist/{id}/genome": {
      "get": {
        "tags": [
          "artist"
        ],
        "description": "Retrieve an artist's genome.",
        "operationId": "getApiV1ArtistIdGenome",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Artist id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve an artist's genome.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "artist"
        ],
        "description": "Update an artist's genome.",
        "operationId": "putApiV1ArtistIdGenome",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Artist id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1ArtistIdGenome"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update an artist's genome.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1ArtistIdGenome"
      },
      "delete": {
        "tags": [
          "artist"
        ],
        "description": "Clear an artist's genome.",
        "operationId": "deleteApiV1ArtistIdGenome",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Artist id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Clear an artist's genome.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/artist/{id}/genome/incomplete": {
      "put": {
        "tags": [
          "artist"
        ],
        "description": "Mark an artist's genome incomplete.",
        "operationId": "putApiV1ArtistIdGenomeIncomplete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Artist id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Mark an artist's genome incomplete.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/artist/{id}/genome/complete": {
      "put": {
        "tags": [
          "artist"
        ],
        "description": "Mark an artist's genome complete.",
        "operationId": "putApiV1ArtistIdGenomeComplete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Artist id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Mark an artist's genome complete.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/artist/{id}/genome/genes": {
      "get": {
        "tags": [
          "artist"
        ],
        "description": "Retrieve an artist's genes, sorted by value.",
        "operationId": "getApiV1ArtistIdGenomeGenes",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Artist id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve an artist's genes, sorted by value.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/artist/{id}/merge": {
      "post": {
        "tags": [
          "artist"
        ],
        "description": "Merge two artists (any artworks, follows, and posts)",
        "operationId": "postApiV1ArtistIdMerge",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Artist id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1ArtistIdMerge"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Merge two artists (any artworks, follows, and posts)",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1ArtistIdMerge"
      }
    },
    "/api/v1/artist/{id}/duplicates": {
      "get": {
        "tags": [
          "artist"
        ],
        "description": "Get a cluster of potentially duplicated artist records (including the specified Artist).",
        "operationId": "getApiV1ArtistIdDuplicates",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Artist's id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a cluster of potentially duplicated artist records (including the specified Artist).",
            "content": {}
          }
        }
      }
    },
    "/api/v1/artist/{id}/image(/{image_version})": {
      "get": {
        "tags": [
          "artist"
        ],
        "description": "Get an artist's image.",
        "operationId": "getApiV1ArtistIdImage(ImageVersion)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Artist's id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "image_version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get an artist's image.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/artist": {
      "post": {
        "tags": [
          "artist"
        ],
        "description": "Create a new artist.",
        "operationId": "postApiV1Artist",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1Artist"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a new artist.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1Artist"
      }
    },
    "/api/v1/artist/{id}/artworks/all": {
      "get": {
        "tags": [
          "artist"
        ],
        "description": "Retrieve deep data for all artist's artworks. Most iconic works appear first, followed by recently published ones.",
        "operationId": "getApiV1ArtistIdArtworksAll",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "title",
                "-title",
                "created_at",
                "-created_at",
                "-created_at,-id",
                "deleted_at",
                "-deleted_at",
                "-iconicity",
                "-merchandisability",
                "published_at",
                "-published_at",
                "-partner_updated_at",
                "availability",
                "-recent_saves_count",
                "-last_offerable_activity_at"
              ]
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Artist id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "gene_id",
            "in": "query",
            "description": "Specify a gene id to sort artworks by the value of the gene, followed by recently published ones. Sorts by artwork iconicity by default.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "filter": {
                    "type": "array",
                    "description": "Filter the works by criteria, any combination of 'for_sale' and 'not_for_sale'.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Retrieve deep data for all artist's artworks. Most iconic works appear first, followed by recently published ones.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/artist/{id}/artworks": {
      "get": {
        "tags": [
          "artist"
        ],
        "description": "Retrieve all artist's artworks.",
        "operationId": "getApiV1ArtistIdArtworks",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "title",
                "-title",
                "created_at",
                "-created_at",
                "-created_at,-id",
                "deleted_at",
                "-deleted_at",
                "-iconicity",
                "-merchandisability",
                "published_at",
                "-published_at",
                "-partner_updated_at",
                "availability",
                "-recent_saves_count",
                "-last_offerable_activity_at"
              ]
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Artist id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "gene_id",
            "in": "query",
            "description": "Specify a gene id to sort artworks by the value of the gene, followed by recently published ones. Sorts by artwork iconicity by default.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "published",
            "in": "query",
            "description": "Return only published artworks.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "filter": {
                    "type": "array",
                    "description": "Filter the works by criteria, any combination of 'for_sale' and 'not_for_sale'.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "exclude_ids": {
                    "type": "array",
                    "description": "An array of artwork ids to exclude from the response.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Retrieve all artist's artworks.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/artist/{id}/admin_note": {
      "post": {
        "tags": [
          "artist"
        ],
        "description": "Create an artist admin_note.",
        "operationId": "postApiV1ArtistIdAdminNote",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Artist id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Create an artist admin_note.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/artist/{id}/admin_notes": {
      "get": {
        "tags": [
          "artist"
        ],
        "description": "Retrieve all artist's admin_notes.",
        "operationId": "getApiV1ArtistIdAdminNotes",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Artist id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve all artist's admin_notes.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/artist/{id}": {
      "get": {
        "tags": [
          "artist"
        ],
        "description": "Retrieve an artist.",
        "operationId": "getApiV1ArtistId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve an artist.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "artist"
        ],
        "description": "Update an existing artist.",
        "operationId": "putApiV1ArtistId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1Artist"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update an existing artist.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1Artist"
      },
      "delete": {
        "tags": [
          "artist"
        ],
        "description": "Delete an existing artist.",
        "operationId": "deleteApiV1ArtistId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete an existing artist.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/artist/{id}/artwork_inquiry_requests": {
      "get": {
        "tags": [
          "artist"
        ],
        "description": "Retrieve all artwork inquiry requests by a artist.",
        "operationId": "getApiV1ArtistIdArtworkInquiryRequests",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "-created_at",
                "created_at",
                "-outcome",
                "outcome",
                "likely_to_purchase",
                "-likely_to_purchase",
                "status",
                "-status",
                "flagged",
                "-flagged",
                "contact_gallery",
                "-contact_gallery",
                "status,-likely_to_purchase,created_at",
                "last_message_received_at",
                "-last_message_received_at"
              ]
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve all artwork inquiry requests by a artist.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/artist/{id}/follow/users": {
      "get": {
        "tags": [
          "artist"
        ],
        "description": "Retrieve all users that follow an artist.",
        "operationId": "getApiV1ArtistIdFollowUsers",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve all users that follow an artist.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/artists/merge": {
      "post": {
        "tags": [
          "artists"
        ],
        "description": "Merge two or more artists",
        "operationId": "postApiV1ArtistsMerge",
        "responses": {
          "201": {
            "description": "Merge two or more artists",
            "content": {}
          }
        }
      }
    },
    "/api/v1/artists": {
      "get": {
        "tags": [
          "artists"
        ],
        "description": "Retrieve artists.",
        "operationId": "getApiV1Artists",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "_slugs",
                "-_slugs",
                "created_at",
                "-created_at",
                "sortable_id",
                "-sortable_id",
                "-trending"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "ids": {
                    "type": "array",
                    "description": "Returns these objects if passed in.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Retrieve artists.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/artists/{match}": {
      "get": {
        "tags": [
          "artists"
        ],
        "description": "Retrieve a subset of artists.",
        "operationId": "getApiV1ArtistsMatch",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "_slugs",
                "-_slugs",
                "created_at",
                "-created_at",
                "sortable_id",
                "-sortable_id",
                "-trending"
              ]
            }
          },
          {
            "name": "match",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a subset of artists.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/artists/popular": {
      "get": {
        "tags": [
          "artists"
        ],
        "description": "Retrieve the most followed artists.",
        "operationId": "getApiV1ArtistsPopular",
        "parameters": [
          {
            "name": "size",
            "in": "query",
            "description": "Limit to top n artists.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "exclude_followed_artists",
            "in": "query",
            "description": "If true, will exclude followed artists.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "exclude_artist_ids": {
                    "type": "array",
                    "description": "Exclude these ids from results, may result in all artists being excluded.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Retrieve the most followed artists.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/artists/trending/scores": {
      "get": {
        "tags": [
          "artists"
        ],
        "description": "Retrieve trending artists with full score breakdown.",
        "operationId": "getApiV1ArtistsTrendingScores",
        "parameters": [
          {
            "name": "n",
            "in": "query",
            "description": "Limit to top n artists.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve trending artists with full score breakdown.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/artists/trending": {
      "get": {
        "tags": [
          "artists"
        ],
        "description": "Retrieve trending artists in descending order.",
        "operationId": "getApiV1ArtistsTrending",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "gene",
            "in": "query",
            "description": "Supply a gene filter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "max_career_stage",
            "in": "query",
            "description": "Supply a max career stage filter.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "min_career_stage",
            "in": "query",
            "description": "Supply a min career stage filter.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 45
            }
          },
          {
            "name": "min_forsale_artworks",
            "in": "query",
            "description": "Min number of for sale works",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 5
            }
          },
          {
            "name": "min_follow_count",
            "in": "query",
            "description": "Min number of followers",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "exclude_followed_artists",
            "in": "query",
            "description": "If true, will exclude followed artists.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve trending artists in descending order.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/artwork_version/{id}": {
      "get": {
        "tags": [
          "artwork_version"
        ],
        "description": "Retrieve an artwork version.",
        "operationId": "getApiV1ArtworkVersionId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Version id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve an artwork version.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/artworks/collections/batch": {
      "post": {
        "tags": [
          "artworks"
        ],
        "description": "Add / remove artworks to / from collections",
        "operationId": "postApiV1ArtworksCollectionsBatch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "artwork_ids"
                ],
                "type": "object",
                "properties": {
                  "artwork_ids": {
                    "type": "array",
                    "description": "Artwork ids or slugs.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "add_to": {
                    "type": "array",
                    "description": "Collection ids or slugs.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "remove_from": {
                    "type": "array",
                    "description": "Collection ids or slugs.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Add / remove artworks to / from collections",
            "content": {}
          }
        }
      }
    },
    "/api/v1/artworks/deleted": {
      "get": {
        "tags": [
          "artworks"
        ],
        "description": "Retrieve deleted artworks.",
        "operationId": "getApiV1ArtworksDeleted",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve deleted artworks.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/artworks/sellable": {
      "get": {
        "tags": [
          "artworks"
        ],
        "description": "Retrieve top sellable artworks.",
        "operationId": "getApiV1ArtworksSellable",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "created_at_since",
            "in": "query",
            "description": "Only return artworks created after this timestamp.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "min_artists_per_page",
            "in": "query",
            "description": "Minimum number of artists to feature in results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "min_price",
            "in": "query",
            "description": "Min artwork price filter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "max_price",
            "in": "query",
            "description": "Max artwork price filter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "min_career_stage",
            "in": "query",
            "description": "Min artist career stage.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "max_career_stage",
            "in": "query",
            "description": "Max artist career stage.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "category",
            "in": "query",
            "description": "Artwork category filter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "title",
                "-title",
                "created_at",
                "-created_at",
                "-created_at,-id",
                "deleted_at",
                "-deleted_at",
                "-iconicity",
                "-merchandisability",
                "published_at",
                "-published_at",
                "-partner_updated_at",
                "availability",
                "-recent_saves_count",
                "-last_offerable_activity_at"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve top sellable artworks.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/artworks": {
      "get": {
        "tags": [
          "artworks"
        ],
        "description": "Retrieve all not deleted artworks.",
        "operationId": "getApiV1Artworks",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "created_at_since",
            "in": "query",
            "description": "Only return artworks created after this timestamp.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "availability",
            "in": "query",
            "description": "Only return artworks with this availability status.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "admin_id",
            "in": "query",
            "description": "Only return artworks from partners that are managed by given admin.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partner_contract_type",
            "in": "query",
            "description": "Only return artworks from partners of a given contract_type.",
            "schema": {
              "type": "string",
              "enum": [
                "General",
                "Subscription",
                "Fair",
                "Custom"
              ]
            }
          },
          {
            "name": "published",
            "in": "query",
            "description": "Return only artworks in given published status.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "marketable",
            "in": "query",
            "description": "Works that are marketable.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "exclude_disliked_artworks",
            "in": "query",
            "description": "Exclude disliked artworks if authenticated.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "title",
                "-title",
                "created_at",
                "-created_at",
                "-created_at,-id",
                "deleted_at",
                "-deleted_at",
                "-iconicity",
                "-merchandisability",
                "published_at",
                "-published_at",
                "-partner_updated_at",
                "availability",
                "-recent_saves_count",
                "-last_offerable_activity_at"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "ids": {
                    "type": "array",
                    "description": "Returns these objects if passed in.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "artist_ids": {
                    "type": "array",
                    "description": "Only return artworks by these artists.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Retrieve all not deleted artworks.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/artworks_discovery": {
      "get": {
        "tags": [
          "artworks_discovery"
        ],
        "operationId": "getApiV1ArtworksDiscovery",
        "responses": {
          "200": {
            "description": "get ArtworksDiscovery(s)",
            "content": {}
          }
        }
      }
    },
    "/api/v1/artwork/{artwork_id}/inventory": {
      "put": {
        "tags": [
          "artwork"
        ],
        "description": "Create or update an artwork's inventory.",
        "operationId": "putApiV1ArtworkArtworkIdInventory",
        "parameters": [
          {
            "name": "artwork_id",
            "in": "path",
            "description": "Artwork id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1ArtworkArtworkIdInventory"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Create or update an artwork's inventory.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1ArtworkArtworkIdInventory"
      }
    },
    "/api/v1/artwork/{artwork_id}/images/reposition": {
      "post": {
        "tags": [
          "artwork"
        ],
        "description": "Reposition artwork images.",
        "operationId": "postApiV1ArtworkArtworkIdImagesReposition",
        "parameters": [
          {
            "name": "artwork_id",
            "in": "path",
            "description": "Artwork id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "image_ids"
                ],
                "type": "object",
                "properties": {
                  "image_ids": {
                    "type": "array",
                    "description": "Array of artwork image ids.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Reposition artwork images.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/artwork/{artwork_id}/images": {
      "get": {
        "tags": [
          "artwork"
        ],
        "description": "Retrieve artwork images.",
        "operationId": "getApiV1ArtworkArtworkIdImages",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "artwork_id",
            "in": "path",
            "description": "Artwork id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "position"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve artwork images.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/artwork/{artwork_id}/images/default/{id}": {
      "put": {
        "tags": [
          "artwork"
        ],
        "description": "Set the default image.",
        "operationId": "putApiV1ArtworkArtworkIdImagesDefaultId",
        "parameters": [
          {
            "name": "artwork_id",
            "in": "path",
            "description": "Artwork id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Default image id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Set the default image.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/artwork/{artwork_id}/image/{id}": {
      "put": {
        "tags": [
          "artwork"
        ],
        "description": "Update an artwork image.",
        "operationId": "putApiV1ArtworkArtworkIdImageId",
        "parameters": [
          {
            "name": "artwork_id",
            "in": "path",
            "description": "Artwork id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Image id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1ArtworkArtworkIdImage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update an artwork image.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1ArtworkArtworkIdImage"
      },
      "delete": {
        "tags": [
          "artwork"
        ],
        "description": "Remove an image from an artwork.",
        "operationId": "deleteApiV1ArtworkArtworkIdImageId",
        "parameters": [
          {
            "name": "artwork_id",
            "in": "path",
            "description": "Artwork id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Image id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Remove an image from an artwork.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/artwork/{artwork_id}/image": {
      "post": {
        "tags": [
          "artwork"
        ],
        "description": "Add an image to an artwork.",
        "operationId": "postApiV1ArtworkArtworkIdImage",
        "parameters": [
          {
            "name": "artwork_id",
            "in": "path",
            "description": "Artwork id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1ArtworkArtworkIdImage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Add an image to an artwork.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1ArtworkArtworkIdImage"
      }
    },
    "/api/v1/artwork/{artwork_id}/default_image(/{image_version})": {
      "get": {
        "tags": [
          "artwork"
        ],
        "description": "Get an artwork's default image.",
        "operationId": "getApiV1ArtworkArtworkIdDefaultImage(ImageVersion)",
        "parameters": [
          {
            "name": "artwork_id",
            "in": "path",
            "description": "Artwork id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "image_version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get an artwork's default image.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/artwork/{artwork_id}/image/{id}(/{image_version})": {
      "get": {
        "tags": [
          "artwork"
        ],
        "description": "Get an artwork's image.",
        "operationId": "getApiV1ArtworkArtworkIdImageId(ImageVersion)",
        "parameters": [
          {
            "name": "artwork_id",
            "in": "path",
            "description": "Artwork id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Image id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "image_version",
            "in": "path",
            "description": "Version of the image to download.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get an artwork's image.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/artwork/{id}/genome": {
      "get": {
        "tags": [
          "artwork"
        ],
        "description": "Retrieve an artwork's genome.",
        "operationId": "getApiV1ArtworkIdGenome",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Artwork id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve an artwork's genome.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "artwork"
        ],
        "description": "Update an artwork's genome.",
        "operationId": "putApiV1ArtworkIdGenome",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Artwork id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1ArtworkIdGenome"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update an artwork's genome.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1ArtworkIdGenome"
      },
      "delete": {
        "tags": [
          "artwork"
        ],
        "description": "Clear an artwork's genome.",
        "operationId": "deleteApiV1ArtworkIdGenome",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Artwork id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Clear an artwork's genome.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/artwork/{id}/genome/incomplete": {
      "put": {
        "tags": [
          "artwork"
        ],
        "description": "Mark an artwork's genome incomplete.",
        "operationId": "putApiV1ArtworkIdGenomeIncomplete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Artwork id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Mark an artwork's genome incomplete.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/artwork/{id}/genome/complete": {
      "put": {
        "tags": [
          "artwork"
        ],
        "description": "Mark an artwork's genome complete.",
        "operationId": "putApiV1ArtworkIdGenomeComplete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Artwork id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Mark an artwork's genome complete.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/artwork/{id}/view": {
      "post": {
        "tags": [
          "artwork"
        ],
        "description": "Record a view of an artwork.",
        "operationId": "postApiV1ArtworkIdView",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Artwork id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Record a view of an artwork.",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "artwork"
        ],
        "description": "Delete a recorded view of an artwork.",
        "operationId": "deleteApiV1ArtworkIdView",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Artwork id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete a recorded view of an artwork.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/artwork": {
      "post": {
        "tags": [
          "artwork"
        ],
        "description": "Create an artwork.",
        "operationId": "postApiV1Artwork",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1Artwork"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create an artwork.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1Artwork"
      }
    },
    "/api/v1/artwork/{id}": {
      "get": {
        "tags": [
          "artwork"
        ],
        "description": "Retrieve an artwork.",
        "operationId": "getApiV1ArtworkId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Artwork id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_deleted",
            "in": "query",
            "description": "If true, will allow admins/trusted apps to retrieve deleted works.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve an artwork.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "artwork"
        ],
        "description": "Update an existing artwork.",
        "operationId": "putApiV1ArtworkId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Artwork id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1Artwork"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update an existing artwork.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1Artwork"
      },
      "delete": {
        "tags": [
          "artwork"
        ],
        "description": "Delete an artwork.",
        "operationId": "deleteApiV1ArtworkId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Artwork id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "permanent",
            "in": "query",
            "description": "Permanently delete artwork.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete an artwork.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/artwork/{id}/tags": {
      "put": {
        "tags": [
          "artwork"
        ],
        "description": "Add/remove tags to an artwork.",
        "operationId": "putApiV1ArtworkIdTags",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Artwork id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "tags"
                ],
                "type": "object",
                "properties": {
                  "tags": {
                    "type": "array",
                    "description": "Artwork tags.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Add/remove tags to an artwork.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/artwork/{id}/artwork_inquiry_requests": {
      "get": {
        "tags": [
          "artwork"
        ],
        "description": "Retrieve all artwork inquiry requests for an artwork.",
        "operationId": "getApiV1ArtworkIdArtworkInquiryRequests",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Artwork id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "-created_at",
                "created_at",
                "-outcome",
                "outcome",
                "likely_to_purchase",
                "-likely_to_purchase",
                "status",
                "-status",
                "flagged",
                "-flagged",
                "contact_gallery",
                "-contact_gallery",
                "status,-likely_to_purchase,created_at",
                "last_message_received_at",
                "-last_message_received_at"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve all artwork inquiry requests for an artwork.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/artwork/{artwork_id}/edition_set/{id}/inventory": {
      "put": {
        "tags": [
          "artwork"
        ],
        "description": "Create or update an edition set's inventory.",
        "operationId": "putApiV1ArtworkArtworkIdEditionSetIdInventory",
        "parameters": [
          {
            "name": "artwork_id",
            "in": "path",
            "description": "Artwork id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Edition set id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1ArtworkArtworkIdEditionSetIdInventory"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Create or update an edition set's inventory.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1ArtworkArtworkIdEditionSetIdInventory"
      }
    },
    "/api/v1/artwork/{artwork_id}/edition_set/{id}": {
      "put": {
        "tags": [
          "artwork"
        ],
        "description": "Update an existing edition set.",
        "operationId": "putApiV1ArtworkArtworkIdEditionSetId",
        "parameters": [
          {
            "name": "artwork_id",
            "in": "path",
            "description": "Artwork id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Edition set id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1ArtworkArtworkIdEditionSet"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update an existing edition set.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1ArtworkArtworkIdEditionSet"
      },
      "delete": {
        "tags": [
          "artwork"
        ],
        "description": "Delete an existing edition set.",
        "operationId": "deleteApiV1ArtworkArtworkIdEditionSetId",
        "parameters": [
          {
            "name": "artwork_id",
            "in": "path",
            "description": "Artwork id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Edition set id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete an existing edition set.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/artwork/{artwork_id}/edition_set": {
      "post": {
        "tags": [
          "artwork"
        ],
        "description": "Create an artwork edition set.",
        "operationId": "postApiV1ArtworkArtworkIdEditionSet",
        "parameters": [
          {
            "name": "artwork_id",
            "in": "path",
            "description": "Artwork id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1ArtworkArtworkIdEditionSet"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create an artwork edition set.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1ArtworkArtworkIdEditionSet"
      }
    },
    "/api/v1/bank_account/{id}": {
      "get": {
        "tags": [
          "bank_account"
        ],
        "description": "Retrieve a bank account.",
        "operationId": "getApiV1BankAccountId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a bank account.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "bank_account"
        ],
        "description": "Update a bank account.",
        "operationId": "putApiV1BankAccountId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Bank account id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1BankAccount"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update a bank account.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1BankAccount"
      }
    },
    "/api/v1/bank_account": {
      "post": {
        "tags": [
          "bank_account"
        ],
        "description": "Add a bank account.",
        "operationId": "postApiV1BankAccount",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1BankAccount"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Add a bank account.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1BankAccount"
      }
    },
    "/api/v1/bidder_positions": {
      "get": {
        "tags": [
          "bidder_positions"
        ],
        "description": "Retrieve bidder positions.",
        "operationId": "getApiV1BidderPositions",
        "parameters": [
          {
            "name": "sale_id",
            "in": "query",
            "description": "Sale id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "artwork_id",
            "in": "query",
            "description": "Artwork id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sale_artwork_id",
            "in": "query",
            "description": "SaleArtwork id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "User placing bids.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "all",
            "in": "query",
            "description": "Return all Bidder Position fields. Default is false.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "retracted",
            "in": "query",
            "description": "Returns Bidder Positions that have (or have not) been retracted.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "-max_bid_amount_cents",
                "max_bid_amount_cents",
                "created_at",
                "-created_at",
                "-max_bid_amount_cents,created_at"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve bidder positions.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/bidder_position/{id}/retract": {
      "put": {
        "tags": [
          "bidder_position"
        ],
        "description": "Retract a bidder position.",
        "operationId": "putApiV1BidderPositionIdRetract",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Position id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1BidderPositionIdRetract"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Retract a bidder position.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1BidderPositionIdRetract"
      }
    },
    "/api/v1/bidder_position/{id}": {
      "get": {
        "tags": [
          "bidder_position"
        ],
        "description": "Retrieve a bidder position.",
        "operationId": "getApiV1BidderPositionId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Position id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a bidder position.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/bidder_position": {
      "post": {
        "tags": [
          "bidder_position"
        ],
        "description": "Place a bid with a maximum amount in cents.",
        "operationId": "postApiV1BidderPosition",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1BidderPosition"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Place a bid with a maximum amount in cents.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1BidderPosition"
      }
    },
    "/api/v1/bidder/{id}": {
      "get": {
        "tags": [
          "bidder"
        ],
        "description": "Retrieve a bidder registration.",
        "operationId": "getApiV1BidderId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Bidder id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a bidder registration.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "bidder"
        ],
        "description": "Register to bid.",
        "operationId": "putApiV1BidderId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Bidder id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1Bidder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Register to bid.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1Bidder"
      }
    },
    "/api/v1/bidder": {
      "get": {
        "tags": [
          "bidder"
        ],
        "description": "Find a bidder registration by phone number or paddle number.",
        "operationId": "getApiV1Bidder",
        "parameters": [
          {
            "name": "number",
            "in": "query",
            "description": "Bidder phone number or paddle number.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sale_id",
            "in": "query",
            "description": "Sale id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Find a bidder registration by phone number or paddle number.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "bidder"
        ],
        "description": "Register to bid.",
        "operationId": "postApiV1Bidder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1Bidder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Register to bid.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1Bidder"
      }
    },
    "/api/v1/bidders": {
      "get": {
        "tags": [
          "bidders"
        ],
        "description": "Retrieve all bidder registrations. Optionally scope by Sale or User.",
        "operationId": "getApiV1Bidders",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sale_id",
            "in": "query",
            "description": "Sale id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "User registered as bidder.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "created_at",
                "-created_at",
                "-last_bid_placed_at"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve all bidder registrations. Optionally scope by Sale or User.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/bids": {
      "get": {
        "tags": [
          "bids"
        ],
        "description": "Retrieve bids.",
        "operationId": "getApiV1Bids",
        "parameters": [
          {
            "name": "sale_id",
            "in": "query",
            "description": "Sale id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "artwork_id",
            "in": "query",
            "description": "Artwork id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bidder_position_id",
            "in": "query",
            "description": "Bidder position id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sale_artwork_id",
            "in": "query",
            "description": "Sale artwork id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "-number",
                "number",
                "-amount_cents,-_id",
                "amount_cents,-_id",
                "-_id"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve bids.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/bid/{id}": {
      "get": {
        "tags": [
          "bid"
        ],
        "description": "Retrieve a bid.",
        "operationId": "getApiV1BidId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Bid id, or the id/key of the LotEvent::MaxBidPlaced.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a bid.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/buyers_premiums": {
      "get": {
        "tags": [
          "buyers_premiums"
        ],
        "description": "Retrieve buyer's premiums.",
        "operationId": "getApiV1BuyersPremiums",
        "parameters": [
          {
            "name": "include_deleted",
            "in": "query",
            "description": "If true, will retrieve all including deleted premiums.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve buyer's premiums.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/callbacks/stripe_connect": {
      "post": {
        "tags": [
          "callbacks"
        ],
        "description": "Receive Connect webhooks from Stripe.",
        "operationId": "postApiV1CallbacksStripeConnect",
        "parameters": [
          {
            "name": "HTTP_STRIPE_SIGNATURE",
            "in": "header",
            "description": "Stripe request signature",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1CallbacksStripeConnect"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Receive Connect webhooks from Stripe.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1CallbacksStripeConnect"
      }
    },
    "/api/v1/callbacks/stripe": {
      "post": {
        "tags": [
          "callbacks"
        ],
        "description": "Receive webhooks from Stripe.",
        "operationId": "postApiV1CallbacksStripe",
        "parameters": [
          {
            "name": "HTTP_STRIPE_SIGNATURE",
            "in": "header",
            "description": "Stripe request signature",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1CallbacksStripe"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Receive webhooks from Stripe.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1CallbacksStripe"
      }
    },
    "/api/v1/callbacks/segment": {
      "post": {
        "tags": [
          "callbacks"
        ],
        "description": "Webhook for receiving updates from Segment",
        "operationId": "postApiV1CallbacksSegment",
        "responses": {
          "201": {
            "description": "Webhook for receiving updates from Segment",
            "content": {}
          }
        }
      }
    },
    "/api/v1/callbacks/jumio": {
      "post": {
        "tags": [
          "callbacks"
        ],
        "description": "Receive and process webhooks from Jumio",
        "operationId": "postApiV1CallbacksJumio",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1CallbacksJumio"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Receive and process webhooks from Jumio",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1CallbacksJumio"
      }
    },
    "/api/v1/callbacks/gemini": {
      "post": {
        "tags": [
          "callbacks"
        ],
        "description": "Receive webhook from Gemini Image Processing Service.",
        "operationId": "postApiV1CallbacksGemini",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1CallbacksGemini"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Receive webhook from Gemini Image Processing Service.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1CallbacksGemini"
      }
    },
    "/api/v1/callbacks/braze": {
      "post": {
        "tags": [
          "callbacks"
        ],
        "description": "Webhook for receiving updates from Braze",
        "operationId": "postApiV1CallbacksBraze",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1CallbacksBraze"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Webhook for receiving updates from Braze",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1CallbacksBraze"
      }
    },
    "/api/v1/collection/{id}/artists": {
      "get": {
        "tags": [
          "collection"
        ],
        "description": "Retrieve an existing collection's artists.",
        "operationId": "getApiV1CollectionIdArtists",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Collection id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_personal_artists",
            "in": "query",
            "description": "Include artists that have been created by the user.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "_slugs",
                "-_slugs",
                "created_at",
                "-created_at",
                "sortable_id",
                "-sortable_id",
                "-trending"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "artist_ids": {
                    "type": "array",
                    "description": "Artist ids.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Retrieve an existing collection's artists.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/collection/{id}": {
      "get": {
        "tags": [
          "collection"
        ],
        "description": "Retrieve an existing collection.",
        "operationId": "getApiV1CollectionId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Collection id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "private",
            "in": "query",
            "description": "Include private collections.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve an existing collection.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "collection"
        ],
        "description": "Update a collection.",
        "operationId": "putApiV1CollectionId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Collection id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1Collection"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update a collection.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1Collection"
      },
      "delete": {
        "tags": [
          "collection"
        ],
        "description": "Delete an existing collection.",
        "operationId": "deleteApiV1CollectionId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Collection id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete an existing collection.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/collection": {
      "post": {
        "tags": [
          "collection"
        ],
        "description": "Create a collection.",
        "operationId": "postApiV1Collection",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1Collection"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a collection.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1Collection"
      }
    },
    "/api/v1/collection/{collection_id}/artwork/{id}": {
      "post": {
        "tags": [
          "collection"
        ],
        "description": "Add an artwork to a collection.",
        "operationId": "postApiV1CollectionCollectionIdArtworkId",
        "parameters": [
          {
            "name": "collection_id",
            "in": "path",
            "description": "Collection id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Artwork id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1CollectionCollectionIdArtwork"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Add an artwork to a collection.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1CollectionCollectionIdArtwork"
      },
      "delete": {
        "tags": [
          "collection"
        ],
        "description": "Remove an artwork from a collection.",
        "operationId": "deleteApiV1CollectionCollectionIdArtworkId",
        "parameters": [
          {
            "name": "collection_id",
            "in": "path",
            "description": "Collection id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Artwork id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Remove an artwork from a collection.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/collection/{collection_id}/artworks": {
      "get": {
        "tags": [
          "collection"
        ],
        "description": "Retrieve artworks within a collection.",
        "operationId": "getApiV1CollectionCollectionIdArtworks",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "collection_id",
            "in": "path",
            "description": "Collection id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "private",
            "in": "query",
            "description": "Include private collections.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "fair_id",
            "in": "query",
            "description": "Limit artworks to those exhibiting at the specified fair.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sale_id",
            "in": "query",
            "description": "Limit artworks to those in the specified sale.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "in_auction",
            "in": "query",
            "description": "Limit artworks to those that are currently biddable in an auction.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "exclude_purchased_artworks",
            "in": "query",
            "description": "Exclude artworks that have been purchased on Artsy and automatically added to the collection.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "all",
            "in": "query",
            "description": "Return all artwork properties to privileged callers.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "for_sale",
            "in": "query",
            "description": "When true, only return for-sale artworks.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "price_min_major_usd",
            "in": "query",
            "description": "Minimum price in USD dollars.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "price_max_major_usd",
            "in": "query",
            "description": "Maximum price in USD dollars.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "position",
                "-position",
                "created_at",
                "-created_at"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "artworks": {
                    "type": "array",
                    "description": "Artworks to include.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Retrieve artworks within a collection.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/collections": {
      "get": {
        "tags": [
          "collections"
        ],
        "description": "Retrieve user's collections.",
        "operationId": "getApiV1Collections",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "private",
            "in": "query",
            "description": "Include private collections (will return both public and private collections if set to true).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "saves",
            "in": "query",
            "description": "Include only saves collections.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "default",
            "in": "query",
            "description": "Include only default collections.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "artwork_id",
            "in": "query",
            "description": "Artwork slug or id. If passed in, API will return collections (if any) the artwork appears in.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "created_at",
                "-created_at",
                "updated_at",
                "-updated_at"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve user's collections.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/collector_profiles": {
      "get": {
        "tags": [
          "collector_profiles"
        ],
        "description": "Retrieve collector profiles.",
        "operationId": "getApiV1CollectorProfiles",
        "parameters": [
          {
            "name": "inquired_partner_id",
            "in": "query",
            "description": "Only return collector profiles for users that started inquiries for a given partner",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "Only return collector profiles for a given email.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name_contains",
            "in": "query",
            "description": "Returns collector profiles for inquirers that contain a given term",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "user_id": {
                    "type": "array",
                    "description": "Only return the collector profile for a given user.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Retrieve collector profiles.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/collector_profile/{id}": {
      "put": {
        "tags": [
          "collector_profile"
        ],
        "description": "Update an existing collector profile.",
        "operationId": "putApiV1CollectorProfileId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Collector profile id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1CollectorProfile"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update an existing collector profile.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1CollectorProfile"
      }
    },
    "/api/v1/collector_profile_summary": {
      "get": {
        "tags": [
          "collector_profile_summary"
        ],
        "description": "Retrieve a summary of a collector profile/artwork combination.",
        "operationId": "getApiV1CollectorProfileSummary",
        "parameters": [
          {
            "name": "collector_profile_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "artwork_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a summary of a collector profile/artwork combination.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/credit_card/{id}": {
      "get": {
        "tags": [
          "credit_card"
        ],
        "description": "Retrieve a credit card.",
        "operationId": "getApiV1CreditCardId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Card id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a credit card.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/credit_cards": {
      "get": {
        "tags": [
          "credit_cards"
        ],
        "description": "Retrieve credit cards.",
        "operationId": "getApiV1CreditCards",
        "parameters": [
          {
            "name": "owner_type",
            "in": "query",
            "description": "Credit card owner type. Limits to returning only cards that belong to User or Partner.",
            "schema": {
              "type": "string",
              "enum": [
                "User",
                "Partner"
              ]
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "Only return credit cards for a given user.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partner_id",
            "in": "query",
            "description": "Only return credit cards for a given partner.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "created_at",
                "-created_at",
                "name",
                "-name",
                "brand",
                "-brand"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve credit cards.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/cultures": {
      "get": {
        "tags": [
          "cultures"
        ],
        "description": "Retrieve cultures.",
        "operationId": "getApiV1Cultures",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "name",
                "-name",
                "created_at",
                "-created_at",
                "updated_at",
                "-updated_at"
              ]
            }
          },
          {
            "name": "nationalities",
            "in": "query",
            "description": "Restrict to cultures which can serve as nationalities for artists (default: false).",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve cultures.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/devices": {
      "get": {
        "tags": [
          "devices"
        ],
        "description": "Retrieve devices.",
        "operationId": "getApiV1Devices",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "Only return devices for a given user.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve devices.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/device/{id}": {
      "get": {
        "tags": [
          "device"
        ],
        "description": "Retrieve an existing device.",
        "operationId": "getApiV1DeviceId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Existing device.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve an existing device.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "device"
        ],
        "description": "Update an existing device.",
        "operationId": "putApiV1DeviceId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Existing device.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1Device"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update an existing device.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1Device"
      },
      "delete": {
        "tags": [
          "device"
        ],
        "description": "Delete an existing device.",
        "operationId": "deleteApiV1DeviceId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Existing device.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete an existing device.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/device": {
      "post": {
        "tags": [
          "device"
        ],
        "description": "Create or update a device.",
        "operationId": "postApiV1Device",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1Device"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create or update a device.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1Device"
      }
    },
    "/api/v1/exchange_rates": {
      "get": {
        "tags": [
          "exchange_rates"
        ],
        "description": "Retrieve latest exchange rates.",
        "operationId": "getApiV1ExchangeRates",
        "responses": {
          "200": {
            "description": "Retrieve latest exchange rates.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/fair/{id}/shows": {
      "get": {
        "tags": [
          "fair"
        ],
        "description": "Retrieve all fair's shows.",
        "operationId": "getApiV1FairIdShows",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Fair id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partner",
            "in": "query",
            "description": "A partner. Returns only shows from the fair by that partner.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partner_region",
            "in": "query",
            "description": "A region. Returns only booths of partners from that region.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "private_partner",
            "in": "query",
            "description": "A boolean. Returns only booths with the specified value for private_partner.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "artist",
            "in": "query",
            "description": "An artist. Returns only shows from the fair by that artist.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "section",
            "in": "query",
            "description": "A fair section. Returns only booths in the specified section.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "artworks",
            "in": "query",
            "description": "If true, returns only booths with artworks.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "start_at",
                "-start_at",
                "end_at",
                "-end_at",
                "updated_at",
                "-updated_at",
                "name",
                "-name",
                "featured",
                "-featured",
                "sortable_name",
                "-sortable_name"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve all fair's shows.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/fair/{id}/sections": {
      "get": {
        "tags": [
          "fair"
        ],
        "description": "Fair's sections.",
        "operationId": "getApiV1FairIdSections",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Fair id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Fair's sections.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/fair/{id}/partners": {
      "get": {
        "tags": [
          "fair"
        ],
        "description": "Fair's partners.",
        "operationId": "getApiV1FairIdPartners",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Fair id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partner_region",
            "in": "query",
            "description": "Partner region.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "private_partner",
            "in": "query",
            "description": "Partners with a private partner type.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "name",
                "-name"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Fair's partners.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/fair/{id}": {
      "get": {
        "tags": [
          "fair"
        ],
        "description": "Retrieve a fair.",
        "operationId": "getApiV1FairId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Fair id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a fair.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "fair"
        ],
        "description": "Update an existing fair.",
        "operationId": "putApiV1FairId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Fair id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1Fair"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update an existing fair.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1Fair"
      },
      "delete": {
        "tags": [
          "fair"
        ],
        "description": "Delete an existing fair.",
        "operationId": "deleteApiV1FairId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Fair id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete an existing fair.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/fair/{fair_id}/image": {
      "put": {
        "tags": [
          "fair"
        ],
        "description": "Modify the image on a fair.",
        "operationId": "putApiV1FairFairIdImage",
        "parameters": [
          {
            "name": "fair_id",
            "in": "path",
            "description": "Fair id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1FairFairIdImage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Modify the image on a fair.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1FairFairIdImage"
      },
      "post": {
        "tags": [
          "fair"
        ],
        "description": "Add an image to a fair.",
        "operationId": "postApiV1FairFairIdImage",
        "parameters": [
          {
            "name": "fair_id",
            "in": "path",
            "description": "Fair id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1FairFairIdImage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Add an image to a fair.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1FairFairIdImage"
      }
    },
    "/api/v1/fair": {
      "post": {
        "tags": [
          "fair"
        ],
        "description": "Create a new fair.",
        "operationId": "postApiV1Fair",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1Fair"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a new fair.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1Fair"
      }
    },
    "/api/v1/fair/{id}/artists": {
      "get": {
        "tags": [
          "fair"
        ],
        "description": "Fair's artists.",
        "operationId": "getApiV1FairIdArtists",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Fair id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "section",
            "in": "query",
            "description": "Fair section.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partner_region",
            "in": "query",
            "description": "Partner region.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "name",
                "-name"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Fair's artists.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/fair/{fair_id}/fair_event/{id}": {
      "get": {
        "tags": [
          "fair"
        ],
        "description": "Retrieve a fair event.",
        "operationId": "getApiV1FairFairIdFairEventId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "FairEvent id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fair_id",
            "in": "path",
            "description": "Fair id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a fair event.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "fair"
        ],
        "description": "Update an existing fair event.",
        "operationId": "putApiV1FairFairIdFairEventId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "FairEvent id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fair_id",
            "in": "path",
            "description": "Fair id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1FairFairIdFairEvent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update an existing fair event.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1FairFairIdFairEvent"
      },
      "delete": {
        "tags": [
          "fair"
        ],
        "description": "Delete an existing fair event.",
        "operationId": "deleteApiV1FairFairIdFairEventId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "FairEvent id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fair_id",
            "in": "path",
            "description": "Fair id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete an existing fair event.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/fair/{fair_id}/fair_event": {
      "post": {
        "tags": [
          "fair"
        ],
        "description": "Create a new fair event.",
        "operationId": "postApiV1FairFairIdFairEvent",
        "parameters": [
          {
            "name": "fair_id",
            "in": "path",
            "description": "Fair id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1FairFairIdFairEvent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a new fair event.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1FairFairIdFairEvent"
      }
    },
    "/api/v1/fair/{fair_id}/fair_events": {
      "get": {
        "tags": [
          "fair"
        ],
        "description": "Retrieve all fair events.",
        "operationId": "getApiV1FairFairIdFairEvents",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fair_id",
            "in": "path",
            "description": "Fair id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fair_event_group_id",
            "in": "query",
            "description": "Fair event group id.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve all fair events.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/fair/{fair_id}/fair_event_group": {
      "post": {
        "tags": [
          "fair"
        ],
        "description": "Create a new fair event group.",
        "operationId": "postApiV1FairFairIdFairEventGroup",
        "parameters": [
          {
            "name": "fair_id",
            "in": "path",
            "description": "Fair id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1FairFairIdFairEventGroup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a new fair event group.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1FairFairIdFairEventGroup"
      }
    },
    "/api/v1/fair/{fair_id}/fair_event_group/{id}": {
      "get": {
        "tags": [
          "fair"
        ],
        "description": "Retrieve a fair event group.",
        "operationId": "getApiV1FairFairIdFairEventGroupId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "FairEventGroup id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fair_id",
            "in": "path",
            "description": "Fair id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a fair event group.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/fair/{fair_id}/fair_event_groups": {
      "get": {
        "tags": [
          "fair"
        ],
        "description": "Retrieve all fair event groups.",
        "operationId": "getApiV1FairFairIdFairEventGroups",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fair_id",
            "in": "path",
            "description": "Fair id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve all fair event groups.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/fair_organizers": {
      "get": {
        "tags": [
          "fair_organizers"
        ],
        "description": "Retrieve all fair organizers.",
        "operationId": "getApiV1FairOrganizers",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "name",
                "-created_at"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve all fair organizers.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/fair_organizer/{id}": {
      "get": {
        "tags": [
          "fair_organizer"
        ],
        "description": "Retrieve a fair organizer.",
        "operationId": "getApiV1FairOrganizerId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Fair organizer ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a fair organizer.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "fair_organizer"
        ],
        "description": "Update a fair organizer.",
        "operationId": "putApiV1FairOrganizerId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Fair organizer id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1FairOrganizer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update a fair organizer.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1FairOrganizer"
      },
      "delete": {
        "tags": [
          "fair_organizer"
        ],
        "description": "Delete a fair organizer.",
        "operationId": "deleteApiV1FairOrganizerId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Fair organizer id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete a fair organizer.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/fair_organizer": {
      "post": {
        "tags": [
          "fair_organizer"
        ],
        "description": "Create a fair organizer.",
        "operationId": "postApiV1FairOrganizer",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1FairOrganizer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a fair organizer.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1FairOrganizer"
      }
    },
    "/api/v1/fairs": {
      "get": {
        "tags": [
          "fairs"
        ],
        "description": "Retrieve all fairs.",
        "operationId": "getApiV1Fairs",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Limit to fairs that are 'current', 'running', 'closed' or 'upcoming'.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "active",
            "in": "query",
            "description": "Limit to fairs that are active.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "near",
            "in": "query",
            "description": "Coordinates to find fairs closest to.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "max_distance",
            "in": "query",
            "description": "Max distance to use when geo-locating fairs, defaults to 75km.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fair_organizer_id",
            "in": "query",
            "description": "Only return fairs that belong to this fair organizer.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "has_full_feature",
            "in": "query",
            "description": "Only return fairs that have full features",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "has_homepage_section",
            "in": "query",
            "description": "Only return fairs that have homepage sections",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "has_listing",
            "in": "query",
            "description": "Only return fairs that should have a listing",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "created_at",
                "-created_at",
                "start_at",
                "-start_at",
                "name",
                "-name"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "array",
                    "description": "Only return fairs that match passed in ids.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Retrieve all fairs.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/featured_links": {
      "get": {
        "tags": [
          "featured_links"
        ],
        "description": "Get all links, optionally by label, item_type, or owner.",
        "operationId": "getApiV1FeaturedLinks",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "created_at",
                "-created_at",
                "title",
                "-title"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get all links, optionally by label, item_type, or owner.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/featured_link/{id}": {
      "get": {
        "tags": [
          "featured_link"
        ],
        "description": "Retrieve an existing link.",
        "operationId": "getApiV1FeaturedLinkId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Featured Link id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve an existing link.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "featured_link"
        ],
        "description": "Update an existing link.",
        "operationId": "putApiV1FeaturedLinkId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Featured Link id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1FeaturedLink"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update an existing link.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1FeaturedLink"
      },
      "delete": {
        "tags": [
          "featured_link"
        ],
        "description": "Delete an existing link.",
        "operationId": "deleteApiV1FeaturedLinkId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Featured Link id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete an existing link.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/featured_link": {
      "post": {
        "tags": [
          "featured_link"
        ],
        "description": "Create a new link.",
        "operationId": "postApiV1FeaturedLink",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1FeaturedLink"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a new link.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1FeaturedLink"
      }
    },
    "/api/v1/features": {
      "get": {
        "tags": [
          "features"
        ],
        "description": "Retrieve features.",
        "operationId": "getApiV1Features",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "name",
                "-name",
                "created_at",
                "-created_at"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve features.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/feature/{id}/image(/{image_version})": {
      "get": {
        "tags": [
          "feature"
        ],
        "description": "Get a feature's image.",
        "operationId": "getApiV1FeatureIdImage(ImageVersion)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Feature id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "image_version",
            "in": "path",
            "description": "Image version.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a feature's image.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/feature/{id}": {
      "get": {
        "tags": [
          "feature"
        ],
        "description": "Retrieve an existing feature.",
        "operationId": "getApiV1FeatureId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Feature id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve an existing feature.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "feature"
        ],
        "description": "Update an existing feature.",
        "operationId": "putApiV1FeatureId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Feature id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1Feature"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update an existing feature.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1Feature"
      },
      "delete": {
        "tags": [
          "feature"
        ],
        "description": "Delete an existing feature.",
        "operationId": "deleteApiV1FeatureId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Feature id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete an existing feature.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/feature": {
      "post": {
        "tags": [
          "feature"
        ],
        "description": "Create a feature.",
        "operationId": "postApiV1Feature",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1Feature"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a feature.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1Feature"
      }
    },
    "/api/v1/feedback": {
      "post": {
        "tags": [
          "feedback"
        ],
        "description": "Create feedback.",
        "operationId": "postApiV1Feedback",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1Feedback"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create feedback.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1Feedback"
      }
    },
    "/api/v1/filter/sale_artworks": {
      "get": {
        "tags": [
          "filter"
        ],
        "description": "Filtered sale artworks search.",
        "operationId": "getApiV1FilterSaleArtworks",
        "parameters": [
          {
            "name": "biddable_sale",
            "in": "query",
            "description": "Filter to sale biddable status.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "estimate_range",
            "in": "query",
            "description": "Auction lot estimate range.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_artworks_by_followed_artists",
            "in": "query",
            "description": "If true, will only include artworks by artists the user is following.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Result page",
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "marketable",
            "in": "query",
            "description": "Works that are marketable.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sale_id",
            "in": "query",
            "description": "Sale id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Maximum number of results to retrieve.",
            "schema": {
              "maximum": 100,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria",
            "schema": {
              "type": "string",
              "default": "position",
              "enum": [
                "position",
                "-position",
                "searchable_estimate",
                "-searchable_estimate",
                "bidder_positions_count",
                "-bidder_positions_count"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "aggregations": {
                    "type": "array",
                    "description": "Aggregations.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "artist_ids": {
                    "type": "array",
                    "description": "Artist ids.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "gene_ids": {
                    "type": "array",
                    "description": "Gene id array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Filtered sale artworks search.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/filter/artworks": {
      "get": {
        "tags": [
          "filter"
        ],
        "description": "Filtered artworks search.",
        "operationId": "getApiV1FilterArtworks",
        "parameters": [
          {
            "name": "acquireable",
            "in": "query",
            "description": "When true, will only return works available for ecommerce purchase.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "artist_id",
            "in": "query",
            "description": "Artist id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "artist_series_id",
            "in": "query",
            "description": "Artist series Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "at_auction",
            "in": "query",
            "description": "When true, will only return works at a current auction.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "color",
            "in": "query",
            "description": "Color",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dimension_range",
            "in": "query",
            "description": "Size",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "exclude_disliked_artworks",
            "in": "query",
            "description": "Exclude disliked artworks if authenticated.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "fair_id",
            "in": "query",
            "description": "Fair id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "for_sale",
            "in": "query",
            "description": "When true, will only return for sale artworks",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "gene_id",
            "in": "query",
            "description": "Temporary Gene id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "height",
            "in": "query",
            "description": "Height (inches)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_artworks_by_followed_artists",
            "in": "query",
            "description": "If true, will only include artworks by artists the user is following.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "include_medium_filter_in_aggregation",
            "in": "query",
            "description": "If true, wont drop medium filter from medium aggreagtion computation.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "include_unpublished",
            "in": "query",
            "description": "Include unpublished artworks",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "inquireable_only",
            "in": "query",
            "description": "When true, will return works that are inquireable but not acquireable.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "inquireable",
            "in": "query",
            "description": "When true, will only return inquireable works",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "keyword_match_exact",
            "in": "query",
            "description": "When true, will only return exact keyword match",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "keyword",
            "in": "query",
            "description": "Keyword search",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "marketable",
            "in": "query",
            "description": "When true, will only return marketable works (removing nude/provocative).",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "marketing_collection_id",
            "in": "query",
            "description": "Only return artworks in this marketing collection.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "medium",
            "in": "query",
            "description": "Temporary second slot for gene filtering",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offerable",
            "in": "query",
            "description": "When true, will only return works available for the Make offer option",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Result page",
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "partner_id",
            "in": "query",
            "description": "Partner id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partner_show_id",
            "in": "query",
            "description": "Partner Show Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "period",
            "in": "query",
            "description": "Period",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "price_range",
            "in": "query",
            "description": "Price range",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sale_id",
            "in": "query",
            "description": "Sale id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Maximum number of results to retrieve.",
            "schema": {
              "maximum": 100,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria",
            "schema": {
              "type": "string",
              "enum": [
                "-published_at",
                "published_at",
                "-year",
                "year",
                "-partner_updated_at",
                "partner_updated_at",
                "merchandisability",
                "-merchandisability",
                "prices",
                "-prices",
                "-has_price,prices",
                "-has_price,-prices",
                "sold,-has_price,prices",
                "sold,-has_price,-prices",
                "-decayed_merch",
                "-weighted_iconicity",
                "bidder_positions_count",
                "-bidder_positions_count",
                "sale_position",
                "-sale_position",
                "partner_show_position"
              ]
            }
          },
          {
            "name": "tag_id",
            "in": "query",
            "description": "Tag id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "use_seller_score",
            "in": "query",
            "description": "When true, will include `seller_score` in `-decayed_merch` sorting.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "user_price_range",
            "in": "query",
            "description": "Use current user's price range if available",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "width",
            "in": "query",
            "description": "Width (inches)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "additional_gene_ids": {
                    "type": "array",
                    "description": "Gene id array, combined via OR",
                    "items": {
                      "type": "string"
                    }
                  },
                  "aggregations": {
                    "type": "array",
                    "description": "Aggregations.",
                    "items": {
                      "type": "string",
                      "enum": [
                        "medium",
                        "followed_artists",
                        "attribution_class",
                        "dimension_range",
                        "for_sale",
                        "gallery",
                        "institution",
                        "partner",
                        "period",
                        "major_period",
                        "price_range",
                        "simple_price_histogram",
                        "color",
                        "total",
                        "artist",
                        "merchandisable_artists",
                        "location_city",
                        "artist_nationality",
                        "materials_terms",
                        "artist_series"
                      ]
                    }
                  },
                  "artist_ids": {
                    "type": "array",
                    "description": "Artist ids.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "artist_nationalities": {
                    "type": "array",
                    "description": "Artist nationalities",
                    "items": {
                      "type": "string"
                    }
                  },
                  "artist_series_ids": {
                    "type": "array",
                    "description": "Artist series ids (combined as OR)",
                    "items": {
                      "type": "string"
                    }
                  },
                  "attribution_class": {
                    "type": "array",
                    "description": "Possible attribution classes of artwork",
                    "items": {
                      "type": "string"
                    }
                  },
                  "colors": {
                    "type": "array",
                    "description": "Multiple colors (combined as an OR).",
                    "items": {
                      "type": "string"
                    }
                  },
                  "exclude_artwork_ids": {
                    "type": "array",
                    "description": "Array of artwork to ids to exclude",
                    "items": {
                      "type": "string"
                    }
                  },
                  "extra_aggregation_gene_ids": {
                    "type": "array",
                    "description": "Gene id array to include in aggregations",
                    "items": {
                      "type": "string"
                    }
                  },
                  "gene_ids": {
                    "type": "array",
                    "description": "Gene id array, combined via AND",
                    "items": {
                      "type": "string"
                    }
                  },
                  "ids": {
                    "type": "array",
                    "description": "Array of artwork ids",
                    "items": {
                      "type": "string"
                    }
                  },
                  "location_cities": {
                    "type": "array",
                    "description": "Location cities",
                    "items": {
                      "type": "string"
                    }
                  },
                  "major_periods": {
                    "type": "array",
                    "description": "Major Periods array.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "materials_terms": {
                    "type": "array",
                    "description": "Materials terms, detected from `medium`",
                    "items": {
                      "type": "string"
                    }
                  },
                  "partner_ids": {
                    "type": "array",
                    "description": "Partner ids (combined as an OR).",
                    "items": {
                      "type": "string"
                    }
                  },
                  "periods": {
                    "type": "array",
                    "description": "Period array.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "sizes": {
                    "type": "array",
                    "description": "Sizes",
                    "items": {
                      "type": "string",
                      "enum": [
                        "small",
                        "medium",
                        "large"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Filtered artworks search.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/filter/sales": {
      "get": {
        "tags": [
          "filter"
        ],
        "description": "Filtered sales search.",
        "operationId": "getApiV1FilterSales",
        "parameters": [
          {
            "name": "auction_state",
            "in": "query",
            "description": "One of upcoming, open or closed.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_artsy_licensed",
            "in": "query",
            "description": "When true, include this type of sale.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "include_benefit",
            "in": "query",
            "description": "When true, include this type of sale.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "include_live_auction",
            "in": "query",
            "description": "When true, include this type of sale.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "include_online_only",
            "in": "query",
            "description": "When true, include this type of sale.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria",
            "schema": {
              "type": "string",
              "default": "name",
              "enum": [
                "id",
                "-id",
                "name",
                "-name",
                "created_at",
                "-created_at",
                "start_at",
                "-start_at",
                "end_at",
                "-end_at",
                "eligible_sale_artworks_count",
                "-eligible_sale_artworks_count",
                "timely_at",
                "-timely_at",
                "timely_at,name",
                "-timely_at,name",
                "is_artsy_licensed,timely_at,name",
                "-is_artsy_licensed,timely_at,name"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Filtered sales search.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/follow_shows": {
      "get": {
        "tags": [
          "follow_shows"
        ],
        "description": "Get all FollowShow instances that target the current user",
        "operationId": "getApiV1FollowShows",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "near",
            "in": "query",
            "description": "Coordinates to find shows closest to.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "max_distance",
            "in": "query",
            "description": "Max distance to use when geo-locating shows (default: 75 km).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Return shows that are 'upcoming', 'running', 'closed', 'current', and 'closing_soon' .",
            "schema": {
              "type": "string",
              "enum": [
                "current",
                "running",
                "closed",
                "upcoming",
                "running_and_upcoming",
                "closing_soon",
                "active"
              ]
            }
          },
          {
            "name": "day_threshold",
            "in": "query",
            "description": "Number of days which will be used to filter upcoming and closing soon shows.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "show_ids": {
                    "type": "array",
                    "description": "Show IDs (not slugs) to include.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Get all FollowShow instances that target the current user",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "follow_shows"
        ],
        "description": "Add a show to the list of shows a user is following",
        "operationId": "postApiV1FollowShows",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1FollowShows"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Add a show to the list of shows a user is following",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1FollowShows"
      },
      "delete": {
        "tags": [
          "follow_shows"
        ],
        "description": "allow a user to unfollow a show",
        "operationId": "deleteApiV1FollowShows",
        "parameters": [
          {
            "name": "partner_show_id",
            "in": "query",
            "description": "ID of the show to follow.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "allow a user to unfollow a show",
            "content": {}
          }
        }
      }
    },
    "/api/v1/gene_families": {
      "get": {
        "tags": [
          "gene_families"
        ],
        "description": "Retrieve a list of gene families",
        "operationId": "getApiV1GeneFamilies",
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "name",
                "-name",
                "position",
                "-position"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a list of gene families",
            "content": {}
          }
        }
      }
    },
    "/api/v1/gene_type/{id}/genes": {
      "get": {
        "tags": [
          "gene_type"
        ],
        "description": "Retrieve deep data for all genes of a particular gene type.",
        "operationId": "getApiV1GeneTypeIdGenes",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Gene type id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "name",
                "-name",
                "counts.artists",
                "-counts.artists",
                "counts.artworks",
                "-counts.artworks",
                "published",
                "-published",
                "automated",
                "-automated"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve deep data for all genes of a particular gene type.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/gene_type": {
      "post": {
        "tags": [
          "gene_type"
        ],
        "description": "Create a gene type.",
        "operationId": "postApiV1GeneType",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1GeneType"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a gene type.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1GeneType"
      }
    },
    "/api/v1/gene_type/{id}": {
      "get": {
        "tags": [
          "gene_type"
        ],
        "description": "Retrieve a gene type.",
        "operationId": "getApiV1GeneTypeId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Gene type id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a gene type.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "gene_type"
        ],
        "description": "Updated a gene type.",
        "operationId": "putApiV1GeneTypeId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Gene type id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1GeneType"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Updated a gene type.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1GeneType"
      },
      "delete": {
        "tags": [
          "gene_type"
        ],
        "description": "Delete a gene type.",
        "operationId": "deleteApiV1GeneTypeId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Gene type id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete a gene type.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/gene_types": {
      "get": {
        "tags": [
          "gene_types"
        ],
        "description": "Retrieve all gene types.",
        "operationId": "getApiV1GeneTypes",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "name",
                "-name",
                "published",
                "-published"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve all gene types.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/gene/{id}/artworks/all": {
      "get": {
        "tags": [
          "gene"
        ],
        "description": "Retrieve deep data for all partner artworks.",
        "operationId": "getApiV1GeneIdArtworksAll",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "-created_at"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve deep data for all partner artworks.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/gene/{id}/similar": {
      "get": {
        "tags": [
          "gene"
        ],
        "description": "Retrieve similar genes.",
        "operationId": "getApiV1GeneIdSimilar",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Gene id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "exclude_gene_ids": {
                    "type": "array",
                    "description": "Array of gene ids to exclude, may result in all genes being excluded.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Retrieve similar genes.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/gene/{id}/artworks": {
      "get": {
        "tags": [
          "gene"
        ],
        "description": "Retrieve artworks representative of a gene, ordered by gene value.",
        "operationId": "getApiV1GeneIdArtworks",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Gene id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve artworks representative of a gene, ordered by gene value.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/gene/{id}/artists": {
      "get": {
        "tags": [
          "gene"
        ],
        "description": "Retrieve artists representative of a gene, ordered by gene value.",
        "operationId": "getApiV1GeneIdArtists",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Gene id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "exclude_artists_without_artworks",
            "in": "query",
            "description": "Exclude artists that don't have any artworks.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "min_value",
            "in": "query",
            "description": "Minimum gene value.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve artists representative of a gene, ordered by gene value.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/gene": {
      "post": {
        "tags": [
          "gene"
        ],
        "description": "Create a gene.",
        "operationId": "postApiV1Gene",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1Gene"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a gene.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1Gene"
      }
    },
    "/api/v1/gene/{id}": {
      "get": {
        "tags": [
          "gene"
        ],
        "description": "Retrieve a gene.",
        "operationId": "getApiV1GeneId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Gene id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a gene.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "gene"
        ],
        "description": "Updated a gene.",
        "operationId": "putApiV1GeneId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Gene id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1Gene"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Updated a gene.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1Gene"
      },
      "delete": {
        "tags": [
          "gene"
        ],
        "description": "Delete a gene.",
        "operationId": "deleteApiV1GeneId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Gene id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete a gene.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/gene/{id}/image(/{image_version})": {
      "get": {
        "tags": [
          "gene"
        ],
        "description": "Get a gene's image.",
        "operationId": "getApiV1GeneIdImage(ImageVersion)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Gene id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "image_version",
            "in": "path",
            "description": "Image version.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a gene's image.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/genes/partner_applied": {
      "get": {
        "tags": [
          "genes"
        ],
        "description": "Retrieve all genes that are available for partner applied categories.",
        "operationId": "getApiV1GenesPartnerApplied",
        "responses": {
          "200": {
            "description": "Retrieve all genes that are available for partner applied categories.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/genes/all": {
      "get": {
        "tags": [
          "genes"
        ],
        "description": "Retrieve all genes, with all json.",
        "operationId": "getApiV1GenesAll",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "name",
                "-name",
                "counts.artists",
                "-counts.artists",
                "counts.artworks",
                "-counts.artworks",
                "published",
                "-published",
                "automated",
                "-automated"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve all genes, with all json.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/genes": {
      "get": {
        "tags": [
          "genes"
        ],
        "description": "Retrieve all genes.",
        "operationId": "getApiV1Genes",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "published",
            "in": "query",
            "description": "Only include genes that are published (only applies for admins).",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "name",
                "-name",
                "counts.artists",
                "-counts.artists",
                "counts.artworks",
                "-counts.artworks",
                "published",
                "-published",
                "automated",
                "-automated"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve all genes.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/genome/map": {
      "get": {
        "tags": [
          "genome"
        ],
        "description": "Retrieve a genome map, ie. all genes organized by type.",
        "operationId": "getApiV1GenomeMap",
        "responses": {
          "200": {
            "description": "Retrieve a genome map, ie. all genes organized by type.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/hero_units/{id}": {
      "get": {
        "tags": [
          "hero_units"
        ],
        "description": "Return a hero unit.",
        "operationId": "getApiV1HeroUnitsId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Hero Unit id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return a hero unit.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "hero_units"
        ],
        "description": "Update a hero unit.",
        "operationId": "putApiV1HeroUnitsId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Hero Unit id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1HeroUnits"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update a hero unit.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1HeroUnits"
      },
      "delete": {
        "tags": [
          "hero_units"
        ],
        "description": "Delete a hero unit.",
        "operationId": "deleteApiV1HeroUnitsId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete a hero unit.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/hero_units": {
      "get": {
        "tags": [
          "hero_units"
        ],
        "description": "Return hero units sorted by position.",
        "operationId": "getApiV1HeroUnits",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return hero units sorted by position.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "hero_units"
        ],
        "description": "Create a hero unit.",
        "operationId": "postApiV1HeroUnits",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1HeroUnits"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a hero unit.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1HeroUnits"
      }
    },
    "/api/v1/identity_verifications": {
      "get": {
        "tags": [
          "identity_verifications"
        ],
        "description": "Retrieve a list of user identity verifications",
        "operationId": "getApiV1IdentityVerifications",
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "-created_at"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a list of user identity verifications",
            "content": {}
          }
        }
      }
    },
    "/api/v1/identity_verification/{id}/scan_references": {
      "get": {
        "tags": [
          "identity_verification"
        ],
        "description": "fetch the scan references that have been created for an identity verification",
        "operationId": "getApiV1IdentityVerificationIdScanReferences",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "fetch the scan references that have been created for an identity verification",
            "content": {}
          }
        }
      }
    },
    "/api/v1/identity_verification/{id}/override": {
      "post": {
        "tags": [
          "identity_verification"
        ],
        "description": "manually set the state on an identity verification",
        "operationId": "postApiV1IdentityVerificationIdOverride",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1IdentityVerificationIdOverride"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "manually set the state on an identity verification",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1IdentityVerificationIdOverride"
      }
    },
    "/api/v1/identity_verification/{id}/overrides": {
      "get": {
        "tags": [
          "identity_verification"
        ],
        "description": "fetch the overrides that have been applied to an identity verification",
        "operationId": "getApiV1IdentityVerificationIdOverrides",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "fetch the overrides that have been applied to an identity verification",
            "content": {}
          }
        }
      }
    },
    "/api/v1/identity_verification/{id}/start": {
      "put": {
        "tags": [
          "identity_verification"
        ],
        "description": "Call external identity verification service and return URL allowing the client to verify their identity",
        "operationId": "putApiV1IdentityVerificationIdStart",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Call external identity verification service and return URL allowing the client to verify their identity",
            "content": {}
          }
        }
      }
    },
    "/api/v1/identity_verification": {
      "post": {
        "tags": [
          "identity_verification"
        ],
        "description": "Create an identity verification",
        "operationId": "postApiV1IdentityVerification",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1IdentityVerification"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create an identity verification",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1IdentityVerification"
      }
    },
    "/api/v1/identity_verification/{id}": {
      "get": {
        "tags": [
          "identity_verification"
        ],
        "description": "Retrieve an identity verification.",
        "operationId": "getApiV1IdentityVerificationId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve an identity verification.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/inquiry_request_questions": {
      "get": {
        "tags": [
          "inquiry_request_questions"
        ],
        "description": "Retrieve the inquiry questions.",
        "operationId": "getApiV1InquiryRequestQuestions",
        "parameters": [
          {
            "name": "inquireable_type",
            "in": "query",
            "description": "Inquireable type.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "Artwork"
              ]
            }
          },
          {
            "name": "inquireable_id",
            "in": "query",
            "description": "Inquireable ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve the inquiry questions.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/inquiry_request/{id}": {
      "get": {
        "tags": [
          "inquiry_request"
        ],
        "description": "Retrieve an inquiry request by id.",
        "operationId": "getApiV1InquiryRequestId",
        "parameters": [
          {
            "name": "outcome_token",
            "in": "query",
            "description": "Outcome Token used for authentication coming from email",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve an inquiry request by id.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "inquiry_request"
        ],
        "description": "Update an existing inquiry request.",
        "operationId": "putApiV1InquiryRequestId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1InquiryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update an existing inquiry request.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1InquiryRequest"
      },
      "delete": {
        "tags": [
          "inquiry_request"
        ],
        "description": "Delete an existing inquiry request.",
        "operationId": "deleteApiV1InquiryRequestId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete an existing inquiry request.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/inquiry_request/{id}/status": {
      "post": {
        "tags": [
          "inquiry_request"
        ],
        "description": "Add a status to an inquiry request.",
        "operationId": "postApiV1InquiryRequestIdStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Artwork inquiry request id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1InquiryRequestIdStatus"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Add a status to an inquiry request.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1InquiryRequestIdStatus"
      }
    },
    "/api/v1/inquiry_requests": {
      "get": {
        "tags": [
          "inquiry_requests"
        ],
        "description": "Retrieve all artwork inquiry requests.",
        "operationId": "getApiV1InquiryRequests",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Inquired object type. Limits to returning only ArtworkInquiryRequests or PartnerShowInquiryRequests.",
            "schema": {
              "type": "string",
              "enum": [
                "artwork",
                "partner_show"
              ]
            }
          },
          {
            "name": "partner_id",
            "in": "query",
            "description": "Only return inquiries for artworks belonging to a given partner.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "admin_id",
            "in": "query",
            "description": "Only return inquiries for artworks belonging to partners that are managed by a given admin.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fair_id",
            "in": "query",
            "description": "Only return inquiries for artworks that are part of a given fair.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sale_id",
            "in": "query",
            "description": "Only return inquiries for artworks that are part of a given auction.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "-created_at",
                "created_at",
                "-outcome",
                "outcome",
                "likely_to_purchase",
                "-likely_to_purchase",
                "status",
                "-status",
                "flagged",
                "-flagged",
                "contact_gallery",
                "-contact_gallery",
                "status,-likely_to_purchase,created_at",
                "last_message_received_at",
                "-last_message_received_at"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "array",
                    "description": "Only return inquiries with given id(s)",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Retrieve all artwork inquiry requests.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/invoice/{id}": {
      "get": {
        "tags": [
          "invoice"
        ],
        "description": "Get an individual invoice.",
        "operationId": "getApiV1InvoiceId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The invoice ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get an individual invoice.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "invoice"
        ],
        "description": "Update an invoice.",
        "operationId": "putApiV1InvoiceId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The invoice ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1Invoice"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update an invoice.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1Invoice"
      }
    },
    "/api/v1/invoice": {
      "get": {
        "tags": [
          "invoice"
        ],
        "description": "Get a ready/paid invoice by token.",
        "operationId": "getApiV1Invoice",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The invoice's secret token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a ready/paid invoice by token.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "invoice"
        ],
        "description": "Create an invoice.",
        "operationId": "postApiV1Invoice",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1Invoice"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create an invoice.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1Invoice"
      }
    },
    "/api/v1/invoice/{invoice_id}/payment": {
      "post": {
        "tags": [
          "invoice"
        ],
        "description": "Add a payment.",
        "operationId": "postApiV1InvoiceInvoiceIdPayment",
        "parameters": [
          {
            "name": "invoice_id",
            "in": "path",
            "description": "The invoice id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1InvoiceInvoiceIdPayment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Add a payment.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1InvoiceInvoiceIdPayment"
      }
    },
    "/api/v1/invoice/{invoice_id}/line_item/{id}": {
      "put": {
        "tags": [
          "invoice"
        ],
        "description": "Update a line item.",
        "operationId": "putApiV1InvoiceInvoiceIdLineItemId",
        "parameters": [
          {
            "name": "invoice_id",
            "in": "path",
            "description": "The invoice id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The individual line item's id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1InvoiceInvoiceIdLineItem"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update a line item.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1InvoiceInvoiceIdLineItem"
      },
      "delete": {
        "tags": [
          "invoice"
        ],
        "description": "Delete a line item.",
        "operationId": "deleteApiV1InvoiceInvoiceIdLineItemId",
        "parameters": [
          {
            "name": "invoice_id",
            "in": "path",
            "description": "The invoice id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The individual line item's id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete a line item.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/invoice/{invoice_id}/line_item": {
      "post": {
        "tags": [
          "invoice"
        ],
        "description": "Add a line item.",
        "operationId": "postApiV1InvoiceInvoiceIdLineItem",
        "parameters": [
          {
            "name": "invoice_id",
            "in": "path",
            "description": "The invoice id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1InvoiceInvoiceIdLineItem"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Add a line item.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1InvoiceInvoiceIdLineItem"
      }
    },
    "/api/v1/invoices": {
      "get": {
        "tags": [
          "invoices"
        ],
        "description": "Get invoices.",
        "operationId": "getApiV1Invoices",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "Return invoices that belong to a given user.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "Optional invoice state.",
            "schema": {
              "type": "string",
              "enum": [
                "draft",
                "ready",
                "paid",
                "canceled"
              ]
            }
          },
          {
            "name": "sale_id",
            "in": "query",
            "description": "Optional sale.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "artwork_id",
            "in": "query",
            "description": "Optional artwork.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sale_artwork_id",
            "in": "query",
            "description": "Optional artwork in a sale or auction.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get invoices.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/labs": {
      "get": {
        "tags": [
          "labs"
        ],
        "description": "Retrieve all available lab features.",
        "operationId": "getApiV1Labs",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve all available lab features.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/maps": {
      "get": {
        "tags": [
          "maps"
        ],
        "description": "Retrieve maps.",
        "operationId": "getApiV1Maps",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fair_id",
            "in": "query",
            "description": "Return maps for the given fair.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve maps.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/marketing_collections/{marketing_collection_id}/artworks/{artwork_id}": {
      "post": {
        "tags": [
          "marketing_collections"
        ],
        "description": "Adds an artwork to a manually curated collection",
        "operationId": "postApiV1MarketingCollectionsMarketingCollectionIdArtworksArtworkId",
        "parameters": [
          {
            "name": "marketing_collection_id",
            "in": "path",
            "description": "Marketing collection ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "artwork_id",
            "in": "path",
            "description": "Artwork ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Adds an artwork to a manually curated collection",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "marketing_collections"
        ],
        "description": "Removes an artwork from a manually curated collection",
        "operationId": "deleteApiV1MarketingCollectionsMarketingCollectionIdArtworksArtworkId",
        "parameters": [
          {
            "name": "marketing_collection_id",
            "in": "path",
            "description": "Marketing collection ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "artwork_id",
            "in": "path",
            "description": "Artwork ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Removes an artwork from a manually curated collection",
            "content": {}
          }
        }
      }
    },
    "/api/v1/marketing_collections/{id}": {
      "get": {
        "tags": [
          "marketing_collections"
        ],
        "description": "Retrieve a marketing collection.",
        "operationId": "getApiV1MarketingCollectionsId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Marketing collection ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a marketing collection.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/marketing_collections": {
      "get": {
        "tags": [
          "marketing_collections"
        ],
        "description": "Retrieve marketing collections.",
        "operationId": "getApiV1MarketingCollections",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "created_at",
                "-created_at",
                "updated_at",
                "-updated_at"
              ]
            }
          },
          {
            "name": "is_featured_artist_content",
            "in": "query",
            "description": "Filter by featured artist content",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "artist_id",
            "in": "query",
            "description": "Filter by artist ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "related_to_collection_id",
            "in": "query",
            "description": "Filter by related collection ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "category",
            "in": "query",
            "description": "Filter by category",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "ids": {
                    "type": "array",
                    "description": "Returns these objects if passed in.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "slugs": {
                    "type": "array",
                    "description": "Filter by slugs",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Retrieve marketing collections.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/marketing_collections_categories": {
      "get": {
        "tags": [
          "marketing_collections_categories"
        ],
        "description": "Retrieve marketing collections grouped by category.",
        "operationId": "getApiV1MarketingCollectionsCategories",
        "responses": {
          "200": {
            "description": "Retrieve marketing collections grouped by category.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/match/partner/{id}/artists": {
      "get": {
        "tags": [
          "match"
        ],
        "description": "Match a partner's artists by term.",
        "operationId": "getApiV1MatchPartnerIdArtists",
        "parameters": [
          {
            "name": "term",
            "in": "query",
            "description": "Term to match.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Maximum number of items to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 5
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "exclude_ids": {
                    "type": "array",
                    "description": "Exclude ids from results",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Match a partner's artists by term.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/match/partner/{id}/shows": {
      "get": {
        "tags": [
          "match"
        ],
        "description": "Match a partner's partner shows by term.",
        "operationId": "getApiV1MatchPartnerIdShows",
        "parameters": [
          {
            "name": "term",
            "in": "query",
            "description": "Term to match.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Maximum number of items to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 5
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "exclude_ids": {
                    "type": "array",
                    "description": "Exclude ids from results",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Match a partner's partner shows by term.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/match/partner/{id}/artworks": {
      "get": {
        "tags": [
          "match"
        ],
        "description": "Match a partner's artworks by term.",
        "operationId": "getApiV1MatchPartnerIdArtworks",
        "parameters": [
          {
            "name": "term",
            "in": "query",
            "description": "Term to match.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Maximum number of items to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 5
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "visibility_level",
            "in": "query",
            "description": "Filtering based on visibility type",
            "schema": {
              "type": "string",
              "enum": [
                "unlisted",
                "listed"
              ]
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "exclude_ids": {
                    "type": "array",
                    "description": "Exclude ids from results",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Match a partner's artworks by term.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/match/sale_artworks": {
      "get": {
        "tags": [
          "match"
        ],
        "description": "Match sale artworks by term.",
        "operationId": "getApiV1MatchSaleArtworks",
        "parameters": [
          {
            "name": "term",
            "in": "query",
            "description": "Term to match.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Maximum number of items to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 5
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "sale_id",
            "in": "query",
            "description": "Sale id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_unpublished",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "visibility_level",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "unlisted",
                "listed"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "exclude_ids": {
                    "type": "array",
                    "description": "Exclude ids from results",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Match sale artworks by term.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/match/suggest": {
      "get": {
        "tags": [
          "match"
        ],
        "description": "Global Auto Suggest (by name).",
        "operationId": "getApiV1MatchSuggest",
        "parameters": [
          {
            "name": "term",
            "in": "query",
            "description": "Term to auto suggest for.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Maximum number of items to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "visible_to_public",
            "in": "query",
            "description": "Only return items visible to public.",
            "schema": {
              "type": "string",
              "default": "true"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "indexes": {
                    "type": "array",
                    "description": "Which models (ES indexes) to search.",
                    "items": {
                      "type": "string",
                      "default": ""
                    }
                  },
                  "aggregations": {
                    "type": "array",
                    "description": "Aggregations.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Global Auto Suggest (by name).",
            "content": {}
          }
        }
      }
    },
    "/api/v1/match": {
      "get": {
        "tags": [
          "match"
        ],
        "description": "Global Search (by name).",
        "operationId": "getApiV1Match",
        "parameters": [
          {
            "name": "term",
            "in": "query",
            "description": "Term to match.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Maximum number of items to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 5
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "visible_to_public",
            "in": "query",
            "description": "Only return items visible to public.",
            "schema": {
              "type": "string",
              "default": "true"
            }
          },
          {
            "name": "fair_id",
            "in": "query",
            "description": "Only return artists and shows at the given fair.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "exclude_ids": {
                    "type": "array",
                    "description": "Exclude ids from results",
                    "items": {
                      "type": "string"
                    }
                  },
                  "indexes": {
                    "type": "array",
                    "description": "Which models (ES indexes) to search.",
                    "items": {
                      "type": "string",
                      "default": ""
                    }
                  },
                  "aggregations": {
                    "type": "array",
                    "description": "Aggregations.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Global Search (by name).",
            "content": {}
          }
        }
      }
    },
    "/api/v1/match/users": {
      "get": {
        "tags": [
          "match"
        ],
        "description": "Autocomplete users by name & email.",
        "operationId": "getApiV1MatchUsers",
        "parameters": [
          {
            "name": "term",
            "in": "query",
            "description": "Term to match.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Maximum number of items to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 5
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "exclude_ids": {
                    "type": "array",
                    "description": "Exclude ids from results",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Autocomplete users by name & email.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/match/artists": {
      "get": {
        "tags": [
          "match"
        ],
        "description": "Search artists by name",
        "operationId": "getApiV1MatchArtists",
        "parameters": [
          {
            "name": "term",
            "in": "query",
            "description": "Term to match.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Maximum number of items to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 5
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Custom sort for artist search.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "target_supply",
            "in": "query",
            "description": "Filtering by artists that are a part of target supply.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "visible_to_public",
            "in": "query",
            "description": "Only return artists visible to public.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "exclude_ids": {
                    "type": "array",
                    "description": "Exclude ids from results",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Search artists by name",
            "content": {}
          }
        }
      }
    },
    "/api/v1/match/partner_shows": {
      "get": {
        "tags": [
          "match"
        ],
        "description": "Search partner shows by name",
        "operationId": "getApiV1MatchPartnerShows",
        "parameters": [
          {
            "name": "term",
            "in": "query",
            "description": "Term to match.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Maximum number of items to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 5
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "partner_id",
            "in": "query",
            "description": "Filtering by partner",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "galaxy_partner_id",
            "in": "query",
            "description": "Filtering by galaxy partner",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "is_reference",
            "in": "query",
            "description": "When true, will include reference-type shows as well.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "exclude_ids": {
                    "type": "array",
                    "description": "Exclude ids from results",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Search partner shows by name",
            "content": {}
          }
        }
      }
    },
    "/api/v1/match/sales": {
      "get": {
        "tags": [
          "match"
        ],
        "description": "Search sales by name",
        "operationId": "getApiV1MatchSales",
        "parameters": [
          {
            "name": "term",
            "in": "query",
            "description": "Term to match.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Maximum number of items to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 5
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "is_auction",
            "in": "query",
            "description": "Filter sales by auction type",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "exclude_ids": {
                    "type": "array",
                    "description": "Exclude ids from results",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Search sales by name",
            "content": {}
          }
        }
      }
    },
    "/api/v1/match/cultures": {
      "get": {
        "tags": [
          "match"
        ],
        "description": "Search cultures by name",
        "operationId": "getApiV1MatchCultures",
        "parameters": [
          {
            "name": "term",
            "in": "query",
            "description": "Term to match.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Maximum number of items to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 5
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "is_nationality",
            "in": "query",
            "description": "Filter cultures by nationality",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "exclude_ids": {
                    "type": "array",
                    "description": "Exclude ids from results",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Search cultures by name",
            "content": {}
          }
        }
      }
    },
    "/api/v1/match/genes": {
      "get": {
        "tags": [
          "match"
        ],
        "description": "Search genes by name",
        "operationId": "getApiV1MatchGenes",
        "parameters": [
          {
            "name": "term",
            "in": "query",
            "description": "Term to match.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Maximum number of items to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 5
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "exclude_ids": {
                    "type": "array",
                    "description": "Exclude ids from results",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Search genes by name",
            "content": {}
          }
        }
      }
    },
    "/api/v1/match/fairs": {
      "get": {
        "tags": [
          "match"
        ],
        "description": "Search fairs by name",
        "operationId": "getApiV1MatchFairs",
        "parameters": [
          {
            "name": "term",
            "in": "query",
            "description": "Term to match.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Maximum number of items to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 5
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "exclude_ids": {
                    "type": "array",
                    "description": "Exclude ids from results",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Search fairs by name",
            "content": {}
          }
        }
      }
    },
    "/api/v1/match/tags": {
      "get": {
        "tags": [
          "match"
        ],
        "description": "Autocomplete tags by name.",
        "operationId": "getApiV1MatchTags",
        "parameters": [
          {
            "name": "term",
            "in": "query",
            "description": "Term to match.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Maximum number of items to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 5
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "exclude_ids": {
                    "type": "array",
                    "description": "Exclude ids from results",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Autocomplete tags by name.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/match/profiles": {
      "get": {
        "tags": [
          "match"
        ],
        "description": "Autocomplete profiles by name.",
        "operationId": "getApiV1MatchProfiles",
        "parameters": [
          {
            "name": "term",
            "in": "query",
            "description": "Term to match.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Maximum number of items to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 5
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "exclude_ids": {
                    "type": "array",
                    "description": "Exclude ids from results",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Autocomplete profiles by name.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/match/partners": {
      "get": {
        "tags": [
          "match"
        ],
        "description": "Autocomplete partners by name.",
        "operationId": "getApiV1MatchPartners",
        "parameters": [
          {
            "name": "term",
            "in": "query",
            "description": "Term to match.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Maximum number of items to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 5
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "exclude_ids": {
                    "type": "array",
                    "description": "Exclude ids from results",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Autocomplete partners by name.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/match/pages": {
      "get": {
        "tags": [
          "match"
        ],
        "description": "Autocomplete pages by name.",
        "operationId": "getApiV1MatchPages",
        "parameters": [
          {
            "name": "term",
            "in": "query",
            "description": "Term to match.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Maximum number of items to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 5
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "exclude_ids": {
                    "type": "array",
                    "description": "Exclude ids from results",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Autocomplete pages by name.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/match/sets": {
      "get": {
        "tags": [
          "match"
        ],
        "description": "Autocomplete ordered_sets by name.",
        "operationId": "getApiV1MatchSets",
        "parameters": [
          {
            "name": "term",
            "in": "query",
            "description": "Term to match.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Maximum number of items to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 5
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "exclude_ids": {
                    "type": "array",
                    "description": "Exclude ids from results",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Autocomplete ordered_sets by name.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/match/hero_units": {
      "get": {
        "tags": [
          "match"
        ],
        "description": "Autocomplete hero_units by name.",
        "operationId": "getApiV1MatchHeroUnits",
        "parameters": [
          {
            "name": "term",
            "in": "query",
            "description": "Term to match.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Maximum number of items to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 5
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "exclude_ids": {
                    "type": "array",
                    "description": "Exclude ids from results",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Autocomplete hero_units by name.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/match/features": {
      "get": {
        "tags": [
          "match"
        ],
        "description": "Autocomplete features by name.",
        "operationId": "getApiV1MatchFeatures",
        "parameters": [
          {
            "name": "term",
            "in": "query",
            "description": "Term to match.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Maximum number of items to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 5
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "exclude_ids": {
                    "type": "array",
                    "description": "Exclude ids from results",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Autocomplete features by name.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/match/featured_links": {
      "get": {
        "tags": [
          "match"
        ],
        "description": "Autocomplete featured_links by name.",
        "operationId": "getApiV1MatchFeaturedLinks",
        "parameters": [
          {
            "name": "term",
            "in": "query",
            "description": "Term to match.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Maximum number of items to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 5
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "exclude_ids": {
                    "type": "array",
                    "description": "Exclude ids from results",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Autocomplete featured_links by name.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/match/fair_organizers": {
      "get": {
        "tags": [
          "match"
        ],
        "description": "Autocomplete fair_organizers by name.",
        "operationId": "getApiV1MatchFairOrganizers",
        "parameters": [
          {
            "name": "term",
            "in": "query",
            "description": "Term to match.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Maximum number of items to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 5
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "exclude_ids": {
                    "type": "array",
                    "description": "Exclude ids from results",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Autocomplete fair_organizers by name.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/match/artworks": {
      "get": {
        "tags": [
          "match"
        ],
        "description": "Autocomplete artworks by name.",
        "operationId": "getApiV1MatchArtworks",
        "parameters": [
          {
            "name": "term",
            "in": "query",
            "description": "Term to match.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "published",
            "in": "query",
            "description": "Published artworks.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "genomed",
            "in": "query",
            "description": "Genome marked as complete",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "fair_id",
            "in": "query",
            "description": "Fairs.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "artist_id",
            "in": "query",
            "description": "Artist.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partner_show_id",
            "in": "query",
            "description": "Partner Shows.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deleted",
            "in": "query",
            "description": "Marked as deleted.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partner_id",
            "in": "query",
            "description": "Partner.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Maximum number of items to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 5
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "visibility_level",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "unlisted",
                "listed"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Autocomplete artworks by name.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/me/anonymous_sessions": {
      "get": {
        "tags": [
          "me"
        ],
        "description": "Retrieve anonymous sessions.",
        "operationId": "getApiV1MeAnonymousSessions",
        "parameters": [
          {
            "name": "session_id",
            "in": "query",
            "description": "Session id associated with the anonymous sessions.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve anonymous sessions.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/me/anonymous_session/{id}": {
      "get": {
        "tags": [
          "me"
        ],
        "description": "Retrieve an anonymous session.",
        "operationId": "getApiV1MeAnonymousSessionId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Anonymous session id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "Email associated with the anonymous sessions.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "session_id",
            "in": "query",
            "description": "Session id associated with the anonymous sessions.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve an anonymous session.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "me"
        ],
        "description": "Update an existing anonymous session.",
        "operationId": "putApiV1MeAnonymousSessionId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Anonymous session id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1MeAnonymousSession"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update an existing anonymous session.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1MeAnonymousSession"
      }
    },
    "/api/v1/me/anonymous_session": {
      "put": {
        "tags": [
          "me"
        ],
        "description": "Updates an anonymous session. Uses cookied session_id if not specified.",
        "operationId": "putApiV1MeAnonymousSession",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1MeAnonymousSession"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Updates an anonymous session. Uses cookied session_id if not specified.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1MeAnonymousSession"
      },
      "post": {
        "tags": [
          "me"
        ],
        "description": "Creates [or updates] an anonymous session.",
        "operationId": "postApiV1MeAnonymousSession",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1MeAnonymousSession"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Creates [or updates] an anonymous session.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1MeAnonymousSession"
      }
    },
    "/api/v1/me/alert/{user_search_criteria_id}": {
      "put": {
        "tags": [
          "me"
        ],
        "description": "Update an alert.",
        "operationId": "putApiV1MeAlertUserSearchCriteriaId",
        "parameters": [
          {
            "name": "user_search_criteria_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1MeAlert"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update an alert.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1MeAlert"
      },
      "delete": {
        "tags": [
          "me"
        ],
        "description": "Soft-delete (disable) an alert.",
        "operationId": "deleteApiV1MeAlertUserSearchCriteriaId",
        "parameters": [
          {
            "name": "user_search_criteria_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Soft-delete (disable) an alert.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/me/alert/{id}": {
      "get": {
        "tags": [
          "me"
        ],
        "description": "Retrieve an alert.",
        "operationId": "getApiV1MeAlertId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of user search criteria OR search criteria",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve an alert.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/me/alert": {
      "post": {
        "tags": [
          "me"
        ],
        "description": "Create an alert.",
        "operationId": "postApiV1MeAlert",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1MeAlert"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create an alert.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1MeAlert"
      }
    },
    "/api/v1/me/alerts": {
      "get": {
        "tags": [
          "me"
        ],
        "operationId": "getApiV1MeAlerts",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria",
            "schema": {
              "type": "string",
              "enum": [
                "name",
                "-enabled_at"
              ]
            }
          },
          {
            "name": "search_criteria[acquireable]",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "search_criteria[at_auction]",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "search_criteria[dimension_range]",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search_criteria[for_sale]",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "search_criteria[height]",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search_criteria[inquireable_only]",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "search_criteria[keyword]",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search_criteria[offerable]",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "search_criteria[price_range]",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search_criteria[width]",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "search_criteria[additional_gene_ids]": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "search_criteria[artist_ids]": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "search_criteria[artist_series_ids]": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "search_criteria[attribution_class]": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "search_criteria[colors]": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "search_criteria[location_cities]": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "search_criteria[major_periods]": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "search_criteria[materials_terms]": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "search_criteria[partner_ids]": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "search_criteria[sizes]": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "get Alert(s)",
            "content": {}
          }
        }
      }
    },
    "/api/v1/me/artists": {
      "get": {
        "tags": [
          "me"
        ],
        "description": "Retrieve artists under management.",
        "operationId": "getApiV1MeArtists",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve artists under management.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/me/artwork_inquiry_requests": {
      "get": {
        "tags": [
          "me"
        ],
        "description": "Retrieve inquiry requests.",
        "operationId": "getApiV1MeArtworkInquiryRequests",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "artwork",
            "in": "query",
            "description": "Artwork id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "session_id",
            "in": "query",
            "description": "External session id to track logged out actions.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve inquiry requests.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/me/artwork_inquiry_request/{id}/send": {
      "put": {
        "tags": [
          "me"
        ],
        "description": "Send a delayed inquiry request.",
        "operationId": "putApiV1MeArtworkInquiryRequestIdSend",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Inquiry request id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1MeArtworkInquiryRequestIdSend"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Send a delayed inquiry request.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1MeArtworkInquiryRequestIdSend"
      }
    },
    "/api/v1/me/artwork_inquiry_request/{id}": {
      "get": {
        "tags": [
          "me"
        ],
        "description": "Retrieve an existing inquiry request.",
        "operationId": "getApiV1MeArtworkInquiryRequestId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Inquiry request id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "session_id",
            "in": "query",
            "description": "External session id to track logged out actions.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve an existing inquiry request.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "me"
        ],
        "description": "Update an existing inquiry request.",
        "operationId": "putApiV1MeArtworkInquiryRequestId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Inquiry request id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1MeArtworkInquiryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update an existing inquiry request.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1MeArtworkInquiryRequest"
      },
      "delete": {
        "tags": [
          "me"
        ],
        "description": "Delete an existing inquiry request.",
        "operationId": "deleteApiV1MeArtworkInquiryRequestId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Inquiry request id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "session_id",
            "in": "query",
            "description": "Client's key for anonymous session.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete an existing inquiry request.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/me/artwork_inquiry_request": {
      "post": {
        "tags": [
          "me"
        ],
        "description": "Create an artwork inquiry request.",
        "operationId": "postApiV1MeArtworkInquiryRequest",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1MeArtworkInquiryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create an artwork inquiry request.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1MeArtworkInquiryRequest"
      }
    },
    "/api/v1/me/trigger_campaign": {
      "post": {
        "tags": [
          "me"
        ],
        "description": "Trigger a campaign send.",
        "operationId": "postApiV1MeTriggerCampaign",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1MeTriggerCampaign"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Trigger a campaign send.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1MeTriggerCampaign"
      }
    },
    "/api/v1/me/lot_standings": {
      "get": {
        "tags": [
          "me"
        ],
        "description": "Retrieve my standing on given lots.",
        "operationId": "getApiV1MeLotStandings",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "-created_at"
              ]
            }
          },
          {
            "name": "sale_id",
            "in": "query",
            "description": "Sale id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "artwork_id",
            "in": "query",
            "description": "Artwork id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sale_artwork_id",
            "in": "query",
            "description": "SaleArtwork id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "live",
            "in": "query",
            "description": "Return only lots in live sales.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "causality_sync_off",
            "in": "query",
            "description": "Return only lots in sales with sync to causality off.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve my standing on given lots.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/me/labs": {
      "get": {
        "tags": [
          "me"
        ],
        "description": "Retrieve my lab features.",
        "operationId": "getApiV1MeLabs",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve my lab features.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/me/recently_viewed_artworks": {
      "post": {
        "tags": [
          "me"
        ],
        "description": "Record a recently viewed artwork.",
        "operationId": "postApiV1MeRecentlyViewedArtworks",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1MeRecentlyViewedArtworks"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Record a recently viewed artwork.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1MeRecentlyViewedArtworks"
      }
    },
    "/api/v1/me/user_flags": {
      "put": {
        "tags": [
          "me"
        ],
        "description": "Set (or unset) user flag.",
        "operationId": "putApiV1MeUserFlags",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1MeUserFlags"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Set (or unset) user flag.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1MeUserFlags"
      }
    },
    "/api/v1/me": {
      "get": {
        "tags": [
          "me"
        ],
        "description": "Retrieve current user info.",
        "operationId": "getApiV1Me",
        "responses": {
          "200": {
            "description": "Retrieve current user info.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "me"
        ],
        "description": "Update user info.",
        "operationId": "putApiV1Me",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1Me"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update user info.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1Me"
      },
      "delete": {
        "tags": [
          "me"
        ],
        "description": "Delete current user.",
        "operationId": "deleteApiV1Me",
        "parameters": [
          {
            "name": "explanation",
            "in": "query",
            "description": "Reason for deleting the account.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "Current password.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "Refeerrer location.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete current user.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/me/password": {
      "put": {
        "tags": [
          "me"
        ],
        "description": "Change current user password.",
        "operationId": "putApiV1MePassword",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1MePassword"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Change current user password.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1MePassword"
      }
    },
    "/api/v1/me/ping": {
      "get": {
        "tags": [
          "me"
        ],
        "description": "Validate current user token (only).",
        "operationId": "getApiV1MePing",
        "responses": {
          "200": {
            "description": "Validate current user token (only).",
            "content": {}
          }
        }
      }
    },
    "/api/v1/me/bidders": {
      "get": {
        "tags": [
          "me"
        ],
        "description": "Retrieve my bidders.",
        "operationId": "getApiV1MeBidders",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sale_id",
            "in": "query",
            "description": "Filter for a specific sale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "active",
            "in": "query",
            "description": "When true, limit results to active sales only",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve my bidders.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/me/bidder_positions": {
      "get": {
        "tags": [
          "me"
        ],
        "description": "Deprecated - returns an empty list.",
        "operationId": "getApiV1MeBidderPositions",
        "responses": {
          "200": {
            "description": "Deprecated - returns an empty list.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/me/token": {
      "post": {
        "tags": [
          "me"
        ],
        "description": "Get a token for a client app.",
        "operationId": "postApiV1MeToken",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1MeToken"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Get a token for a client app.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1MeToken"
      }
    },
    "/api/v1/me/trust_token": {
      "post": {
        "tags": [
          "me"
        ],
        "description": "Create a trust token valid for other Artsy services.",
        "operationId": "postApiV1MeTrustToken",
        "responses": {
          "201": {
            "description": "Create a trust token valid for other Artsy services.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/me/authentications/{provider}": {
      "post": {
        "tags": [
          "me"
        ],
        "description": "Link a 3rd party account.",
        "operationId": "postApiV1MeAuthenticationsProvider",
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "description": "A 3rd party account provider, such as facebook or apple.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1MeAuthentications"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Link a 3rd party account.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1MeAuthentications"
      },
      "delete": {
        "tags": [
          "me"
        ],
        "description": "Unlink a 3rd party account.",
        "operationId": "deleteApiV1MeAuthenticationsProvider",
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "description": "A 3rd party account provider, such as facebook or apple.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Unlink a 3rd party account.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/me/authentications": {
      "get": {
        "tags": [
          "me"
        ],
        "description": "Retrieve third party authentications.",
        "operationId": "getApiV1MeAuthentications",
        "responses": {
          "200": {
            "description": "Retrieve third party authentications.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/me/bank_accounts": {
      "get": {
        "tags": [
          "me"
        ],
        "description": "Retrieve bank accounts.",
        "operationId": "getApiV1MeBankAccounts",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "created_at",
                "-created_at",
                "bank_name",
                "-bank_name"
              ]
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Bank account type.",
            "schema": {
              "type": "string",
              "enum": [
                "us_bank_account",
                "sepa_debit"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve bank accounts.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/me/bank_account/{id}": {
      "delete": {
        "tags": [
          "me"
        ],
        "description": "Deactive a bank account.",
        "operationId": "deleteApiV1MeBankAccountId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Bank account id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deactive a bank account.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/me/bidder_position/{id}": {
      "get": {
        "tags": [
          "me"
        ],
        "description": "Retrieve a bidder position.",
        "operationId": "getApiV1MeBidderPositionId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Bidder Position id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a bidder position.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/me/bidder_position": {
      "post": {
        "tags": [
          "me"
        ],
        "description": "Place a bid with a maximum amount in cents.",
        "operationId": "postApiV1MeBidderPosition",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1MeBidderPosition"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Place a bid with a maximum amount in cents.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1MeBidderPosition"
      }
    },
    "/api/v1/me/collections": {
      "put": {
        "tags": [
          "me"
        ],
        "description": "Batch update Collections.",
        "operationId": "putApiV1MeCollections",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1MeCollections"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Batch update Collections.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1MeCollections"
      }
    },
    "/api/v1/me/collector_profile/icon": {
      "put": {
        "tags": [
          "me"
        ],
        "description": "Change user icon.",
        "operationId": "putApiV1MeCollectorProfileIcon",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1MeCollectorProfileIcon"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Change user icon.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1MeCollectorProfileIcon"
      },
      "delete": {
        "tags": [
          "me"
        ],
        "description": "Delete user icon.",
        "operationId": "deleteApiV1MeCollectorProfileIcon",
        "responses": {
          "204": {
            "description": "Delete user icon.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/me/collector_profile": {
      "get": {
        "tags": [
          "me"
        ],
        "description": "Get the existing collector profile for the current user or an anonymous session.",
        "operationId": "getApiV1MeCollectorProfile",
        "parameters": [
          {
            "name": "anonymous_session_id",
            "in": "query",
            "description": "Anonymous session id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "session_id",
            "in": "query",
            "description": "Session id associated with the anonymous session.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get the existing collector profile for the current user or an anonymous session.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "me"
        ],
        "description": "Update an existing collector profile for the current user or an anonymous session.",
        "operationId": "putApiV1MeCollectorProfile",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1MeCollectorProfile"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update an existing collector profile for the current user or an anonymous session.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1MeCollectorProfile"
      },
      "post": {
        "tags": [
          "me"
        ],
        "description": "Create a new collector profile for the current user or an anonymous session.",
        "operationId": "postApiV1MeCollectorProfile",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1MeCollectorProfile"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a new collector profile for the current user or an anonymous session.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1MeCollectorProfile"
      }
    },
    "/api/v1/me/collector_profile/collector_reference/{id}": {
      "put": {
        "tags": [
          "me"
        ],
        "description": "Update a collector reference.",
        "operationId": "putApiV1MeCollectorProfileCollectorReferenceId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1MeCollectorProfileCollectorReference"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update a collector reference.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1MeCollectorProfileCollectorReference"
      },
      "delete": {
        "tags": [
          "me"
        ],
        "description": "Delete an existing collector reference.",
        "operationId": "deleteApiV1MeCollectorProfileCollectorReferenceId",
        "parameters": [
          {
            "name": "anonymous_session_id",
            "in": "query",
            "description": "Anonymous session id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "session_id",
            "in": "query",
            "description": "Session id associated with the anonymous session.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete an existing collector reference.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/me/collector_profile/collector_references": {
      "get": {
        "tags": [
          "me"
        ],
        "description": "Retrieve all collector references for a collector profile.",
        "operationId": "getApiV1MeCollectorProfileCollectorReferences",
        "parameters": [
          {
            "name": "anonymous_session_id",
            "in": "query",
            "description": "Anonymous session id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "session_id",
            "in": "query",
            "description": "Session id associated with the anonymous session.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve all collector references for a collector profile.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/me/collector_profile/collector_reference": {
      "post": {
        "tags": [
          "me"
        ],
        "description": "Create a collector reference.",
        "operationId": "postApiV1MeCollectorProfileCollectorReference",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1MeCollectorProfileCollectorReference"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a collector reference.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1MeCollectorProfileCollectorReference"
      }
    },
    "/api/v1/me/confirmation_emails": {
      "post": {
        "tags": [
          "me"
        ],
        "description": "Send a confirmation email.",
        "operationId": "postApiV1MeConfirmationEmails",
        "responses": {
          "201": {
            "description": "Send a confirmation email.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/me/credit_cards": {
      "get": {
        "tags": [
          "me"
        ],
        "description": "Retrieve my credit cards.",
        "operationId": "getApiV1MeCreditCards",
        "parameters": [
          {
            "name": "qualified_for_bidding",
            "in": "query",
            "description": "Only return credit cards that are qualified_for_bidding.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "created_at",
                "-created_at",
                "name",
                "-name",
                "brand",
                "-brand"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve my credit cards.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "me"
        ],
        "description": "Add a credit card.",
        "operationId": "postApiV1MeCreditCards",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1MeCreditCards"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Add a credit card.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1MeCreditCards"
      }
    },
    "/api/v1/me/credit_card/{id}": {
      "delete": {
        "tags": [
          "me"
        ],
        "description": "Deactive a credit card.",
        "operationId": "deleteApiV1MeCreditCardId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Card id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deactive a credit card.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/me/follow/genes": {
      "get": {
        "tags": [
          "me"
        ],
        "description": "Retrieve genes that you follow.",
        "operationId": "getApiV1MeFollowGenes",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "genes": {
                    "type": "array",
                    "description": "Genes to include.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Retrieve genes that you follow.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/me/follow/artists": {
      "get": {
        "tags": [
          "me"
        ],
        "description": "Retrieve artists that you follow.",
        "operationId": "getApiV1MeFollowArtists",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fair_id",
            "in": "query",
            "description": "Fair within which to search for artists.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "show_id",
            "in": "query",
            "description": "Show within which to search for followed artists",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "artists": {
                    "type": "array",
                    "description": "Artists to include.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Retrieve artists that you follow.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/me/follow/artist/{id}": {
      "get": {
        "tags": [
          "me"
        ],
        "description": "Follow reference for a followed artist.",
        "operationId": "getApiV1MeFollowArtistId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Followed artist reference id or artist id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Follow reference for a followed artist.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "me"
        ],
        "description": "Update a followed artist reference.",
        "operationId": "putApiV1MeFollowArtistId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Followed artist reference id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1MeFollowArtist"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update a followed artist reference.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1MeFollowArtist"
      },
      "delete": {
        "tags": [
          "me"
        ],
        "description": "Stop following an artist.",
        "operationId": "deleteApiV1MeFollowArtistId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Followed artist reference id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Stop following an artist.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/me/follow/artist": {
      "post": {
        "tags": [
          "me"
        ],
        "description": "Follow an artist.",
        "operationId": "postApiV1MeFollowArtist",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1MeFollowArtist"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Follow an artist.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1MeFollowArtist"
      }
    },
    "/api/v1/me/follow/profiles/artworks": {
      "get": {
        "tags": [
          "me"
        ],
        "description": "Retrieve artworks based on profile follows.",
        "operationId": "getApiV1MeFollowProfilesArtworks",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "for_sale",
            "in": "query",
            "description": "If true, will only include for sale artworks.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "title",
                "-title",
                "created_at",
                "-created_at",
                "-created_at,-id",
                "deleted_at",
                "-deleted_at",
                "-iconicity",
                "-merchandisability",
                "published_at",
                "-published_at",
                "-partner_updated_at",
                "availability",
                "-recent_saves_count",
                "-last_offerable_activity_at"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve artworks based on profile follows.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/me/follow/artists/artworks": {
      "get": {
        "tags": [
          "me"
        ],
        "description": "Retrieve artworks based on artist follows.",
        "operationId": "getApiV1MeFollowArtistsArtworks",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "for_sale",
            "in": "query",
            "description": "If true, will only include for sale artworks.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "title",
                "-title",
                "created_at",
                "-created_at",
                "-created_at,-id",
                "deleted_at",
                "-deleted_at",
                "-iconicity",
                "-merchandisability",
                "published_at",
                "-published_at",
                "-partner_updated_at",
                "availability",
                "-recent_saves_count",
                "-last_offerable_activity_at"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve artworks based on artist follows.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/me/follow/gene/{id}": {
      "get": {
        "tags": [
          "me"
        ],
        "description": "Followed reference for a followed gene.",
        "operationId": "getApiV1MeFollowGeneId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Followed gene reference id or gene id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Followed reference for a followed gene.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "me"
        ],
        "description": "Update a followed gene reference.",
        "operationId": "putApiV1MeFollowGeneId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Followed gene reference id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1MeFollowGene"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update a followed gene reference.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1MeFollowGene"
      },
      "delete": {
        "tags": [
          "me"
        ],
        "description": "Stop following a gene.",
        "operationId": "deleteApiV1MeFollowGeneId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Followed gene reference id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Stop following a gene.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/me/follow/gene": {
      "post": {
        "tags": [
          "me"
        ],
        "description": "Follow a gene.",
        "operationId": "postApiV1MeFollowGene",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1MeFollowGene"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Follow a gene.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1MeFollowGene"
      }
    },
    "/api/v1/me/follow/profiles": {
      "get": {
        "tags": [
          "me"
        ],
        "description": "Retrieve profiles that you follow.",
        "operationId": "getApiV1MeFollowProfiles",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fair_id",
            "in": "query",
            "description": "Fair within which to search for followed partners.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "auto",
            "in": "query",
            "description": "If true, includes only machine-assisted follows.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "profiles": {
                    "type": "array",
                    "description": "Profiles to include.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "owner_types": {
                    "type": "array",
                    "description": "Restrict profiles to given owner type.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Retrieve profiles that you follow.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "me"
        ],
        "description": "Follow 1 or more profiles.",
        "operationId": "postApiV1MeFollowProfiles",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1MeFollowProfiles"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Follow 1 or more profiles.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1MeFollowProfiles"
      }
    },
    "/api/v1/me/follow/profile/{id}": {
      "get": {
        "tags": [
          "me"
        ],
        "description": "Followed reference for a followed profile.",
        "operationId": "getApiV1MeFollowProfileId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Followed profile reference id or profile handle.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Followed reference for a followed profile.",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "me"
        ],
        "description": "Stop following a profile.",
        "operationId": "deleteApiV1MeFollowProfileId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Followed profile reference id or profile handle.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Stop following a profile.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/me/follow/profile/{profile_id}": {
      "post": {
        "tags": [
          "me"
        ],
        "description": "Follow a profile.",
        "operationId": "postApiV1MeFollowProfileProfileId",
        "parameters": [
          {
            "name": "profile_id",
            "in": "path",
            "description": "Profile id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1MeFollowProfile"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Follow a profile.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1MeFollowProfile"
      }
    },
    "/api/v1/me/follow/profile": {
      "post": {
        "tags": [
          "me"
        ],
        "description": "Follow a profile.",
        "operationId": "postApiV1MeFollowProfile",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1MeFollowProfile"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Follow a profile.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1MeFollowProfile"
      }
    },
    "/api/v1/me/follow/shows": {
      "get": {
        "tags": [
          "me"
        ],
        "description": "Retrieve shows at a fair by partners whose profiles you follow.",
        "operationId": "getApiV1MeFollowShows",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fair_id",
            "in": "query",
            "description": "Fair within which to search for followed partners.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "auto",
            "in": "query",
            "description": "If true, includes only machine-assisted follows.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve shows at a fair by partners whose profiles you follow.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/me/follow/artists/shows": {
      "get": {
        "tags": [
          "me"
        ],
        "description": "Retrieve visible_to_public shows based on artist follows (default sorted by start_at).",
        "operationId": "getApiV1MeFollowArtistsShows",
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria",
            "schema": {
              "type": "string",
              "default": "start_at",
              "enum": [
                "created_at",
                "-created_at",
                "end_at",
                "-end_at",
                "start_at",
                "-start_at",
                "name",
                "-name",
                "-featured,-start_at",
                "-featured,-end_at",
                "sortable_name",
                "-sortable_name",
                "fully_qualified_name",
                "-fully_qualified_name",
                "-relevance,-start_at"
              ]
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Return shows that are 'current', 'running', 'closed' or 'upcoming'.",
            "schema": {
              "type": "string",
              "enum": [
                "current",
                "running",
                "closed",
                "upcoming",
                "running_and_upcoming",
                "closing_soon",
                "active"
              ]
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve visible_to_public shows based on artist follows (default sorted by start_at).",
            "content": {}
          }
        }
      }
    },
    "/api/v1/me/inquiry_introduction": {
      "post": {
        "tags": [
          "me"
        ],
        "description": "Generate gallery introduction based on params.",
        "operationId": "postApiV1MeInquiryIntroduction",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1MeInquiryIntroduction"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Generate gallery introduction based on params.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1MeInquiryIntroduction"
      }
    },
    "/api/v1/me/inquiry_requests": {
      "get": {
        "tags": [
          "me"
        ],
        "description": "Retrieve inquiry requests.",
        "operationId": "getApiV1MeInquiryRequests",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "inquireable_id",
            "in": "query",
            "description": "Optional inquireable id, but must include inquireable_type.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "inquireable_type",
            "in": "query",
            "description": "Optional inquireable type.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "artwork",
                "partner_show"
              ]
            }
          },
          {
            "name": "session_id",
            "in": "query",
            "description": "External session id to track logged out actions.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve inquiry requests.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/me/inquiry_request/{id}/send": {
      "put": {
        "tags": [
          "me"
        ],
        "description": "Send a delayed inquiry request.",
        "operationId": "putApiV1MeInquiryRequestIdSend",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Inquiry request id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1MeInquiryRequestIdSend"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Send a delayed inquiry request.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1MeInquiryRequestIdSend"
      }
    },
    "/api/v1/me/inquiry_request/{id}": {
      "get": {
        "tags": [
          "me"
        ],
        "description": "Retrieve an existing inquiry request.",
        "operationId": "getApiV1MeInquiryRequestId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Inquiry request id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "session_id",
            "in": "query",
            "description": "External session id to track logged out actions.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve an existing inquiry request.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "me"
        ],
        "description": "Update an existing inquiry request.",
        "operationId": "putApiV1MeInquiryRequestId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Inquiry request id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1MeInquiryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update an existing inquiry request.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1MeInquiryRequest"
      },
      "delete": {
        "tags": [
          "me"
        ],
        "description": "Delete an existing inquiry request.",
        "operationId": "deleteApiV1MeInquiryRequestId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Inquiry request id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "session_id",
            "in": "query",
            "description": "External session id to track logged out actions.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete an existing inquiry request.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/me/inquiry_request": {
      "post": {
        "tags": [
          "me"
        ],
        "description": "Create an inquiry request.",
        "operationId": "postApiV1MeInquiryRequest",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1MeInquiryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create an inquiry request.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1MeInquiryRequest"
      }
    },
    "/api/v1/me/lab/{id}": {
      "post": {
        "tags": [
          "me"
        ],
        "description": "Turn a lab feature on.",
        "operationId": "postApiV1MeLabId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Feature id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Turn a lab feature on.",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "me"
        ],
        "description": "Turn a lab feature off.",
        "operationId": "deleteApiV1MeLabId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Feature id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Turn a lab feature off.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/me/modules": {
      "get": {
        "tags": [
          "me"
        ],
        "description": "Retrieve states of eligible modules for a user",
        "operationId": "getApiV1MeModules",
        "responses": {
          "200": {
            "description": "Retrieve states of eligible modules for a user",
            "content": {}
          }
        }
      }
    },
    "/api/v1/me/my_collection_artworks": {
      "get": {
        "tags": [
          "me"
        ],
        "description": "Retrieve current user's MyCollection artworks",
        "operationId": "getApiV1MeMyCollectionArtworks",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "exclude_purchased_artworks",
            "in": "query",
            "description": "Exclude artworks that have been purchased on Artsy and automatically added to the collection.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "include_only_target_supply",
            "in": "query",
            "description": "Show only target supply artworks.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "position",
                "-position",
                "created_at",
                "-created_at"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "artworks": {
                    "type": "array",
                    "description": "Artworks to include.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "artist_ids": {
                    "type": "array",
                    "description": "Filter artworks by artist IDs.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Retrieve current user's MyCollection artworks",
            "content": {}
          }
        }
      }
    },
    "/api/v1/me/notifications/mark_as_seen": {
      "put": {
        "tags": [
          "me"
        ],
        "description": "Mark notifications feed as seen",
        "operationId": "putApiV1MeNotificationsMarkAsSeen",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1MeNotificationsMarkAsSeen"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Mark notifications feed as seen",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1MeNotificationsMarkAsSeen"
      }
    },
    "/api/v1/me/notifications": {
      "put": {
        "tags": [
          "me"
        ],
        "description": "Mark a user's notifications read",
        "operationId": "putApiV1MeNotifications",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1MeNotifications"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Mark a user's notifications read",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1MeNotifications"
      }
    },
    "/api/v1/me/notifications/{id}": {
      "get": {
        "tags": [
          "me"
        ],
        "description": "Retrieve one user's notification by notification ID",
        "operationId": "getApiV1MeNotificationsId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve one user's notification by notification ID",
            "content": {}
          }
        }
      }
    },
    "/api/v1/me/notifications/feed": {
      "get": {
        "tags": [
          "me"
        ],
        "description": "Retrieve a user's notifications in bundles",
        "operationId": "getApiV1MeNotificationsFeed",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "activity_types": {
                    "type": "array",
                    "description": "Filter notifications by activity types.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Retrieve a user's notifications in bundles",
            "content": {}
          }
        }
      }
    },
    "/api/v1/me/partners": {
      "get": {
        "tags": [
          "me"
        ],
        "description": "Retrieve partners under management.",
        "operationId": "getApiV1MePartners",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "partner_ids": {
                    "type": "array",
                    "description": "Array of partner IDs to search for.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Retrieve partners under management.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/me/partner_offers": {
      "get": {
        "tags": [
          "me"
        ],
        "description": "List partner offers for the current user",
        "operationId": "getApiV1MePartnerOffers",
        "parameters": [
          {
            "name": "artwork_id",
            "in": "query",
            "description": "Artwork ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "created_at",
                "-created_at",
                "end_at",
                "-end_at"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List partner offers for the current user",
            "content": {}
          }
        }
      }
    },
    "/api/v1/me/partner_offer/{id}": {
      "get": {
        "tags": [
          "me"
        ],
        "description": "Show a partner offer.",
        "operationId": "getApiV1MePartnerOfferId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Partner offer id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Show a partner offer.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/me/representations": {
      "get": {
        "tags": [
          "me"
        ],
        "description": "Retrieve specialist's representations.",
        "operationId": "getApiV1MeRepresentations",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "name",
                "-name",
                "email",
                "-email",
                "collector_since",
                "-collector_since"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve specialist's representations.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/me/request_price_estimate": {
      "post": {
        "tags": [
          "me"
        ],
        "description": "Request Price Estimate from the Artsy Specialist (does not fail if request has already been made)",
        "operationId": "postApiV1MeRequestPriceEstimate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1MeRequestPriceEstimate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Request Price Estimate from the Artsy Specialist (does not fail if request has already been made)",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1MeRequestPriceEstimate"
      }
    },
    "/api/v1/me/search_criteria/{id}": {
      "get": {
        "tags": [
          "me"
        ],
        "operationId": "getApiV1MeSearchCriteriaId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "get SearchCriteria(s)",
            "content": {}
          }
        }
      }
    },
    "/api/v1/me/second_factors/{id}": {
      "put": {
        "tags": [
          "me"
        ],
        "description": "Update a disabled app or SMS second factor",
        "operationId": "putApiV1MeSecondFactorsId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Second factor id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1MeSecondFactors"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update a disabled app or SMS second factor",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1MeSecondFactors"
      },
      "delete": {
        "tags": [
          "me"
        ],
        "description": "Disable (soft-delete) an enabled second factor",
        "operationId": "deleteApiV1MeSecondFactorsId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Second factor id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Disable (soft-delete) an enabled second factor",
            "content": {}
          }
        }
      }
    },
    "/api/v1/me/second_factors/{id}/enable": {
      "put": {
        "tags": [
          "me"
        ],
        "description": "Enable a disabled second factor",
        "operationId": "putApiV1MeSecondFactorsIdEnable",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Second factor id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1MeSecondFactorsIdEnable"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Enable a disabled second factor",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1MeSecondFactorsIdEnable"
      }
    },
    "/api/v1/me/second_factors/{id}/deliver": {
      "put": {
        "tags": [
          "me"
        ],
        "description": "Triggers delivery of a second factor",
        "operationId": "putApiV1MeSecondFactorsIdDeliver",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Second factor id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Triggers delivery of a second factor",
            "content": {}
          }
        }
      }
    },
    "/api/v1/me/second_factors": {
      "get": {
        "tags": [
          "me"
        ],
        "description": "Retrieve current user's enabled second factors.",
        "operationId": "getApiV1MeSecondFactors",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "kinds": {
                    "type": "array",
                    "description": "Filter by second factor kind.",
                    "items": {
                      "type": "string",
                      "enum": [
                        "app",
                        "backup",
                        "sms"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Retrieve current user's enabled second factors.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "me"
        ],
        "description": "Create a new app/sms second factor, or re-generate backups.",
        "operationId": "postApiV1MeSecondFactors",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1MeSecondFactors"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a new app/sms second factor, or re-generate backups.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1MeSecondFactors"
      }
    },
    "/api/v1/me/shows": {
      "get": {
        "tags": [
          "me"
        ],
        "description": "Retrieve shows based on artist follows, partner follows and location.",
        "operationId": "getApiV1MeShows",
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria",
            "schema": {
              "type": "string",
              "default": "start_at",
              "enum": [
                "created_at",
                "-created_at",
                "end_at",
                "-end_at",
                "start_at",
                "-start_at",
                "name",
                "-name",
                "-featured,-start_at",
                "-featured,-end_at",
                "sortable_name",
                "-sortable_name",
                "fully_qualified_name",
                "-fully_qualified_name",
                "-relevance,-start_at"
              ]
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Return shows that are 'current', 'running', 'closed' or 'upcoming'.",
            "schema": {
              "type": "string",
              "enum": [
                "current",
                "running",
                "closed",
                "upcoming",
                "running_and_upcoming",
                "closing_soon",
                "active"
              ]
            }
          },
          {
            "name": "near",
            "in": "query",
            "description": "Coordinates to return shows closest to.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "max_distance",
            "in": "query",
            "description": "Max distance to use when geo-locating shows, defaults to 75km.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve shows based on artist follows, partner follows and location.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/me/suggested/artists": {
      "get": {
        "tags": [
          "me"
        ],
        "description": "Retrieve suggested artists to follow. For now these are just related artists.",
        "operationId": "getApiV1MeSuggestedArtists",
        "parameters": [
          {
            "name": "artist_id",
            "in": "query",
            "description": "Artist id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "exclude_artists_without_forsale_artworks",
            "in": "query",
            "description": "If true, will only include artists with at least one published for-sale work.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "exclude_artists_without_artworks",
            "in": "query",
            "description": "If true, will only include artists with at least one published work.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "exclude_followed_artists",
            "in": "query",
            "description": "If true, will exclude followed artists.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "include_fallback_artists",
            "in": "query",
            "description": "If true, will include featured artists if no results are found",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "exclude_artist_ids": {
                    "type": "array",
                    "description": "Exclude these ids from results, may result in all artists being excluded.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Retrieve suggested artists to follow. For now these are just related artists.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/me/suggested/artworks/homepage": {
      "get": {
        "tags": [
          "me"
        ],
        "description": "Deprecated genomic recommendations API.",
        "operationId": "getApiV1MeSuggestedArtworksHomepage",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Limit.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 4
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deprecated genomic recommendations API.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/me/tasks": {
      "get": {
        "tags": [
          "me"
        ],
        "description": "List tasks for the current user",
        "operationId": "getApiV1MeTasks",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List tasks for the current user",
            "content": {}
          }
        }
      }
    },
    "/api/v1/me/task/{id}/acknowledge": {
      "put": {
        "tags": [
          "me"
        ],
        "description": "Acknowledge a task",
        "operationId": "putApiV1MeTaskIdAcknowledge",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Task id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Acknowledge a task",
            "content": {}
          }
        }
      }
    },
    "/api/v1/me/task/{id}/dismiss": {
      "put": {
        "tags": [
          "me"
        ],
        "description": "Dismiss a task",
        "operationId": "putApiV1MeTaskIdDismiss",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Task id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Dismiss a task",
            "content": {}
          }
        }
      }
    },
    "/api/v1/me/user_fair_actions": {
      "get": {
        "tags": [
          "me"
        ],
        "description": "Retrieve user fair actions for the current user or an anonymous session.",
        "operationId": "getApiV1MeUserFairActions",
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "-_id",
                "_id"
              ]
            }
          },
          {
            "name": "anonymous_session_id",
            "in": "query",
            "description": "Anonymous session id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "session_id",
            "in": "query",
            "description": "Session id associated with the anonymous session.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve user fair actions for the current user or an anonymous session.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/me/user_fair_action": {
      "post": {
        "tags": [
          "me"
        ],
        "description": "Create a user fair action for the current user or an anonymous session.",
        "operationId": "postApiV1MeUserFairAction",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1MeUserFairAction"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a user fair action for the current user or an anonymous session.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1MeUserFairAction"
      }
    },
    "/api/v1/me/user_interests": {
      "get": {
        "tags": [
          "me"
        ],
        "description": "Retrieve user interests of a collector profile.",
        "operationId": "getApiV1MeUserInterests",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "interest_type",
            "in": "query",
            "description": "Type of interest.",
            "schema": {
              "type": "string",
              "enum": [
                "Artist",
                "Gene"
              ]
            }
          },
          {
            "name": "interest_id",
            "in": "query",
            "description": "Id of the user Interest. Can be an Artist ID or a Gene ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "category",
            "in": "query",
            "description": "UserInterest Category",
            "schema": {
              "type": "string",
              "enum": [
                "collected_before",
                "interested_in_collecting"
              ]
            }
          },
          {
            "name": "anonymous_session_id",
            "in": "query",
            "description": "Anonymous session id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "session_id",
            "in": "query",
            "description": "Client's key for anonymous session.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve user interests of a collector profile.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/me/user_interest/{id}": {
      "get": {
        "tags": [
          "me"
        ],
        "description": "Get an interest bookmark.",
        "operationId": "getApiV1MeUserInterestId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Bookmarked interest reference id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "anonymous_session_id",
            "in": "query",
            "description": "Anonymous session id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "session_id",
            "in": "query",
            "description": "Session id associated with the anonymous session.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get an interest bookmark.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "me"
        ],
        "description": "Update a bookmarked interest reference.",
        "operationId": "putApiV1MeUserInterestId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Bookmarked interest reference id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1MeUserInterest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update a bookmarked interest reference.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1MeUserInterest"
      },
      "delete": {
        "tags": [
          "me"
        ],
        "description": "Stop bookmarking an interest.",
        "operationId": "deleteApiV1MeUserInterestId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Either the `id` or the `interest_id` of a user interest",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "anonymous_session_id",
            "in": "query",
            "description": "Anonymous session id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "session_id",
            "in": "query",
            "description": "Session id associated with the anonymous session.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Stop bookmarking an interest.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/me/user_interest": {
      "post": {
        "tags": [
          "me"
        ],
        "description": "Bookmark an interest.",
        "operationId": "postApiV1MeUserInterest",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1MeUserInterest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Bookmark an interest.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1MeUserInterest"
      }
    },
    "/api/v1/me/user_interest/artists": {
      "get": {
        "tags": [
          "me"
        ],
        "description": "Retrieve artists that you bookmarked.",
        "operationId": "getApiV1MeUserInterestArtists",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve artists that you bookmarked.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/merchant_accounts": {
      "get": {
        "tags": [
          "merchant_accounts"
        ],
        "description": "Retrieve merchant accounts.",
        "operationId": "getApiV1MerchantAccounts",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partner_id",
            "in": "query",
            "description": "Partner Id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_deactivated",
            "in": "query",
            "description": "Flag for including deactivated merchant accounts.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve merchant accounts.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/merchant_account/{id}": {
      "delete": {
        "tags": [
          "merchant_account"
        ],
        "description": "Deactivate a merchant account for a partner.",
        "operationId": "deleteApiV1MerchantAccountId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Merchant account Id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deactivate a merchant account for a partner.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/merchant_account": {
      "post": {
        "tags": [
          "merchant_account"
        ],
        "description": "Create or reactivate a merchant account for a partner.",
        "operationId": "postApiV1MerchantAccount",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1MerchantAccount"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create or reactivate a merchant account for a partner.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1MerchantAccount"
      }
    },
    "/api/v1/notification_preferences": {
      "get": {
        "tags": [
          "notification_preferences"
        ],
        "description": "Get notification preferences.",
        "operationId": "getApiV1NotificationPreferences",
        "parameters": [
          {
            "name": "authentication_token",
            "in": "query",
            "description": "Auth token.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get notification preferences.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "notification_preferences"
        ],
        "description": "Update notification preferences.",
        "operationId": "postApiV1NotificationPreferences",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1NotificationPreferences"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Update notification preferences.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1NotificationPreferences"
      }
    },
    "/api/v1/pages": {
      "get": {
        "tags": [
          "pages"
        ],
        "description": "Retrieve all pages.",
        "operationId": "getApiV1Pages",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "created_at",
                "-created_at",
                "name",
                "-name"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve all pages.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/page/{id}": {
      "get": {
        "tags": [
          "page"
        ],
        "description": "Retrieve an existing page.",
        "operationId": "getApiV1PageId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Page id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve an existing page.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "page"
        ],
        "description": "Update an existing page.",
        "operationId": "putApiV1PageId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Page id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1Page"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update an existing page.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1Page"
      },
      "delete": {
        "tags": [
          "page"
        ],
        "description": "Delete an existing page.",
        "operationId": "deleteApiV1PageId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Page id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete an existing page.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/page": {
      "post": {
        "tags": [
          "page"
        ],
        "description": "Create a page.",
        "operationId": "postApiV1Page",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1Page"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a page.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1Page"
      }
    },
    "/api/v1/partner/{id}/size(/{type})": {
      "get": {
        "tags": [
          "partner"
        ],
        "description": "Get total bytes for a partner's documents and images.",
        "operationId": "getApiV1PartnerIdSize(Type)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "path",
            "description": "Images, documents or all.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get total bytes for a partner's documents and images.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner/{partner_id}/show/{id}/neighbors": {
      "get": {
        "tags": [
          "partner"
        ],
        "description": "Given a partner show, retrieve the next and previous shows sorted by -start_at",
        "operationId": "getApiV1PartnerPartnerIdShowIdNeighbors",
        "parameters": [
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Show id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Given a partner show, retrieve the next and previous shows sorted by -start_at",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner/{partner_id}/show/{id}": {
      "get": {
        "tags": [
          "partner"
        ],
        "description": "Retrieve a partner show.",
        "operationId": "getApiV1PartnerPartnerIdShowId",
        "parameters": [
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Show id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a partner show.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "partner"
        ],
        "description": "Update an existing partner show.",
        "operationId": "putApiV1PartnerPartnerIdShowId",
        "parameters": [
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Show id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1PartnerPartnerIdShow"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update an existing partner show.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1PartnerPartnerIdShow"
      },
      "delete": {
        "tags": [
          "partner"
        ],
        "description": "Delete an existing partner show.",
        "operationId": "deleteApiV1PartnerPartnerIdShowId",
        "parameters": [
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Show id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete an existing partner show.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner/{id}/show": {
      "post": {
        "tags": [
          "partner"
        ],
        "description": "Create a new partner show.",
        "operationId": "postApiV1PartnerIdShow",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1PartnerIdShow"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a new partner show.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1PartnerIdShow"
      }
    },
    "/api/v1/partner/{partner_id}/shows": {
      "get": {
        "tags": [
          "partner"
        ],
        "description": "Retrieve all partner shows.",
        "operationId": "getApiV1PartnerPartnerIdShows",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "artist_id",
            "in": "query",
            "description": "Artist id. If passed in, endpoint will return shows at this partner the artist is in.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "artwork_id",
            "in": "query",
            "description": "Artwork id. If passed in, endpoint will return shows at this partner the artwork is in.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Partner show status.",
            "schema": {
              "type": "string",
              "enum": [
                "current",
                "running",
                "closed",
                "upcoming",
                "running_and_upcoming",
                "closing_soon",
                "active"
              ]
            }
          },
          {
            "name": "displayable",
            "in": "query",
            "description": "Show only displayable shows.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "include_local_discovery",
            "in": "query",
            "description": "Include local discovery stubs in admin results.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "at_a_fair",
            "in": "query",
            "description": "Allows to select only fair shows or only shows that are not at the fair.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "created_at",
                "-created_at",
                "end_at",
                "-end_at",
                "start_at",
                "-start_at",
                "name",
                "-name",
                "-featured,-start_at",
                "-featured,-end_at",
                "sortable_name",
                "-sortable_name",
                "fully_qualified_name",
                "-fully_qualified_name",
                "-relevance,-start_at"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve all partner shows.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner/{partner_id}/show/{show_id}/document/{id}": {
      "get": {
        "tags": [
          "partner"
        ],
        "description": "Retrieve a partner show document.",
        "operationId": "getApiV1PartnerPartnerIdShowShowIdDocumentId",
        "parameters": [
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "show_id",
            "in": "path",
            "description": "Show id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Document id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a partner show document.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "partner"
        ],
        "description": "Update a partner show document.",
        "operationId": "putApiV1PartnerPartnerIdShowShowIdDocumentId",
        "parameters": [
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "show_id",
            "in": "path",
            "description": "Show id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Document id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1PartnerPartnerIdShowShowIdDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update a partner show document.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1PartnerPartnerIdShowShowIdDocument"
      },
      "delete": {
        "tags": [
          "partner"
        ],
        "description": "Delete a partner show document.",
        "operationId": "deleteApiV1PartnerPartnerIdShowShowIdDocumentId",
        "parameters": [
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "show_id",
            "in": "path",
            "description": "Show id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Document id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete a partner show document.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner/{partner_id}/show/{show_id}/document": {
      "post": {
        "tags": [
          "partner"
        ],
        "description": "Create a partner show document.",
        "operationId": "postApiV1PartnerPartnerIdShowShowIdDocument",
        "parameters": [
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "show_id",
            "in": "path",
            "description": "Show id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1PartnerPartnerIdShowShowIdDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a partner show document.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1PartnerPartnerIdShowShowIdDocument"
      }
    },
    "/api/v1/partner/{partner_id}/show/{show_id}/documents": {
      "get": {
        "tags": [
          "partner"
        ],
        "description": "Retrieve all partner show documents for a given partner and show.",
        "operationId": "getApiV1PartnerPartnerIdShowShowIdDocuments",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "show_id",
            "in": "path",
            "description": "Show id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve all partner show documents for a given partner and show.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner/{partner_id}/show/{partner_show_id}/artwork/{id}": {
      "put": {
        "tags": [
          "partner"
        ],
        "description": "Update an artwork within a partner show.",
        "operationId": "putApiV1PartnerPartnerIdShowPartnerShowIdArtworkId",
        "parameters": [
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partner_show_id",
            "in": "path",
            "description": "Partner show id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Artwork id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1PartnerPartnerIdShowPartnerShowIdArtwork"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update an artwork within a partner show.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1PartnerPartnerIdShowPartnerShowIdArtwork"
      },
      "post": {
        "tags": [
          "partner"
        ],
        "description": "Add an artwork to a partner show.",
        "operationId": "postApiV1PartnerPartnerIdShowPartnerShowIdArtworkId",
        "parameters": [
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partner_show_id",
            "in": "path",
            "description": "Partner show id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Artwork id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1PartnerPartnerIdShowPartnerShowIdArtwork"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Add an artwork to a partner show.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1PartnerPartnerIdShowPartnerShowIdArtwork"
      },
      "delete": {
        "tags": [
          "partner"
        ],
        "description": "Remove an artwork from a partner show.",
        "operationId": "deleteApiV1PartnerPartnerIdShowPartnerShowIdArtworkId",
        "parameters": [
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partner_show_id",
            "in": "path",
            "description": "Partner show id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Artwork id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Remove an artwork from a partner show.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner/{partner_id}/show/{partner_show_id}/reposition": {
      "post": {
        "tags": [
          "partner"
        ],
        "description": "Reposition artworks in a partner show.",
        "operationId": "postApiV1PartnerPartnerIdShowPartnerShowIdReposition",
        "parameters": [
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partner_show_id",
            "in": "path",
            "description": "Partner show id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "artwork_ids"
                ],
                "type": "object",
                "properties": {
                  "artwork_ids": {
                    "type": "array",
                    "description": "Array of artwork ids in the show.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Reposition artworks in a partner show.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner/{partner_id}/show/{partner_show_id}/artworks": {
      "get": {
        "tags": [
          "partner"
        ],
        "description": "Retrieve all artworks at a partner show sorted by position.",
        "operationId": "getApiV1PartnerPartnerIdShowPartnerShowIdArtworks",
        "parameters": [
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partner_show_id",
            "in": "path",
            "description": "Partner show id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "without_artist",
            "in": "query",
            "description": "Return artworks without an artist.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "artist_id",
            "in": "query",
            "description": "Artist id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "availability",
            "in": "query",
            "description": "Return artworks with a given availability.",
            "schema": {
              "type": "string",
              "enum": [
                "for sale",
                "not for sale",
                "on hold",
                "on loan",
                "permanent collection",
                "sold"
              ]
            }
          },
          {
            "name": "for_sale",
            "in": "query",
            "description": "Return artworks with for_sale availability.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "for_sale_sold_on_hold",
            "in": "query",
            "description": "Return artworks with availability other than not-for-sale.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "not_for_sale",
            "in": "query",
            "description": "Return artworks with availability other than for_sale.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "published",
            "in": "query",
            "description": "Return only artworks in given published status.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "visibility_levels": {
                    "type": "array",
                    "description": "Return artworks with a given visibility level",
                    "items": {
                      "type": "string",
                      "enum": [
                        "unlisted",
                        "listed"
                      ]
                    }
                  },
                  "exclude_ids": {
                    "type": "array",
                    "description": "An array of artwork ids to exclude from the response.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Retrieve all artworks at a partner show sorted by position.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner/{partner_id}/show/{partner_show_id}/artworks/all": {
      "get": {
        "tags": [
          "partner"
        ],
        "description": "Retrieve deep data for all artworks at a partner show.",
        "operationId": "getApiV1PartnerPartnerIdShowPartnerShowIdArtworksAll",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partner_show_id",
            "in": "path",
            "description": "Partner show id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "without_artist",
            "in": "query",
            "description": "Return artworks without an artist.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "availability",
            "in": "query",
            "description": "Return artworks with a given availability.",
            "schema": {
              "type": "string",
              "enum": [
                "for sale",
                "not for sale",
                "on hold",
                "on loan",
                "permanent collection",
                "sold"
              ]
            }
          },
          {
            "name": "ecommerce",
            "in": "query",
            "description": "Return artworks available for buy now",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "offer",
            "in": "query",
            "description": "Return artworks available for make offer",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "for_sale",
            "in": "query",
            "description": "Return artworks with for_sale availability.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "for_sale_sold_on_hold",
            "in": "query",
            "description": "Return artworks with availability other than not-for-sale.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "not_for_sale",
            "in": "query",
            "description": "Return artworks with availability other than for_sale.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "published",
            "in": "query",
            "description": "Return only artworks in given published status.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "visibility_levels": {
                    "type": "array",
                    "description": "Return artworks with a given visibility level",
                    "items": {
                      "type": "string",
                      "enum": [
                        "unlisted",
                        "listed"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Retrieve deep data for all artworks at a partner show.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner/{partner_id}/show/{partner_show_id}/artists": {
      "get": {
        "tags": [
          "partner"
        ],
        "description": "Retrieve all artists at a partner show.",
        "operationId": "getApiV1PartnerPartnerIdShowPartnerShowIdArtists",
        "parameters": [
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partner_show_id",
            "in": "path",
            "description": "Partner show id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "published",
            "in": "query",
            "description": "Pass to filter out unpublished works.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve all artists at a partner show.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner/{partner_id}/location/{id}": {
      "get": {
        "tags": [
          "partner"
        ],
        "description": "Retrieve a partner location.",
        "operationId": "getApiV1PartnerPartnerIdLocationId",
        "parameters": [
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a partner location.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "partner"
        ],
        "description": "Update an existing partner location.",
        "operationId": "putApiV1PartnerPartnerIdLocationId",
        "parameters": [
          {
            "name": "partner_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1PartnerPartnerIdLocation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update an existing partner location.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1PartnerPartnerIdLocation"
      },
      "delete": {
        "tags": [
          "partner"
        ],
        "description": "Delete an existing partner location.",
        "operationId": "deleteApiV1PartnerPartnerIdLocationId",
        "parameters": [
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Location id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete an existing partner location.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner/{partner_id}/location/{id}/billing_location": {
      "put": {
        "tags": [
          "partner"
        ],
        "description": "Set an existing partner location as a billing location (for subscription tax purposes).",
        "operationId": "putApiV1PartnerPartnerIdLocationIdBillingLocation",
        "parameters": [
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Location id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Set an existing partner location as a billing location (for subscription tax purposes).",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner/{id}/location": {
      "post": {
        "tags": [
          "partner"
        ],
        "description": "Create a new partner location.",
        "operationId": "postApiV1PartnerIdLocation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1PartnerIdLocation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a new partner location.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1PartnerIdLocation"
      }
    },
    "/api/v1/partner/{partner_id}/locations/reposition": {
      "post": {
        "tags": [
          "partner"
        ],
        "description": "Reposition partner locations.",
        "operationId": "postApiV1PartnerPartnerIdLocationsReposition",
        "parameters": [
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "location_ids"
                ],
                "type": "object",
                "properties": {
                  "location_ids": {
                    "type": "array",
                    "description": "Array of partner location ids.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Reposition partner locations.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner/{partner_id}/locations": {
      "get": {
        "tags": [
          "partner"
        ],
        "description": "Retrieve all partner locations.",
        "operationId": "getApiV1PartnerPartnerIdLocations",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "private",
            "in": "query",
            "description": "Include private locations.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "address_type": {
                    "type": "array",
                    "description": "Array of address types.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Retrieve all partner locations.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner/{partner_id}/location/{location_id}/day_schedule/{id}": {
      "get": {
        "tags": [
          "partner"
        ],
        "description": "Retrieve a partner location day schedule.",
        "operationId": "getApiV1PartnerPartnerIdLocationLocationIdDayScheduleId",
        "parameters": [
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "location_id",
            "in": "path",
            "description": "Location id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Schedule id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a partner location day schedule.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "partner"
        ],
        "description": "Update a partner location day schedule.",
        "operationId": "putApiV1PartnerPartnerIdLocationLocationIdDayScheduleId",
        "parameters": [
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "location_id",
            "in": "path",
            "description": "Location id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Schedule id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update a partner location day schedule.",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "partner"
        ],
        "description": "Delete a partner location day schedule.",
        "operationId": "deleteApiV1PartnerPartnerIdLocationLocationIdDayScheduleId",
        "parameters": [
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "location_id",
            "in": "path",
            "description": "Location id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Schedule id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete a partner location day schedule.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner/{partner_id}/location/{location_id}/day_schedule": {
      "post": {
        "tags": [
          "partner"
        ],
        "description": "Create a partner location schedule.",
        "operationId": "postApiV1PartnerPartnerIdLocationLocationIdDaySchedule",
        "parameters": [
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "location_id",
            "in": "path",
            "description": "Location id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Create a partner location schedule.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner/{partner_id}/location/{location_id}/day_schedules": {
      "get": {
        "tags": [
          "partner"
        ],
        "description": "Retrieve all day schedules for a given location.",
        "operationId": "getApiV1PartnerPartnerIdLocationLocationIdDaySchedules",
        "parameters": [
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "location_id",
            "in": "path",
            "description": "Location id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve all day schedules for a given location.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner/{id}": {
      "get": {
        "tags": [
          "partner"
        ],
        "description": "Retrieve an existing partner.",
        "operationId": "getApiV1PartnerId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve an existing partner.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "partner"
        ],
        "description": "Update an existing partner.",
        "operationId": "putApiV1PartnerId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1Partner"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update an existing partner.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1Partner"
      },
      "delete": {
        "tags": [
          "partner"
        ],
        "description": "Delete an existing partner.",
        "operationId": "deleteApiV1PartnerId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete an existing partner.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner/{id}/artwork_inquiry_requests": {
      "get": {
        "tags": [
          "partner"
        ],
        "description": "Retrieve all artwork inquiry requests by a partner.",
        "operationId": "getApiV1PartnerIdArtworkInquiryRequests",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "-created_at",
                "created_at",
                "-outcome",
                "outcome",
                "likely_to_purchase",
                "-likely_to_purchase",
                "status",
                "-status",
                "flagged",
                "-flagged",
                "contact_gallery",
                "-contact_gallery",
                "status,-likely_to_purchase,created_at",
                "last_message_received_at",
                "-last_message_received_at"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve all artwork inquiry requests by a partner.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner": {
      "post": {
        "tags": [
          "partner"
        ],
        "description": "Create a new partner.",
        "operationId": "postApiV1Partner",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1Partner"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a new partner.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1Partner"
      }
    },
    "/api/v1/partner/{partner_id}/documents": {
      "get": {
        "tags": [
          "partner"
        ],
        "description": "Retrieve all documents for a given partner.",
        "operationId": "getApiV1PartnerPartnerIdDocuments",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "document_ids": {
                    "type": "array",
                    "description": "One or more document ids.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Retrieve all documents for a given partner.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner/{partner_id}/contact/{id}": {
      "get": {
        "tags": [
          "partner"
        ],
        "description": "Retrieve a partner contact.",
        "operationId": "getApiV1PartnerPartnerIdContactId",
        "parameters": [
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a partner contact.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "partner"
        ],
        "description": "Update an existing partner contact.",
        "operationId": "putApiV1PartnerPartnerIdContactId",
        "parameters": [
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1PartnerPartnerIdContact"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update an existing partner contact.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1PartnerPartnerIdContact"
      },
      "delete": {
        "tags": [
          "partner"
        ],
        "description": "Delete an existing partner contact.",
        "operationId": "deleteApiV1PartnerPartnerIdContactId",
        "parameters": [
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Contact id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete an existing partner contact.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner/{partner_id}/contact": {
      "post": {
        "tags": [
          "partner"
        ],
        "description": "Create a new partner contact.",
        "operationId": "postApiV1PartnerPartnerIdContact",
        "parameters": [
          {
            "name": "partner_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1PartnerPartnerIdContact"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a new partner contact.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1PartnerPartnerIdContact"
      }
    },
    "/api/v1/partner/{partner_id}/contacts/reposition": {
      "post": {
        "tags": [
          "partner"
        ],
        "description": "Reposition partner contacts.",
        "operationId": "postApiV1PartnerPartnerIdContactsReposition",
        "parameters": [
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "contact_ids"
                ],
                "type": "object",
                "properties": {
                  "contact_ids": {
                    "type": "array",
                    "description": "Array of partner contact ids.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Reposition partner contacts.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner/{partner_id}/contacts": {
      "get": {
        "tags": [
          "partner"
        ],
        "description": "Retrieve all partner contacts.",
        "operationId": "getApiV1PartnerPartnerIdContacts",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contact_type",
            "in": "query",
            "description": "Contact type.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partner_location",
            "in": "query",
            "description": "Partner location object id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "can_contact",
            "in": "query",
            "description": "Only return contacts with given value for can_contact.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve all partner contacts.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner/{partner_id}/contact/{id}/contact_type": {
      "put": {
        "tags": [
          "partner"
        ],
        "description": "Update the contact type for a partner contact.",
        "operationId": "putApiV1PartnerPartnerIdContactIdContactType",
        "parameters": [
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Partner Contact id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1PartnerPartnerIdContactIdContactType"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update the contact type for a partner contact.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1PartnerPartnerIdContactIdContactType"
      }
    },
    "/api/v1/partner/{partner_id}/commission_exemptions_credit": {
      "post": {
        "tags": [
          "partner"
        ],
        "description": "Add a commission exemption credit in USD.",
        "operationId": "postApiV1PartnerPartnerIdCommissionExemptionsCredit",
        "parameters": [
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1PartnerPartnerIdCommissionExemptionsCredit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Add a commission exemption credit in USD.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1PartnerPartnerIdCommissionExemptionsCredit"
      }
    },
    "/api/v1/partner/{id}/artwork/{artwork_id}/genome": {
      "get": {
        "tags": [
          "partner"
        ],
        "description": "Retrieve an artwork's genome.",
        "operationId": "getApiV1PartnerIdArtworkArtworkIdGenome",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "artwork_id",
            "in": "path",
            "description": "Artwork id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve an artwork's genome.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "partner"
        ],
        "description": "Update an artwork's genome.",
        "operationId": "putApiV1PartnerIdArtworkArtworkIdGenome",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "artwork_id",
            "in": "path",
            "description": "Artwork id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1PartnerIdArtworkArtworkIdGenome"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update an artwork's genome.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1PartnerIdArtworkArtworkIdGenome"
      }
    },
    "/api/v1/partner/{id}/artworks": {
      "get": {
        "tags": [
          "partner"
        ],
        "description": "Retrieve all partner artworks.",
        "operationId": "getApiV1PartnerIdArtworks",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "title",
                "-title",
                "created_at",
                "-created_at",
                "-created_at,-id",
                "deleted_at",
                "-deleted_at",
                "-iconicity",
                "-merchandisability",
                "published_at",
                "-published_at",
                "-partner_updated_at",
                "availability",
                "-recent_saves_count",
                "-last_offerable_activity_at"
              ]
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "availability_changed_since",
            "in": "query",
            "description": "Return artworks that changed availability after a given timestamp.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "artist_id",
            "in": "query",
            "description": "Return artworks by a given artist.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "viewing_room_id",
            "in": "query",
            "description": "Return artworks included in a Viewing Room",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "without_artist",
            "in": "query",
            "description": "Return artworks without an artist.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "availability",
            "in": "query",
            "description": "Return artworks with a given availability.",
            "schema": {
              "type": "string",
              "enum": [
                "for sale",
                "not for sale",
                "on hold",
                "on loan",
                "permanent collection",
                "sold"
              ]
            }
          },
          {
            "name": "for_sale",
            "in": "query",
            "description": "Return artworks with for_sale availability.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "for_sale_sold_on_hold",
            "in": "query",
            "description": "Return artworks with availability other than not-for-sale.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "not_for_sale",
            "in": "query",
            "description": "Return artworks with availability other than for_sale.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "published",
            "in": "query",
            "description": "Return only artworks in given published status.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "published_within",
            "in": "query",
            "description": "Return artworks published within the last x seconds.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "missing_priority_metadata",
            "in": "query",
            "description": "Return artworks that are missing priority metadata",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "partner_offerable",
            "in": "query",
            "description": "Return artworks that are partner-offerable.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "artwork_id": {
                    "type": "array",
                    "description": "One or more artwork ids.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "visibility_levels": {
                    "type": "array",
                    "description": "Return artworks with a given visibility level",
                    "items": {
                      "type": "string",
                      "enum": [
                        "unlisted",
                        "listed"
                      ]
                    }
                  },
                  "exclude_ids": {
                    "type": "array",
                    "description": "An array of artwork ids to exclude from the response.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Retrieve all partner artworks.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "partner"
        ],
        "description": "Bulk edit all partner artworks.",
        "operationId": "putApiV1PartnerIdArtworks",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1PartnerIdArtworks"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Bulk edit all partner artworks.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1PartnerIdArtworks"
      }
    },
    "/api/v1/partner/{id}/artworks/duplicate": {
      "post": {
        "tags": [
          "partner"
        ],
        "description": "Create an artwork by duplicating attributes from original artwork.",
        "operationId": "postApiV1PartnerIdArtworksDuplicate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1PartnerIdArtworksDuplicate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create an artwork by duplicating attributes from original artwork.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1PartnerIdArtworksDuplicate"
      }
    },
    "/api/v1/partner/{id}/artworks/{artwork_id}/offerable_activity": {
      "get": {
        "tags": [
          "partner"
        ],
        "description": "Retrieve offerable activity for a partner artwork.",
        "operationId": "getApiV1PartnerIdArtworksArtworkIdOfferableActivity",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "artwork_id",
            "in": "path",
            "description": "Artwork id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve offerable activity for a partner artwork.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner/{id}/artworks/all": {
      "get": {
        "tags": [
          "partner"
        ],
        "description": "Retrieve deep data for all partner artworks.",
        "operationId": "getApiV1PartnerIdArtworksAll",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "artist_id",
            "in": "query",
            "description": "Return artworks by a given artist.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "without_artist",
            "in": "query",
            "description": "Return artworks without an artist.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "format",
            "in": "query",
            "description": "Desired format.",
            "schema": {
              "type": "string",
              "default": "json"
            }
          },
          {
            "name": "availability",
            "in": "query",
            "description": "Return artworks with a given availability.",
            "schema": {
              "type": "string",
              "enum": [
                "for sale",
                "not for sale",
                "on hold",
                "on loan",
                "permanent collection",
                "sold"
              ]
            }
          },
          {
            "name": "external_id",
            "in": "query",
            "description": "External id value",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "external_id_operator",
            "in": "query",
            "description": "Either \"ne\" for not equal queries or \"eq\" for equal queries.",
            "schema": {
              "type": "string",
              "default": "eq",
              "enum": [
                "eq",
                "ne"
              ]
            }
          },
          {
            "name": "import_source",
            "in": "query",
            "description": "Import Source value",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "import_source_operator",
            "in": "query",
            "description": "Either \"ne\" for not equal queries or \"eq\" for equal queries.",
            "schema": {
              "type": "string",
              "default": "eq",
              "enum": [
                "eq",
                "ne"
              ]
            }
          },
          {
            "name": "ecommerce",
            "in": "query",
            "description": "Return artworks available for buy now",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "offer",
            "in": "query",
            "description": "Return artworks available for make offer",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "for_sale",
            "in": "query",
            "description": "Return artworks with for_sale availability.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "for_sale_sold_on_hold",
            "in": "query",
            "description": "Return artworks with availability other than not-for-sale.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "not_for_sale",
            "in": "query",
            "description": "Return artworks with availability other than for_sale.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "published",
            "in": "query",
            "description": "Return only artworks in given published status.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "category",
            "in": "query",
            "description": "Return artworks that belong to a category.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partner_location_id",
            "in": "query",
            "description": "Return artworks that are at a given partner location.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "price_visibility",
            "in": "query",
            "description": "Return artworks matching a specific price visibility setting.",
            "schema": {
              "type": "string",
              "enum": [
                "hidden",
                "exact",
                "range"
              ]
            }
          },
          {
            "name": "missing_price_info",
            "in": "query",
            "description": "Return artworks missing pricing information.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "missing_visible_price",
            "in": "query",
            "description": "Return artworks that have pricing information but it is hidden or displayed as range.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "missing_medium",
            "in": "query",
            "description": "Return artworks that are missing a medium.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "missing_category",
            "in": "query",
            "description": "Return artworks that are missing a category.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "missing_partner_genes",
            "in": "query",
            "description": "Return artworks that are missing a partner genome.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "include_deleted",
            "in": "query",
            "description": "Include deleted artworks in the results.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "title",
                "-title",
                "created_at",
                "-created_at",
                "-created_at,-id",
                "deleted_at",
                "-deleted_at",
                "-iconicity",
                "-merchandisability",
                "published_at",
                "-published_at",
                "-partner_updated_at",
                "availability",
                "-recent_saves_count",
                "-last_offerable_activity_at"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "artwork_id": {
                    "type": "array",
                    "description": "One or more artwork ids.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "visibility_levels": {
                    "type": "array",
                    "description": "Return artworks with a given visibility level",
                    "items": {
                      "type": "string",
                      "enum": [
                        "unlisted",
                        "listed"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Retrieve deep data for all partner artworks.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner/{id}/artist/{artist_id}/neighbors": {
      "get": {
        "tags": [
          "partner"
        ],
        "description": "Given a partner artist, retrieve the next and previous artists sorted by -sort_id",
        "operationId": "getApiV1PartnerIdArtistArtistIdNeighbors",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "artist_id",
            "in": "path",
            "description": "Artist id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Given a partner artist, retrieve the next and previous artists sorted by -sort_id",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner/{id}/artist/{artist_id}": {
      "get": {
        "tags": [
          "partner"
        ],
        "description": "Retrieve partner artist.",
        "operationId": "getApiV1PartnerIdArtistArtistId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "artist_id",
            "in": "path",
            "description": "Artist id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve partner artist.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "partner"
        ],
        "description": "Update an existing partner artist.",
        "operationId": "putApiV1PartnerIdArtistArtistId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "artist_id",
            "in": "path",
            "description": "Artist id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1PartnerIdArtist"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update an existing partner artist.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1PartnerIdArtist"
      },
      "delete": {
        "tags": [
          "partner"
        ],
        "description": "Delete a partner artist.",
        "operationId": "deleteApiV1PartnerIdArtistArtistId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "artist_id",
            "in": "path",
            "description": "Artist id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete a partner artist.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner/{id}/artists": {
      "get": {
        "tags": [
          "partner"
        ],
        "description": "Retrieve all partner artists.",
        "operationId": "getApiV1PartnerIdArtists",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "represented_by",
            "in": "query",
            "description": "Only return artists represented by this partner.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "display_on_partner_profile",
            "in": "query",
            "description": "Only return artists that are to be displayed on the partner profile page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "_slugs",
                "-_slugs",
                "created_at",
                "-created_at",
                "sortable_id",
                "-sortable_id",
                "-trending"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve all partner artists.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner/{id}/partner_artists/all": {
      "get": {
        "tags": [
          "partner"
        ],
        "description": "Retrieve deep data for all partner artists.",
        "operationId": "getApiV1PartnerIdPartnerArtistsAll",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "represented_by",
            "in": "query",
            "description": "Only return artists represented by this partner.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "display_on_partner_profile",
            "in": "query",
            "description": "Only return artists that are to be displayed on the partner profile page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "missing_biography",
            "in": "query",
            "description": "Only return artists that are missing biographies.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "_slugs",
                "-_slugs",
                "created_at",
                "-created_at",
                "sortable_id",
                "-sortable_id",
                "-trending"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve deep data for all partner artists.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner/{id}/partner_artists": {
      "get": {
        "tags": [
          "partner"
        ],
        "description": "Retrieve all partner artists.",
        "operationId": "getApiV1PartnerIdPartnerArtists",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "represented_by",
            "in": "query",
            "description": "Only return artists represented by this partner.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "display_on_partner_profile",
            "in": "query",
            "description": "Only return artists that are to be displayed on the partner profile page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "has_published_artworks",
            "in": "query",
            "description": "Only returns artists that have published arwtorks.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "represented_by_or_has_published_artworks",
            "in": "query",
            "description": "Return artists that are represented by the partner and those that are not but have published artworks. Do not use in conjunction with represented_by and has_published_artworks.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "_slugs",
                "-_slugs",
                "created_at",
                "-created_at",
                "sortable_id",
                "-sortable_id",
                "-trending"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "artist_ids": {
                    "type": "array",
                    "description": "Artist ids.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Retrieve all partner artists.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner/{partner_id}/artist/{artist_id}/document/{id}": {
      "get": {
        "tags": [
          "partner"
        ],
        "description": "Retrieve a partner artist document.",
        "operationId": "getApiV1PartnerPartnerIdArtistArtistIdDocumentId",
        "parameters": [
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "artist_id",
            "in": "path",
            "description": "Artist id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Document id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a partner artist document.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "partner"
        ],
        "description": "Update a partner artist document.",
        "operationId": "putApiV1PartnerPartnerIdArtistArtistIdDocumentId",
        "parameters": [
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "artist_id",
            "in": "path",
            "description": "Artist id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Document id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1PartnerPartnerIdArtistArtistIdDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update a partner artist document.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1PartnerPartnerIdArtistArtistIdDocument"
      },
      "delete": {
        "tags": [
          "partner"
        ],
        "description": "Delete a partner artist document.",
        "operationId": "deleteApiV1PartnerPartnerIdArtistArtistIdDocumentId",
        "parameters": [
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "artist_id",
            "in": "path",
            "description": "Artist id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Document id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete a partner artist document.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner/{partner_id}/artist/{artist_id}/document": {
      "post": {
        "tags": [
          "partner"
        ],
        "description": "Create a partner artist document.",
        "operationId": "postApiV1PartnerPartnerIdArtistArtistIdDocument",
        "parameters": [
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "artist_id",
            "in": "path",
            "description": "Artist id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1PartnerPartnerIdArtistArtistIdDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a partner artist document.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1PartnerPartnerIdArtistArtistIdDocument"
      }
    },
    "/api/v1/partner/{partner_id}/artist/{artist_id}/documents": {
      "get": {
        "tags": [
          "partner"
        ],
        "description": "Retrieve all partner artist documents for a given partner and artist.",
        "operationId": "getApiV1PartnerPartnerIdArtistArtistIdDocuments",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "artist_id",
            "in": "path",
            "description": "Artist id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve all partner artist documents for a given partner and artist.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner/{partner_id}/artist/{artist_id}/partner_artist_artworks/reposition": {
      "post": {
        "tags": [
          "partner"
        ],
        "description": "Reposition partner artist artworks.",
        "operationId": "postApiV1PartnerPartnerIdArtistArtistIdPartnerArtistArtworksReposition",
        "parameters": [
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "artist_id",
            "in": "path",
            "description": "Artist id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "partner_artist_artwork_ids"
                ],
                "type": "object",
                "properties": {
                  "partner_artist_artwork_ids": {
                    "type": "array",
                    "description": "Array of partner artist artwork ids.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Reposition partner artist artworks.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner/{partner_id}/artist/{artist_id}/partner_artist_artwork/{id}/neighbors": {
      "get": {
        "tags": [
          "partner"
        ],
        "description": "Given an artwork, retrieve the next and previous partner artist artworks sorted by position",
        "operationId": "getApiV1PartnerPartnerIdArtistArtistIdPartnerArtistArtworkIdNeighbors",
        "parameters": [
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "artist_id",
            "in": "path",
            "description": "Artist id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Artwork id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Given an artwork, retrieve the next and previous partner artist artworks sorted by position",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner/{partner_id}/artist/{artist_id}/partner_artist_artworks": {
      "get": {
        "tags": [
          "partner"
        ],
        "description": "Retrieve partner published artworks by a given artist.",
        "operationId": "getApiV1PartnerPartnerIdArtistArtistIdPartnerArtistArtworks",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "artist_id",
            "in": "path",
            "description": "Artist id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "position",
                "-position"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve partner published artworks by a given artist.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner/{partner_id}/artist/{artist_id}/partner_artist_artworks/all": {
      "get": {
        "tags": [
          "partner"
        ],
        "description": "Retrieve full json of all partner artist artworks for a given partner and artist.",
        "operationId": "getApiV1PartnerPartnerIdArtistArtistIdPartnerArtistArtworksAll",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "artist_id",
            "in": "path",
            "description": "Artist id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "availability",
            "in": "query",
            "description": "Return artworks with a given availability.",
            "schema": {
              "type": "string",
              "enum": [
                "for sale",
                "not for sale",
                "on hold",
                "on loan",
                "permanent collection",
                "sold"
              ]
            }
          },
          {
            "name": "for_sale",
            "in": "query",
            "description": "Return artworks with for_sale availability.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "for_sale_sold_on_hold",
            "in": "query",
            "description": "Return artworks with availability other than not-for-sale.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "not_for_sale",
            "in": "query",
            "description": "Return artworks with availability other than for_sale.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "published",
            "in": "query",
            "description": "Return only artworks in given published status.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "position",
                "-position"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "visibility_levels": {
                    "type": "array",
                    "description": "Return artworks with a given visibility level",
                    "items": {
                      "type": "string",
                      "enum": [
                        "unlisted",
                        "listed"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Retrieve full json of all partner artist artworks for a given partner and artist.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner/{partner_id}/artist/{artist_id}/artworks": {
      "get": {
        "tags": [
          "partner"
        ],
        "description": "Retrieve partner published artworks by a given artist.",
        "operationId": "getApiV1PartnerPartnerIdArtistArtistIdArtworks",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "artist_id",
            "in": "path",
            "description": "Artist id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "title",
                "-title",
                "created_at",
                "-created_at",
                "-created_at,-id",
                "deleted_at",
                "-deleted_at",
                "-iconicity",
                "-merchandisability",
                "published_at",
                "-published_at",
                "-partner_updated_at",
                "availability",
                "-recent_saves_count",
                "-last_offerable_activity_at"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve partner published artworks by a given artist.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner/{partner_id}/artist/{artist_id}/artworks/all": {
      "get": {
        "tags": [
          "partner"
        ],
        "description": "Retrieve full json of all artworks for a given partner and artist.",
        "operationId": "getApiV1PartnerPartnerIdArtistArtistIdArtworksAll",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "artist_id",
            "in": "path",
            "description": "Artist id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "availability",
            "in": "query",
            "description": "Return artworks with a given availability.",
            "schema": {
              "type": "string",
              "enum": [
                "for sale",
                "not for sale",
                "on hold",
                "on loan",
                "permanent collection",
                "sold"
              ]
            }
          },
          {
            "name": "ecommerce",
            "in": "query",
            "description": "Return artworks available for buy now",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "offer",
            "in": "query",
            "description": "Return artworks available for make offer",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "for_sale",
            "in": "query",
            "description": "Return artworks with for_sale availability.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "for_sale_sold_on_hold",
            "in": "query",
            "description": "Return artworks with availability other than not-for-sale.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "not_for_sale",
            "in": "query",
            "description": "Return artworks with availability other than for_sale.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "published",
            "in": "query",
            "description": "Return only artworks in given published status.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "partner_location_id",
            "in": "query",
            "description": "Return artworks that are at a given partner location.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "title",
                "-title",
                "created_at",
                "-created_at",
                "-created_at,-id",
                "deleted_at",
                "-deleted_at",
                "-iconicity",
                "-merchandisability",
                "published_at",
                "-published_at",
                "-partner_updated_at",
                "availability",
                "-recent_saves_count",
                "-last_offerable_activity_at"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "visibility_levels": {
                    "type": "array",
                    "description": "Return artworks with a given visibility level",
                    "items": {
                      "type": "string",
                      "enum": [
                        "unlisted",
                        "listed"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Retrieve full json of all artworks for a given partner and artist.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner/{partner_id}/album/{id}": {
      "get": {
        "tags": [
          "partner"
        ],
        "description": "Retrieve a partner album.",
        "operationId": "getApiV1PartnerPartnerIdAlbumId",
        "parameters": [
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a partner album.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "partner"
        ],
        "description": "Update an existing partner album.",
        "operationId": "putApiV1PartnerPartnerIdAlbumId",
        "parameters": [
          {
            "name": "partner_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1PartnerPartnerIdAlbum"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update an existing partner album.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1PartnerPartnerIdAlbum"
      },
      "delete": {
        "tags": [
          "partner"
        ],
        "description": "Delete an existing album.",
        "operationId": "deleteApiV1PartnerPartnerIdAlbumId",
        "parameters": [
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Album id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete an existing album.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner/{id}/album": {
      "post": {
        "tags": [
          "partner"
        ],
        "description": "Create a new partner album.",
        "operationId": "postApiV1PartnerIdAlbum",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1PartnerIdAlbum"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a new partner album.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1PartnerIdAlbum"
      }
    },
    "/api/v1/partner/{partner_id}/albums": {
      "get": {
        "tags": [
          "partner"
        ],
        "description": "Retrieve all partner albums.",
        "operationId": "getApiV1PartnerPartnerIdAlbums",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "created_at",
                "-created_at",
                "name",
                "-name"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve all partner albums.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner/{partner_id}/album/{partner_album_id}/artwork/{id}": {
      "put": {
        "tags": [
          "partner"
        ],
        "description": "Update an artwork within a partner album.",
        "operationId": "putApiV1PartnerPartnerIdAlbumPartnerAlbumIdArtworkId",
        "parameters": [
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partner_album_id",
            "in": "path",
            "description": "Partner album id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Artwork id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1PartnerPartnerIdAlbumPartnerAlbumIdArtwork"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update an artwork within a partner album.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1PartnerPartnerIdAlbumPartnerAlbumIdArtwork"
      },
      "post": {
        "tags": [
          "partner"
        ],
        "description": "Add an artwork to a partner album.",
        "operationId": "postApiV1PartnerPartnerIdAlbumPartnerAlbumIdArtworkId",
        "parameters": [
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partner_album_id",
            "in": "path",
            "description": "Partner album id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Artwork id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1PartnerPartnerIdAlbumPartnerAlbumIdArtwork"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Add an artwork to a partner album.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1PartnerPartnerIdAlbumPartnerAlbumIdArtwork"
      },
      "delete": {
        "tags": [
          "partner"
        ],
        "description": "Remove an artwork from a partner album.",
        "operationId": "deleteApiV1PartnerPartnerIdAlbumPartnerAlbumIdArtworkId",
        "parameters": [
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partner_album_id",
            "in": "path",
            "description": "Partner album id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Artwork id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Remove an artwork from a partner album.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner/{partner_id}/album/{partner_album_id}/reposition": {
      "post": {
        "tags": [
          "partner"
        ],
        "description": "Reposition artworks in a partner album.",
        "operationId": "postApiV1PartnerPartnerIdAlbumPartnerAlbumIdReposition",
        "parameters": [
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partner_album_id",
            "in": "path",
            "description": "Partner album id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "artwork_ids"
                ],
                "type": "object",
                "properties": {
                  "artwork_ids": {
                    "type": "array",
                    "description": "Array of artwork ids in the album.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Reposition artworks in a partner album.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner/{partner_id}/album/{partner_album_id}/artworks": {
      "get": {
        "tags": [
          "partner"
        ],
        "description": "Retrieve all artworks at a partner album sorted by position.",
        "operationId": "getApiV1PartnerPartnerIdAlbumPartnerAlbumIdArtworks",
        "parameters": [
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partner_album_id",
            "in": "path",
            "description": "Partner album id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "published",
            "in": "query",
            "description": "Pass to filter out unpublished works.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve all artworks at a partner album sorted by position.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner/{partner_id}/viewing_rooms": {
      "get": {
        "tags": [
          "partner"
        ],
        "description": "Return partner's viewing rooms.",
        "operationId": "getApiV1PartnerPartnerIdViewingRooms",
        "parameters": [
          {
            "name": "partner_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "viewing_room_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return partner's viewing rooms.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner/{partner_id}/partner_search_criteria_hits": {
      "get": {
        "tags": [
          "partner"
        ],
        "operationId": "getApiV1PartnerPartnerIdPartnerSearchCriteriaHits",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "maximum": 99,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "partner_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "get PartnerSearchCriteriaHit(s)",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner/{partner_id}/partner_search_criteria/{id}": {
      "get": {
        "tags": [
          "partner"
        ],
        "operationId": "getApiV1PartnerPartnerIdPartnerSearchCriteriaId",
        "parameters": [
          {
            "name": "partner_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "get PartnerSearchCriteria(s)",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner/{partner_id}/partner_search_criterias": {
      "get": {
        "tags": [
          "partner"
        ],
        "operationId": "getApiV1PartnerPartnerIdPartnerSearchCriterias",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "maximum": 99,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "total_count",
            "in": "query",
            "description": "When true, include total count in headers",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "artist_id",
            "in": "query",
            "description": "Artist id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partner_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "get PartnerSearchCriteria(s)",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner/{partner_id}/inquiry_request/{inquiry_request_id}": {
      "get": {
        "tags": [
          "partner"
        ],
        "description": "Retrieve details for existing inquiry request.",
        "operationId": "getApiV1PartnerPartnerIdInquiryRequestInquiryRequestId",
        "parameters": [
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "inquiry_request_id",
            "in": "path",
            "description": "Inquiry Request id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve details for existing inquiry request.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner/{partner_id}/inquiry_requests": {
      "get": {
        "tags": [
          "partner"
        ],
        "description": "Retrieve all inquiry_requests for a given partner.",
        "operationId": "getApiV1PartnerPartnerIdInquiryRequests",
        "parameters": [
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Inquired object type. Limits to returning only ArtworkInquiryRequests or PartnerShowInquiryRequests.",
            "schema": {
              "type": "string",
              "enum": [
                "artwork",
                "partner_show"
              ]
            }
          },
          {
            "name": "inquireable_id",
            "in": "query",
            "description": "Id of the inquired on object. Artwork or PartnerShow id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "-created_at",
                "created_at",
                "-outcome",
                "outcome",
                "likely_to_purchase",
                "-likely_to_purchase",
                "status",
                "-status",
                "flagged",
                "-flagged",
                "contact_gallery",
                "-contact_gallery",
                "status,-likely_to_purchase,created_at",
                "last_message_received_at",
                "-last_message_received_at"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve all inquiry_requests for a given partner.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner/{partner_id}/inquiry_request/{inquiry_request_id}/collector_profile": {
      "get": {
        "tags": [
          "partner"
        ],
        "description": "Retrieve details of a collector profile of an inquiry request",
        "operationId": "getApiV1PartnerPartnerIdInquiryRequestInquiryRequestIdCollectorProfile",
        "parameters": [
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "inquiry_request_id",
            "in": "path",
            "description": "Inquiry Request id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve details of a collector profile of an inquiry request",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner/{partner_id}/credit_card/{credit_card_id}": {
      "get": {
        "tags": [
          "partner"
        ],
        "description": "Retrieve an existing partner credit card.",
        "operationId": "getApiV1PartnerPartnerIdCreditCardCreditCardId",
        "parameters": [
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "credit_card_id",
            "in": "path",
            "description": "Credit card id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve an existing partner credit card.",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "partner"
        ],
        "description": "Deactivates a partner credit card.",
        "operationId": "deleteApiV1PartnerPartnerIdCreditCardCreditCardId",
        "parameters": [
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "credit_card_id",
            "in": "path",
            "description": "Credit Card id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deactivates a partner credit card.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner/{partner_id}/credit_card/{credit_card_id}/default": {
      "put": {
        "tags": [
          "partner"
        ],
        "description": "Set an existing partner credit card to default.",
        "operationId": "putApiV1PartnerPartnerIdCreditCardCreditCardIdDefault",
        "parameters": [
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "credit_card_id",
            "in": "path",
            "description": "Credit card id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Set an existing partner credit card to default.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner/{partner_id}/credit_cards": {
      "get": {
        "tags": [
          "partner"
        ],
        "description": "Retrieve all active partner credit cards.",
        "operationId": "getApiV1PartnerPartnerIdCreditCards",
        "parameters": [
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve all active partner credit cards.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner/{partner_id}/credit_card": {
      "post": {
        "tags": [
          "partner"
        ],
        "description": "Creates a new partner credit card with a given token attached to the partner's customer account.",
        "operationId": "postApiV1PartnerPartnerIdCreditCard",
        "parameters": [
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1PartnerPartnerIdCreditCard"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Creates a new partner credit card with a given token attached to the partner's customer account.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1PartnerPartnerIdCreditCard"
      }
    },
    "/api/v1/partner/{partner_id}/opt_in_artworks_into_commerce": {
      "put": {
        "tags": [
          "partner"
        ],
        "description": "Opt artworks into Commerce and Make Offer listing options",
        "operationId": "putApiV1PartnerPartnerIdOptInArtworksIntoCommerce",
        "parameters": [
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1PartnerPartnerIdOptInArtworksIntoCommerce"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Opt artworks into Commerce and Make Offer listing options",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1PartnerPartnerIdOptInArtworksIntoCommerce"
      }
    },
    "/api/v1/partner/{partner_id}/commerce_opt_in_eligible_artworks_report": {
      "post": {
        "tags": [
          "partner"
        ],
        "description": "Send an email to the current user containing artwork data",
        "operationId": "postApiV1PartnerPartnerIdCommerceOptInEligibleArtworksReport",
        "parameters": [
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1PartnerPartnerIdCommerceOptInEligibleArtworksReport"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Send an email to the current user containing artwork data",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1PartnerPartnerIdCommerceOptInEligibleArtworksReport"
      }
    },
    "/api/v1/partner/{partner_id}/bank_account/{bank_account_id}/refresh": {
      "put": {
        "tags": [
          "partner"
        ],
        "description": "Refresh bank account.",
        "operationId": "putApiV1PartnerPartnerIdBankAccountBankAccountIdRefresh",
        "parameters": [
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bank_account_id",
            "in": "path",
            "description": "Bank Account id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Refresh bank account.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner/{partner_id}/bank_account": {
      "post": {
        "tags": [
          "partner"
        ],
        "description": "Add a bank account to a partner.",
        "operationId": "postApiV1PartnerPartnerIdBankAccount",
        "parameters": [
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1PartnerPartnerIdBankAccount"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Add a bank account to a partner.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1PartnerPartnerIdBankAccount"
      }
    },
    "/api/v1/partner/{partner_id}/bank_account/{bank_account_id}": {
      "delete": {
        "tags": [
          "partner"
        ],
        "description": "Deactivates a partner bank account.",
        "operationId": "deleteApiV1PartnerPartnerIdBankAccountBankAccountId",
        "parameters": [
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bank_account_id",
            "in": "path",
            "description": "Bank Account id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deactivates a partner bank account.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner/{partner_id}/bank_account/{bank_account_id}/default": {
      "put": {
        "tags": [
          "partner"
        ],
        "description": "Set an existing partner bank account to default.",
        "operationId": "putApiV1PartnerPartnerIdBankAccountBankAccountIdDefault",
        "parameters": [
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bank_account_id",
            "in": "path",
            "description": "Bank account id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Set an existing partner bank account to default.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner/{partner_id}/bank_accounts": {
      "get": {
        "tags": [
          "partner"
        ],
        "description": "Retrieve all active partner bank accounts.",
        "operationId": "getApiV1PartnerPartnerIdBankAccounts",
        "parameters": [
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve all active partner bank accounts.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner/{partner_id}/bank_account/setup_intent": {
      "post": {
        "tags": [
          "partner"
        ],
        "description": "Create a setup intent for a partner and returns the client secret of it.",
        "operationId": "postApiV1PartnerPartnerIdBankAccountSetupIntent",
        "parameters": [
          {
            "name": "partner_id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Create a setup intent for a partner and returns the client secret of it.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner/{partner_id}/artists_with_alert_counts": {
      "get": {
        "tags": [
          "partner"
        ],
        "description": "Returns a list of all artists in a partners roster with their alert counts.",
        "operationId": "getApiV1PartnerPartnerIdArtistsWithAlertCounts",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "sortable_id",
                "-sortable_id"
              ]
            }
          },
          {
            "name": "partner_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of all artists in a partners roster with their alert counts.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner/{id}/unpublish_all_works": {
      "put": {
        "tags": [
          "partner"
        ],
        "description": "Unpublish all artworks for the partner.",
        "operationId": "putApiV1PartnerIdUnpublishAllWorks",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Unpublish all artworks for the partner.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner/{id}/netsuite_sync": {
      "post": {
        "tags": [
          "partner"
        ],
        "description": "Update partner based off of associated Customer in Netsuite",
        "operationId": "postApiV1PartnerIdNetsuiteSync",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Update partner based off of associated Customer in Netsuite",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner/{id}/rebuild": {
      "put": {
        "tags": [
          "partner"
        ],
        "description": "Rebuild counts and determine access permissions for an existing partner.",
        "operationId": "putApiV1PartnerIdRebuild",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Rebuild counts and determine access permissions for an existing partner.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner/{id}/partner_flags": {
      "put": {
        "tags": [
          "partner"
        ],
        "description": "Sets (or unsets) a partner flag.",
        "operationId": "putApiV1PartnerIdPartnerFlags",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1PartnerIdPartnerFlags"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Sets (or unsets) a partner flag.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1PartnerIdPartnerFlags"
      }
    },
    "/api/v1/partner/{id}/all": {
      "get": {
        "tags": [
          "partner"
        ],
        "description": "Retrieve deep data for an existing partner.",
        "operationId": "getApiV1PartnerIdAll",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve deep data for an existing partner.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner/{partner_id}/show/{show_id}/events": {
      "get": {
        "tags": [
          "partner"
        ],
        "description": "Retrieve all partner show events for a given show.",
        "operationId": "getApiV1PartnerPartnerIdShowShowIdEvents",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "end_at",
                "-end_at",
                "start_at",
                "-start_at"
              ]
            }
          },
          {
            "name": "partner_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "show_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve all partner show events for a given show.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner/{partner_id}/show/{show_id}/event": {
      "post": {
        "tags": [
          "partner"
        ],
        "description": "Create a partner show event.",
        "operationId": "postApiV1PartnerPartnerIdShowShowIdEvent",
        "parameters": [
          {
            "name": "partner_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "show_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1PartnerPartnerIdShowShowIdEvent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a partner show event.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1PartnerPartnerIdShowShowIdEvent"
      }
    },
    "/api/v1/partner/{partner_id}/show/{show_id}/event/{id}": {
      "get": {
        "tags": [
          "partner"
        ],
        "description": "Retrieve a partner show event.",
        "operationId": "getApiV1PartnerPartnerIdShowShowIdEventId",
        "parameters": [
          {
            "name": "partner_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "show_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a partner show event.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "partner"
        ],
        "description": "Update a partner show event.",
        "operationId": "putApiV1PartnerPartnerIdShowShowIdEventId",
        "parameters": [
          {
            "name": "partner_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "show_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update a partner show event.",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "partner"
        ],
        "description": "Delete a partner show event.",
        "operationId": "deleteApiV1PartnerPartnerIdShowShowIdEventId",
        "parameters": [
          {
            "name": "partner_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "show_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete a partner show event.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner_categories": {
      "get": {
        "tags": [
          "partner_categories"
        ],
        "description": "Retrieve all partner categories.",
        "operationId": "getApiV1PartnerCategories",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "category_type",
            "in": "query",
            "description": "Partner Category Type (Gallery|Institution).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "internal",
            "in": "query",
            "description": "Filter by whether category is internal.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve all partner categories.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner_category/{id}": {
      "get": {
        "tags": [
          "partner_category"
        ],
        "description": "Retrieve a partner category.",
        "operationId": "getApiV1PartnerCategoryId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Partner Category id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a partner category.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "partner_category"
        ],
        "description": "Update an existing partner category.",
        "operationId": "putApiV1PartnerCategoryId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1PartnerCategory"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update an existing partner category.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1PartnerCategory"
      },
      "delete": {
        "tags": [
          "partner_category"
        ],
        "description": "Delete a partner category.",
        "operationId": "deleteApiV1PartnerCategoryId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Partner Category id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete a partner category.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner_category": {
      "post": {
        "tags": [
          "partner_category"
        ],
        "description": "Create a new partner category.",
        "operationId": "postApiV1PartnerCategory",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1PartnerCategory"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a new partner category.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1PartnerCategory"
      }
    },
    "/api/v1/partner_communications": {
      "get": {
        "tags": [
          "partner_communications"
        ],
        "description": "Retrieve partner Api_v1_Partner_Communications.",
        "operationId": "getApiV1PartnerCommunications",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve partner Api_v1_Partner_Communications.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner_communication/{id}": {
      "get": {
        "tags": [
          "partner_communication"
        ],
        "description": "Retrieve an existing partner communication.",
        "operationId": "getApiV1PartnerCommunicationId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Partner Communication id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve an existing partner communication.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "partner_communication"
        ],
        "description": "Update an existing partner communication.",
        "operationId": "putApiV1PartnerCommunicationId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Partner Communication id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1PartnerCommunication"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update an existing partner communication.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1PartnerCommunication"
      },
      "delete": {
        "tags": [
          "partner_communication"
        ],
        "description": "Delete an existing partner communication.",
        "operationId": "deleteApiV1PartnerCommunicationId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Partner Communication id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete an existing partner communication.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner_communication/{id}/partner_contact/{partner_contact_id}": {
      "post": {
        "tags": [
          "partner_communication"
        ],
        "description": "Add a partner contact to a partner communication.",
        "operationId": "postApiV1PartnerCommunicationIdPartnerContactPartnerContactId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Partner Communication id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partner_contact_id",
            "in": "path",
            "description": "Partner Contact id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1PartnerCommunicationIdPartnerContact"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Add a partner contact to a partner communication.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1PartnerCommunicationIdPartnerContact"
      },
      "delete": {
        "tags": [
          "partner_communication"
        ],
        "description": "Remove a partner contact to a partner communication.",
        "operationId": "deleteApiV1PartnerCommunicationIdPartnerContactPartnerContactId",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Partner Communication id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partner_contact_id",
            "in": "path",
            "description": "Partner Contact id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Remove a partner contact to a partner communication.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner_communication/{id}/partner_contacts": {
      "get": {
        "tags": [
          "partner_communication"
        ],
        "description": "List partner contacts for a partner communication.",
        "operationId": "getApiV1PartnerCommunicationIdPartnerContacts",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Partner Communication id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partner",
            "in": "query",
            "description": "Partner identifier.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List partner contacts for a partner communication.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner_communication": {
      "post": {
        "tags": [
          "partner_communication"
        ],
        "description": "Create a partner communication.",
        "operationId": "postApiV1PartnerCommunication",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1PartnerCommunication"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a partner communication.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1PartnerCommunication"
      }
    },
    "/api/v1/partner_gene_categories": {
      "get": {
        "tags": [
          "partner_gene_categories"
        ],
        "description": "Retrieve a map of partner gene categories and genes.",
        "operationId": "getApiV1PartnerGeneCategories",
        "responses": {
          "200": {
            "description": "Retrieve a map of partner gene categories and genes.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner_offer": {
      "post": {
        "tags": [
          "partner_offer"
        ],
        "description": "Create a partner offer.",
        "operationId": "postApiV1PartnerOffer",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1PartnerOffer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a partner offer.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1PartnerOffer"
      }
    },
    "/api/v1/partner_offer/{partner_offer_id}": {
      "get": {
        "tags": [
          "partner_offer"
        ],
        "description": "Show a partner offer.",
        "operationId": "getApiV1PartnerOfferPartnerOfferId",
        "parameters": [
          {
            "name": "partner_offer_id",
            "in": "path",
            "description": "Partner offer id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Show a partner offer.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner_offers": {
      "get": {
        "tags": [
          "partner_offers"
        ],
        "description": "List partner offers.",
        "operationId": "getApiV1PartnerOffers",
        "parameters": [
          {
            "name": "artwork_id",
            "in": "query",
            "description": "Artwork ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "created_at",
                "-created_at",
                "end_at",
                "-end_at"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List partner offers.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner_show_events": {
      "get": {
        "tags": [
          "partner_show_events"
        ],
        "description": "Retrieve all partner show events.",
        "operationId": "getApiV1PartnerShowEvents",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partner_id",
            "in": "query",
            "description": "Partner id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Return partner show events that are 'current', 'running', 'closed' or 'upcoming'.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "end_at",
                "-end_at",
                "start_at",
                "-start_at"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve all partner show events.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner_subscription_charges": {
      "get": {
        "tags": [
          "partner_subscription_charges"
        ],
        "description": "Retrieve partner subscription charges.",
        "operationId": "getApiV1PartnerSubscriptionCharges",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partner_id",
            "in": "query",
            "description": "Partner ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "Filter the charges by their state.",
            "schema": {
              "type": "string",
              "enum": [
                "pending",
                "completed",
                "failed",
                "refunded",
                "deferred",
                "disputed",
                "waived",
                "archived",
                "payment processing"
              ]
            }
          },
          {
            "name": "subscription_id",
            "in": "query",
            "description": "Filter the charges by subscription.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bill_date_from",
            "in": "query",
            "description": "Start of bill date range (YYYY-MM-DD).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bill_date_to",
            "in": "query",
            "description": "End of bill date range (YYYY-MM-DD).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "-created_at",
                "created_at",
                "-bill_date",
                "bill_date"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "payment_method": {
                    "type": "array",
                    "description": "Return charges with given payment methods",
                    "items": {
                      "type": "string",
                      "enum": [
                        "check",
                        "credit card",
                        "other",
                        "wire transfer",
                        "us bank account",
                        "credit card"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Retrieve partner subscription charges.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner_subscription_charge": {
      "post": {
        "tags": [
          "partner_subscription_charge"
        ],
        "description": "Create a partner subscription charge.",
        "operationId": "postApiV1PartnerSubscriptionCharge",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1PartnerSubscriptionCharge"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a partner subscription charge.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1PartnerSubscriptionCharge"
      }
    },
    "/api/v1/partner_subscription_charge/{id}/line_item/{line_item_id}": {
      "delete": {
        "tags": [
          "partner_subscription_charge"
        ],
        "description": "Remove a line item from a charge.",
        "operationId": "deleteApiV1PartnerSubscriptionChargeIdLineItemLineItemId",
        "parameters": [
          {
            "name": "line_item_id",
            "in": "path",
            "description": "Partner Subscription Charge Line Item id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Remove a line item from a charge.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner_subscription_charge/{id}": {
      "get": {
        "tags": [
          "partner_subscription_charge"
        ],
        "description": "Retrieve an existing partner subscription charge.",
        "operationId": "getApiV1PartnerSubscriptionChargeId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve an existing partner subscription charge.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "partner_subscription_charge"
        ],
        "description": "Update an existing partner subscription charge.",
        "operationId": "putApiV1PartnerSubscriptionChargeId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1PartnerSubscriptionCharge"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update an existing partner subscription charge.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1PartnerSubscriptionCharge"
      },
      "delete": {
        "tags": [
          "partner_subscription_charge"
        ],
        "description": "Delete a partner subscription charge",
        "operationId": "deleteApiV1PartnerSubscriptionChargeId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete a partner subscription charge",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner_subscription_charge/{id}/line_item": {
      "post": {
        "tags": [
          "partner_subscription_charge"
        ],
        "description": "Add a line item to a charge.",
        "operationId": "postApiV1PartnerSubscriptionChargeIdLineItem",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1PartnerSubscriptionChargeIdLineItem"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Add a line item to a charge.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1PartnerSubscriptionChargeIdLineItem"
      }
    },
    "/api/v1/partner_subscription_charge/{id}/receive_payment": {
      "put": {
        "tags": [
          "partner_subscription_charge"
        ],
        "description": "Mark an existing charge as completed.",
        "operationId": "putApiV1PartnerSubscriptionChargeIdReceivePayment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1PartnerSubscriptionChargeIdReceivePayment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Mark an existing charge as completed.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1PartnerSubscriptionChargeIdReceivePayment"
      }
    },
    "/api/v1/partner_subscription_charge/{id}/retry": {
      "put": {
        "tags": [
          "partner_subscription_charge"
        ],
        "description": "Retry an existing failed partner subscription charge.",
        "operationId": "putApiV1PartnerSubscriptionChargeIdRetry",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retry an existing failed partner subscription charge.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner_subscription_charge/{id}/bill": {
      "put": {
        "tags": [
          "partner_subscription_charge"
        ],
        "description": "Bill an existing partner subscription charge.",
        "operationId": "putApiV1PartnerSubscriptionChargeIdBill",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Bill an existing partner subscription charge.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner_subscription_events": {
      "get": {
        "tags": [
          "partner_subscription_events"
        ],
        "description": "Retrieve partner subscription events.",
        "operationId": "getApiV1PartnerSubscriptionEvents",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "-created_at",
                "created_at"
              ]
            }
          },
          {
            "name": "partner_id",
            "in": "query",
            "description": "Partner id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "charge_id",
            "in": "query",
            "description": "Partner Susbscription Charge id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Event type. One of the PartnerSubscriptionEvent::Types values.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve partner subscription events.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner_subscription_event/{id}": {
      "get": {
        "tags": [
          "partner_subscription_event"
        ],
        "description": "Retrieve an existing partner subscription event.",
        "operationId": "getApiV1PartnerSubscriptionEventId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Partner Subscription Event id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve an existing partner subscription event.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner_subscription_invoices": {
      "get": {
        "tags": [
          "partner_subscription_invoices"
        ],
        "description": "Retrieve partner subscription invoices.",
        "operationId": "getApiV1PartnerSubscriptionInvoices",
        "parameters": [
          {
            "name": "partner_id",
            "in": "query",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve partner subscription invoices.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner_subscription_invoice/{id}": {
      "get": {
        "tags": [
          "partner_subscription_invoice"
        ],
        "description": "Retrieve a partner subscription invoice.",
        "operationId": "getApiV1PartnerSubscriptionInvoiceId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Invoice id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partner_id",
            "in": "query",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a partner subscription invoice.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner_subscription_plans": {
      "get": {
        "tags": [
          "partner_subscription_plans"
        ],
        "description": "Retrieve partner subscription plans.",
        "operationId": "getApiV1PartnerSubscriptionPlans",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "-price_in_cents",
                "price_in_cents"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve partner subscription plans.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner_subscription_plan/{id}": {
      "get": {
        "tags": [
          "partner_subscription_plan"
        ],
        "description": "Retrieve an existing partner subscription plan.",
        "operationId": "getApiV1PartnerSubscriptionPlanId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Partner Subscription Plan id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve an existing partner subscription plan.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "partner_subscription_plan"
        ],
        "description": "Update an existing partner subscription plan.",
        "operationId": "putApiV1PartnerSubscriptionPlanId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Partner Subscription Plan id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1PartnerSubscriptionPlan"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update an existing partner subscription plan.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1PartnerSubscriptionPlan"
      },
      "delete": {
        "tags": [
          "partner_subscription_plan"
        ],
        "description": "Delete an existing partner subscription plan.",
        "operationId": "deleteApiV1PartnerSubscriptionPlanId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Partner Subscription Plan id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete an existing partner subscription plan.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner_subscription_plan": {
      "post": {
        "tags": [
          "partner_subscription_plan"
        ],
        "description": "Create a partner subscription plan.",
        "operationId": "postApiV1PartnerSubscriptionPlan",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1PartnerSubscriptionPlan"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a partner subscription plan.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1PartnerSubscriptionPlan"
      }
    },
    "/api/v1/partner_subscriptions": {
      "get": {
        "tags": [
          "partner_subscriptions"
        ],
        "description": "Retrieve partner subscriptions.",
        "operationId": "getApiV1PartnerSubscriptions",
        "parameters": [
          {
            "name": "partner_id",
            "in": "query",
            "description": "Partner id to filter for.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "plan_id",
            "in": "query",
            "description": "Subscription plan id to filter for.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "admin_id",
            "in": "query",
            "description": "Only return subscriptions for partners that have a given admin.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "outreach_admin_id",
            "in": "query",
            "description": "Only return subscriptions for partners that were outreached by a given admin.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "referral_contact_id",
            "in": "query",
            "description": "Only return subscriptions for partners that have a given referral contact.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "active",
            "in": "query",
            "description": "Include only active subscriptions.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pending",
            "in": "query",
            "description": "Include only pending subscriptions.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "upcoming",
            "in": "query",
            "description": "Include only upcoming subscriptions.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "current",
            "in": "query",
            "description": "Include only current subscriptions.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "expired",
            "in": "query",
            "description": "Include only expired subscriptions.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "churned",
            "in": "query",
            "description": "Include only churned subscriptions.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve partner subscriptions.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "partner_subscriptions"
        ],
        "description": "Add a partner to a partner subscription plan.",
        "operationId": "postApiV1PartnerSubscriptions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1PartnerSubscriptions"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Add a partner to a partner subscription plan.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1PartnerSubscriptions"
      }
    },
    "/api/v1/partner_subscription/{id}": {
      "get": {
        "tags": [
          "partner_subscription"
        ],
        "description": "Retrieve a partner subscription.",
        "operationId": "getApiV1PartnerSubscriptionId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Partner subscription id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a partner subscription.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "partner_subscription"
        ],
        "description": "Updates a partner subscription.",
        "operationId": "putApiV1PartnerSubscriptionId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1PartnerSubscription"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Updates a partner subscription.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1PartnerSubscription"
      },
      "delete": {
        "tags": [
          "partner_subscription"
        ],
        "description": "Delete an existing not-active subscription.",
        "operationId": "deleteApiV1PartnerSubscriptionId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Partner subscription id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete an existing not-active subscription.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner_subscription/{id}/terminate": {
      "put": {
        "tags": [
          "partner_subscription"
        ],
        "description": "Terminates a partner subscription.",
        "operationId": "putApiV1PartnerSubscriptionIdTerminate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Partner subscription id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1PartnerSubscriptionIdTerminate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Terminates a partner subscription.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1PartnerSubscriptionIdTerminate"
      }
    },
    "/api/v1/partner_subscription/{id}/activate": {
      "put": {
        "tags": [
          "partner_subscription"
        ],
        "description": "Activates a partner subscription.",
        "operationId": "putApiV1PartnerSubscriptionIdActivate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Partner subscription id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1PartnerSubscriptionIdActivate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Activates a partner subscription.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1PartnerSubscriptionIdActivate"
      }
    },
    "/api/v1/partner_artists": {
      "get": {
        "tags": [
          "partner_artists"
        ],
        "description": "Retrieve partner/artist pairs",
        "operationId": "getApiV1PartnerArtists",
        "parameters": [
          {
            "name": "artist_id",
            "in": "query",
            "description": "Artist ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "represented_by",
            "in": "query",
            "description": "Filter to only representation relationships when true",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "display_on_partner_profile",
            "in": "query",
            "description": "When true, filter to only relationships that can be displayed on the front end.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "partner_category": {
                    "type": "array",
                    "description": "Filter to partners matching any of these 0 or more category ids/slugs",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Retrieve partner/artist pairs",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner_artist/{id}": {
      "get": {
        "tags": [
          "partner_artist"
        ],
        "description": "Retrieve a partner artist.",
        "operationId": "getApiV1PartnerArtistId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Partner Artist id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a partner artist.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "partner_artist"
        ],
        "description": "Update a partner artist.",
        "operationId": "putApiV1PartnerArtistId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Partner Artist id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1PartnerArtist"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update a partner artist.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1PartnerArtist"
      }
    },
    "/api/v1/partners": {
      "get": {
        "tags": [
          "partners"
        ],
        "description": "Retrieve all partners.",
        "operationId": "getApiV1Partners",
        "parameters": [
          {
            "name": "has_full_profile",
            "in": "query",
            "description": "Only include partners with 'full' profiles.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "admin_id",
            "in": "query",
            "description": "Only return partners that are managed by a given admin (admin-only).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contract_type",
            "in": "query",
            "description": "Only return partners of a given contract_type. (admin-only).",
            "schema": {
              "type": "string",
              "enum": [
                "General",
                "Subscription",
                "Fair",
                "Custom"
              ]
            }
          },
          {
            "name": "partner_subscription_plan_id",
            "in": "query",
            "description": "Only include partners belonging to a partner subscription plan (admin-only).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "near",
            "in": "query",
            "description": "Coordinates to find partners closest to.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "max_distance",
            "in": "query",
            "description": "Max distance to use when geo-locating partners, defaults to 75km.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "geo_within",
            "in": "query",
            "description": "Comma-delineated list of lat,lng pairs making up a polygon to search inside.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eligible_for_carousel",
            "in": "query",
            "description": "Only include partners eligible for carousel.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "eligible_for_primary_bucket",
            "in": "query",
            "description": "Only include partners eligible for primary (visible) bucket.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "eligible_for_secondary_bucket",
            "in": "query",
            "description": "Only include partners eligible for secondary bucket.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "eligible_for_listing",
            "in": "query",
            "description": "Only include partners eligible for listing.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "exclude_followed_partners",
            "in": "query",
            "description": "Exclude partners the user follows (only effective when `include_partners_with_followed_artists` is set to true).",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "include_partners_with_followed_artists",
            "in": "query",
            "description": "If true, will only return partners that list artists that the user follows",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Result page",
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Maximum number of results to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "term",
            "in": "query",
            "description": "Term to match.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "_slugs",
                "-_slugs",
                "created_at",
                "-created_at",
                "sortable_id",
                "-sortable_id",
                "relative_size",
                "-relative_size",
                "-published_at",
                "-random_score",
                "distance"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "aggregations": {
                    "type": "array",
                    "description": "Aggregations.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "type": {
                    "type": "array",
                    "description": "Only return partners of the specified _type(s).",
                    "items": {
                      "type": "string"
                    }
                  },
                  "partner_categories": {
                    "type": "array",
                    "description": "Only return partners of the specified partner categories. Accepts list of slugs.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "id": {
                    "type": "array",
                    "description": "Returns only partners that match passed in ids, ignores other params.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Retrieve all partners.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner_show/{partner_show_id}/images/reposition": {
      "post": {
        "tags": [
          "partner_show"
        ],
        "description": "Reposition partner show images.",
        "operationId": "postApiV1PartnerShowPartnerShowIdImagesReposition",
        "parameters": [
          {
            "name": "partner_show_id",
            "in": "path",
            "description": "Partner show id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "image_ids"
                ],
                "type": "object",
                "properties": {
                  "image_ids": {
                    "type": "array",
                    "description": "Array of partner show image ids.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Reposition partner show images.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner_show/{partner_show_id}/images": {
      "get": {
        "tags": [
          "partner_show"
        ],
        "description": "Retrieve partner show's images.",
        "operationId": "getApiV1PartnerShowPartnerShowIdImages",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partner_show_id",
            "in": "path",
            "description": "Partner Show id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "default",
            "in": "query",
            "description": "Only include non-covers when set to false.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "position"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve partner show's images.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner_show/{partner_show_id}/image/{id}/artist/{artist_id}": {
      "delete": {
        "tags": [
          "partner_show"
        ],
        "description": "Remove an artist from a partner show's image.",
        "operationId": "deleteApiV1PartnerShowPartnerShowIdImageIdArtistArtistId",
        "parameters": [
          {
            "name": "partner_show_id",
            "in": "path",
            "description": "Partner Show id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Image id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "artist_id",
            "in": "path",
            "description": "Artwork id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Remove an artist from a partner show's image.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner_show/{partner_show_id}/image/{id}/artwork/{artwork_id}": {
      "delete": {
        "tags": [
          "partner_show"
        ],
        "description": "Remove an artwork from a partner show's image.",
        "operationId": "deleteApiV1PartnerShowPartnerShowIdImageIdArtworkArtworkId",
        "parameters": [
          {
            "name": "partner_show_id",
            "in": "path",
            "description": "Partner Show id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Image id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "artwork_id",
            "in": "path",
            "description": "Artwork id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Remove an artwork from a partner show's image.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner_show/{partner_show_id}/image/{id}": {
      "put": {
        "tags": [
          "partner_show"
        ],
        "description": "Update a partner show's image.",
        "operationId": "putApiV1PartnerShowPartnerShowIdImageId",
        "parameters": [
          {
            "name": "partner_show_id",
            "in": "path",
            "description": "Partner Show id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Image id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1PartnerShowPartnerShowIdImage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update a partner show's image.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1PartnerShowPartnerShowIdImage"
      },
      "delete": {
        "tags": [
          "partner_show"
        ],
        "description": "Remove an image from a partner show.",
        "operationId": "deleteApiV1PartnerShowPartnerShowIdImageId",
        "parameters": [
          {
            "name": "partner_show_id",
            "in": "path",
            "description": "Partner Show id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Image id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Remove an image from a partner show.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner_show/{partner_show_id}/image": {
      "post": {
        "tags": [
          "partner_show"
        ],
        "description": "Add an image to a partner show.",
        "operationId": "postApiV1PartnerShowPartnerShowIdImage",
        "parameters": [
          {
            "name": "partner_show_id",
            "in": "path",
            "description": "Partner Show id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1PartnerShowPartnerShowIdImage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Add an image to a partner show.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1PartnerShowPartnerShowIdImage"
      }
    },
    "/api/v1/partner_show/{partner_show_id}/default_image(/{image_version})": {
      "get": {
        "tags": [
          "partner_show"
        ],
        "description": "Get a partner show's default (cover) image.",
        "operationId": "getApiV1PartnerShowPartnerShowIdDefaultImage(ImageVersion)",
        "parameters": [
          {
            "name": "partner_show_id",
            "in": "path",
            "description": "Partner Show id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "image_version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a partner show's default (cover) image.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner_show/{partner_show_id}/image/{id}(/{image_version})": {
      "get": {
        "tags": [
          "partner_show"
        ],
        "description": "Get an partner show's image (install shot).",
        "operationId": "getApiV1PartnerShowPartnerShowIdImageId(ImageVersion)",
        "parameters": [
          {
            "name": "partner_show_id",
            "in": "path",
            "description": "Partner Show id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Image id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filename",
            "in": "query",
            "description": "Filename to download the image as.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "image_version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get an partner show's image (install shot).",
            "content": {}
          }
        }
      }
    },
    "/api/v1/periods": {
      "get": {
        "tags": [
          "periods"
        ],
        "description": "Retrieve periods.",
        "operationId": "getApiV1Periods",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "name",
                "-name",
                "created_at",
                "-created_at"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve periods.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/period": {
      "post": {
        "tags": [
          "period"
        ],
        "description": "Create a new period",
        "operationId": "postApiV1Period",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1Period"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a new period",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1Period"
      }
    },
    "/api/v1/period/{id}": {
      "get": {
        "tags": [
          "period"
        ],
        "description": "Retrieve a period.",
        "operationId": "getApiV1PeriodId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Period id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a period.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "period"
        ],
        "description": "Update an existing period",
        "operationId": "putApiV1PeriodId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Period id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1Period"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update an existing period",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1Period"
      },
      "delete": {
        "tags": [
          "period"
        ],
        "description": "Delete an existing period",
        "operationId": "deleteApiV1PeriodId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Period id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete an existing period",
            "content": {}
          }
        }
      }
    },
    "/api/v1/profile/{id}/image(/{image_version})": {
      "get": {
        "tags": [
          "profile"
        ],
        "description": "Get a profile's image.",
        "operationId": "getApiV1ProfileIdImage(ImageVersion)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Profile id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "image_version",
            "in": "path",
            "description": "Image version.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a profile's image.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/profile/{id}": {
      "get": {
        "tags": [
          "profile"
        ],
        "description": "Retrieve a profile.",
        "operationId": "getApiV1ProfileId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a profile.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "profile"
        ],
        "description": "Update a profile.",
        "operationId": "putApiV1ProfileId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Profile id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1Profile"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update a profile.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1Profile"
      },
      "delete": {
        "tags": [
          "profile"
        ],
        "description": "Delete a profile.",
        "operationId": "deleteApiV1ProfileId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Profile id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete a profile.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/profile": {
      "post": {
        "tags": [
          "profile"
        ],
        "description": "Create a profile.",
        "operationId": "postApiV1Profile",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1Profile"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a profile.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1Profile"
      }
    },
    "/api/v1/profile/{id}/cover_image": {
      "get": {
        "tags": [
          "profile"
        ],
        "description": "Retrieve profile cover image.",
        "operationId": "getApiV1ProfileIdCoverImage",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Profile id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve profile cover image.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "profile"
        ],
        "description": "Update profile cover.",
        "operationId": "putApiV1ProfileIdCoverImage",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Profile id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1ProfileIdCoverImage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update profile cover.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1ProfileIdCoverImage"
      },
      "post": {
        "tags": [
          "profile"
        ],
        "description": "Change profile cover.",
        "operationId": "postApiV1ProfileIdCoverImage",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Profile id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1ProfileIdCoverImage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Change profile cover.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1ProfileIdCoverImage"
      },
      "delete": {
        "tags": [
          "profile"
        ],
        "description": "Delete profile cover image.",
        "operationId": "deleteApiV1ProfileIdCoverImage",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Profile id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete profile cover image.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/profile/{id}/icon": {
      "get": {
        "tags": [
          "profile"
        ],
        "description": "Retrieve profile icon.",
        "operationId": "getApiV1ProfileIdIcon",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Profile id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve profile icon.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "profile"
        ],
        "description": "Update profile icon.",
        "operationId": "putApiV1ProfileIdIcon",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Profile id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1ProfileIdIcon"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update profile icon.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1ProfileIdIcon"
      },
      "post": {
        "tags": [
          "profile"
        ],
        "description": "Change profile icon.",
        "operationId": "postApiV1ProfileIdIcon",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Profile id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1ProfileIdIcon"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Change profile icon.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1ProfileIdIcon"
      },
      "delete": {
        "tags": [
          "profile"
        ],
        "description": "Delete profile icon.",
        "operationId": "deleteApiV1ProfileIdIcon",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Profile id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete profile icon.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/purchases": {
      "get": {
        "tags": [
          "purchases"
        ],
        "description": "Retrieve purchases.",
        "operationId": "getApiV1Purchases",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "without_owner_type",
            "in": "query",
            "description": "Only return purchases with no owner_type.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "without_owner",
            "in": "query",
            "description": "Only return purchases with no owner.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "admin_id",
            "in": "query",
            "description": "Only return purchases belonging to partners that are managed by a given admin.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "created_at",
                "-created_at",
                "sale_date",
                "-sale_date",
                "owner_type",
                "-owner_type",
                "owner_id",
                "-owner_id",
                "artwork_id",
                "-artwork_id"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve purchases.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/purchase/{id}": {
      "put": {
        "tags": [
          "purchase"
        ],
        "description": "Update a purchase.",
        "operationId": "putApiV1PurchaseId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Purchase id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1Purchase"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update a purchase.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1Purchase"
      },
      "delete": {
        "tags": [
          "purchase"
        ],
        "description": "Delete an existing purchase.",
        "operationId": "deleteApiV1PurchaseId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Purchase id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete an existing purchase.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/purchase": {
      "post": {
        "tags": [
          "purchase"
        ],
        "description": "Create a purchase object for artwork sale.",
        "operationId": "postApiV1Purchase",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1Purchase"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a purchase object for artwork sale.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1Purchase"
      }
    },
    "/api/v1/related/posts": {
      "get": {
        "tags": [
          "related"
        ],
        "description": "Return related posts, deprecated.",
        "operationId": "getApiV1RelatedPosts",
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "created_at",
                "-created_at"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "artwork": {
                    "type": "array",
                    "description": "Artworks.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "artist": {
                    "type": "array",
                    "description": "Artists.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return related posts, deprecated.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/related/artworks": {
      "get": {
        "tags": [
          "related"
        ],
        "description": "Related artworks",
        "operationId": "getApiV1RelatedArtworks",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "for_sale",
            "in": "query",
            "description": "If true, will only include for sale artworks.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "artwork_id"
                ],
                "type": "object",
                "properties": {
                  "artwork_id": {
                    "type": "array",
                    "description": "Artwork id.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Related artworks",
            "content": {}
          }
        }
      }
    },
    "/api/v1/related/sales": {
      "get": {
        "tags": [
          "related"
        ],
        "description": "Sales related to an artwork.",
        "operationId": "getApiV1RelatedSales",
        "parameters": [
          {
            "name": "artwork_id",
            "in": "query",
            "description": "Artwork id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "artist_id",
            "in": "query",
            "description": "Artist id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "live",
            "in": "query",
            "description": "If true, will restrict to only live sales.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "is_auction",
            "in": "query",
            "description": "If true, will restrict to only auctions.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "artwork": {
                    "type": "array",
                    "description": "Artwork id.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sales related to an artwork.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/related/shows": {
      "get": {
        "tags": [
          "related"
        ],
        "description": "Shows related to an artwork, or an artist. Optionally restricts shows to booths at a fair.",
        "operationId": "getApiV1RelatedShows",
        "parameters": [
          {
            "name": "artwork_id",
            "in": "query",
            "description": "Artwork id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "artist_id",
            "in": "query",
            "description": "Artist id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fair_id",
            "in": "query",
            "description": "Fair id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "is_reference",
            "in": "query",
            "description": "Whether to include reference shows (default: false).",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "solo_show",
            "in": "query",
            "description": "True/false to return solo shows, or group shows.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "is_institution",
            "in": "query",
            "description": "True/false to return only institutional shows, or gallery shows.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "at_a_fair",
            "in": "query",
            "description": "True/false to return fair booths, or non fair booths.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "top_tier",
            "in": "query",
            "description": "True/false to return top tier shows, or lower tier ones.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "highest_tier",
            "in": "query",
            "description": "True/false to return highest tier shows, or lower tier ones.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "active",
            "in": "query",
            "description": "If true, returns only active shows.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Can filter by closed, running, and upcoming.",
            "schema": {
              "type": "string",
              "enum": [
                "closed",
                "running",
                "upcoming"
              ]
            }
          },
          {
            "name": "displayable",
            "in": "query",
            "description": "Whether to include displayable shows (default: all).",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "visible_to_public",
            "in": "query",
            "description": "If false, will include all shows (default: true)",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "has_location",
            "in": "query",
            "description": "If true, will include only shows with a location, if false only shows without a location.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Result page",
            "schema": {
              "type": "string",
              "default": "1"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Maximum number of results to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "end_at",
                "-end_at",
                "start_at",
                "-start_at",
                "-relevance,-start_at"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "artwork": {
                    "type": "array",
                    "description": "Artwork id.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "artist": {
                    "type": "array",
                    "description": "Artist id.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Shows related to an artwork, or an artist. Optionally restricts shows to booths at a fair.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/related/fairs": {
      "get": {
        "tags": [
          "related"
        ],
        "description": "Fairs related to an artwork.",
        "operationId": "getApiV1RelatedFairs",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "artwork"
                ],
                "type": "object",
                "properties": {
                  "artwork": {
                    "type": "array",
                    "description": "Artwork id.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Fairs related to an artwork.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/related/layer/{id}/artists": {
      "get": {
        "tags": [
          "related"
        ],
        "description": "Search within a layer.",
        "operationId": "getApiV1RelatedLayerIdArtists",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Layer id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "exclude_artists_without_artworks",
            "in": "query",
            "description": "If true, will only include artists with at least one published work.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "min_forsale_artworks",
            "in": "query",
            "description": "Min number of for sale works",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "artist"
                ],
                "type": "object",
                "properties": {
                  "artist": {
                    "type": "array",
                    "description": "Artists.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Search within a layer.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/related/layer/{type}/{id}/artworks": {
      "get": {
        "tags": [
          "related"
        ],
        "description": "Search within a layer.",
        "operationId": "getApiV1RelatedLayerTypeIdArtworks",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Layer id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of artworks to return.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "artwork"
                ],
                "type": "object",
                "properties": {
                  "artwork": {
                    "type": "array",
                    "description": "Artworks.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Search within a layer.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/related/layers": {
      "get": {
        "tags": [
          "related"
        ],
        "description": "Retrieve search layers.",
        "operationId": "getApiV1RelatedLayers",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "artist": {
                    "type": "array",
                    "description": "Artists.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "artwork": {
                    "type": "array",
                    "description": "Artworks.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Retrieve search layers.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/related/genes": {
      "get": {
        "tags": [
          "related"
        ],
        "description": "Return related genes.",
        "operationId": "getApiV1RelatedGenes",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "artist"
                ],
                "type": "object",
                "properties": {
                  "artist": {
                    "type": "array",
                    "description": "Artists.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Return related genes.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/related/artists": {
      "get": {
        "tags": [
          "related"
        ],
        "description": "Return similar artists.",
        "operationId": "getApiV1RelatedArtists",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "artist"
                ],
                "type": "object",
                "properties": {
                  "artist": {
                    "type": "array",
                    "description": "Artists.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Return similar artists.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/representative/{id}/artwork_inquiry_requests": {
      "get": {
        "tags": [
          "representative"
        ],
        "description": "Retrieve all artwork inquiries the admin represents.",
        "operationId": "getApiV1RepresentativeIdArtworkInquiryRequests",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "-created_at",
                "created_at",
                "-outcome",
                "outcome",
                "likely_to_purchase",
                "-likely_to_purchase",
                "status",
                "-status",
                "flagged",
                "-flagged",
                "contact_gallery",
                "-contact_gallery",
                "status,-likely_to_purchase,created_at",
                "last_message_received_at",
                "-last_message_received_at"
              ]
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve all artwork inquiries the admin represents.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/sale_agreements/{id}": {
      "get": {
        "tags": [
          "sale_agreements"
        ],
        "description": "Get an individual sale agreement.",
        "operationId": "getApiV1SaleAgreementsId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The sale agreement's ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get an individual sale agreement.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "sale_agreements"
        ],
        "description": "Update a sale agreement.",
        "operationId": "putApiV1SaleAgreementsId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the sale agreement.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1SaleAgreements"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update a sale agreement.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1SaleAgreements"
      }
    },
    "/api/v1/sale_agreements": {
      "get": {
        "tags": [
          "sale_agreements"
        ],
        "description": "Get all sale_agreements, optionally by status.",
        "operationId": "getApiV1SaleAgreements",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "created_at",
                "-created_at",
                "status",
                "-status"
              ]
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Return the sale agreements with the provided status.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get all sale_agreements, optionally by status.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "sale_agreements"
        ],
        "description": "Create a new sale agreement.",
        "operationId": "postApiV1SaleAgreements",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1SaleAgreements"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a new sale agreement.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1SaleAgreements"
      }
    },
    "/api/v1/sale_artwork/{id}": {
      "get": {
        "tags": [
          "sale_artwork"
        ],
        "description": "Retrieve sale_artwork.",
        "operationId": "getApiV1SaleArtworkId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Sale artwork id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve sale_artwork.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/sale_artworks": {
      "get": {
        "tags": [
          "sale_artworks"
        ],
        "description": "Retrieve sale_artworks for a given artwork.",
        "operationId": "getApiV1SaleArtworks",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "position",
                "end_at",
                "-end_at",
                "timely_at"
              ]
            }
          },
          {
            "name": "artwork_id",
            "in": "query",
            "description": "Artwork id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_watched_artworks",
            "in": "query",
            "description": "If true, will filter sale artworks the user has watched",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "include_artworks_by_followed_artists",
            "in": "query",
            "description": "If true, will filter sale artworks by only artists followed by current user or passed-in user_id",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "exclude_closed_lots",
            "in": "query",
            "description": "If true, does not include artworks for which sale has ended",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "live_sale",
            "in": "query",
            "description": "Sale Status",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "biddable_sale",
            "in": "query",
            "description": "Filter only for sale artworks that are currently accept bids.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "is_auction",
            "in": "query",
            "description": "When true, only return auction artworks.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "When present, will return sale artworks for the given user. If not present, will return sale artworks for the current user.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "withdrawn",
            "in": "query",
            "description": "If true, include sale artworks that are withdrawn for admins/trusted apps.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "marketable",
            "in": "query",
            "description": "Works that are marketable.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve sale_artworks for a given artwork.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/sale/{id}/sale_agreement": {
      "get": {
        "tags": [
          "sale"
        ],
        "description": "Get the sale agreement associated with the sale",
        "operationId": "getApiV1SaleIdSaleAgreement",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Sale id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get the sale agreement associated with the sale",
            "content": {}
          }
        }
      }
    },
    "/api/v1/sale/{id}/unpublish_artworks": {
      "put": {
        "tags": [
          "sale"
        ],
        "description": "Batch un-publish all of the artworks in a sale.",
        "operationId": "putApiV1SaleIdUnpublishArtworks",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Sale id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Batch un-publish all of the artworks in a sale.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/sale/{id}/publish_artworks": {
      "put": {
        "tags": [
          "sale"
        ],
        "description": "Batch publish all of the artworks in a sale.",
        "operationId": "putApiV1SaleIdPublishArtworks",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Sale id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Batch publish all of the artworks in a sale.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/sale/{id}/end_sale": {
      "put": {
        "tags": [
          "sale"
        ],
        "description": "End sale on demand.",
        "operationId": "putApiV1SaleIdEndSale",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Sale id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "End sale on demand.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/sale/{id}/registered_bidders_report": {
      "put": {
        "tags": [
          "sale"
        ],
        "description": "Deliver registered bidders report to admins.",
        "operationId": "putApiV1SaleIdRegisteredBiddersReport",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Sale id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deliver registered bidders report to admins.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/sale/{id}": {
      "get": {
        "tags": [
          "sale"
        ],
        "description": "Retrieve an existing sale.",
        "operationId": "getApiV1SaleId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Sale id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve an existing sale.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "sale"
        ],
        "description": "Update an existing sale.",
        "operationId": "putApiV1SaleId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Sale id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1Sale"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update an existing sale.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1Sale"
      },
      "delete": {
        "tags": [
          "sale"
        ],
        "description": "Delete an existing sale.",
        "operationId": "deleteApiV1SaleId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Sale id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete an existing sale.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/sale": {
      "post": {
        "tags": [
          "sale"
        ],
        "description": "Create a sale.",
        "operationId": "postApiV1Sale",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1Sale"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a sale.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1Sale"
      }
    },
    "/api/v1/sale/{sale_id}/sale_artwork/{artwork_id}/calculated_cost": {
      "get": {
        "tags": [
          "sale"
        ],
        "description": "Get the calculated cost for an artwork in a sale.",
        "operationId": "getApiV1SaleSaleIdSaleArtworkArtworkIdCalculatedCost",
        "parameters": [
          {
            "name": "sale_id",
            "in": "path",
            "description": "Sale id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "artwork_id",
            "in": "path",
            "description": "Artwork id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bid_amount_cents",
            "in": "query",
            "description": "Bid amount in cents.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get the calculated cost for an artwork in a sale.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/sale/{sale_id}/sale_artwork/{artwork_id}": {
      "get": {
        "tags": [
          "sale"
        ],
        "description": "Get a sale artwork from a sale.",
        "operationId": "getApiV1SaleSaleIdSaleArtworkArtworkId",
        "parameters": [
          {
            "name": "sale_id",
            "in": "path",
            "description": "Sale id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "artwork_id",
            "in": "path",
            "description": "Artwork id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "withdrawn",
            "in": "query",
            "description": "If true, include sale artworks that are withdrawn for admins/trusted apps.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a sale artwork from a sale.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "sale"
        ],
        "description": "Update a sale artwork.",
        "operationId": "putApiV1SaleSaleIdSaleArtworkArtworkId",
        "parameters": [
          {
            "name": "sale_id",
            "in": "path",
            "description": "Sale id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "artwork_id",
            "in": "path",
            "description": "Artwork id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1SaleSaleIdSaleArtwork"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update a sale artwork.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1SaleSaleIdSaleArtwork"
      }
    },
    "/api/v1/sale/{sale_id}/sale_artwork": {
      "post": {
        "tags": [
          "sale"
        ],
        "description": "Add an artwork to a sale.",
        "operationId": "postApiV1SaleSaleIdSaleArtwork",
        "parameters": [
          {
            "name": "sale_id",
            "in": "path",
            "description": "Sale id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1SaleSaleIdSaleArtwork"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Add an artwork to a sale.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1SaleSaleIdSaleArtwork"
      }
    },
    "/api/v1/sale/{sale_id}/sale_artworks": {
      "get": {
        "tags": [
          "sale"
        ],
        "description": "Retrieve artworks within a given sale.",
        "operationId": "getApiV1SaleSaleIdSaleArtworks",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sale_id",
            "in": "path",
            "description": "Sale id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "If present, will filter lots to either open or closed.",
            "schema": {
              "type": "string",
              "enum": [
                "open",
                "closed"
              ]
            }
          },
          {
            "name": "has_bids",
            "in": "query",
            "description": "Only return sale artworks that have bids.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "withdrawn",
            "in": "query",
            "description": "If true, include sale artworks that are withdrawn for admins/trusted apps.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "position",
                "-position"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "ids": {
                    "type": "array",
                    "description": "Returns these objects if passed in.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "exclude_ids": {
                    "type": "array",
                    "description": "An array of sale artwork database ids to exclude from the response.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "artwork_ids": {
                    "type": "array",
                    "description": "An array of artwork database ids to include in the response.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Retrieve artworks within a given sale.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/sales": {
      "get": {
        "tags": [
          "sales"
        ],
        "description": "Retrieve sales.",
        "operationId": "getApiV1Sales",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partner_id",
            "in": "query",
            "description": "Returns sales owned by this partner.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "batched",
            "in": "query",
            "description": "Formats result for batched queries, preserves nulls in the list and maintains order in `id`.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "registered",
            "in": "query",
            "description": "Returns sales the user has registered for if true, returns sales the user has not registered for if false.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "auction_state",
            "in": "query",
            "description": "Returns sales filtered to a particular type of auction.",
            "schema": {
              "type": "string",
              "enum": [
                "open",
                "closed",
                "upcoming"
              ]
            }
          },
          {
            "name": "is_artsy_licensed",
            "in": "query",
            "description": "Returns sales that are Artsy-licensed if true, returns sales that are not Artsy-licensed if false.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "is_benefit",
            "in": "query",
            "description": "Returns sales that are benefit auctions if true, returns sales that are not benefit auctions if false.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "min_start_at",
            "in": "query",
            "description": "Returns sales that start at or after this time.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "id",
                "-id",
                "name",
                "-name",
                "created_at",
                "-created_at",
                "start_at",
                "-start_at",
                "end_at",
                "-end_at",
                "eligible_sale_artworks_count",
                "-eligible_sale_artworks_count",
                "timely_at",
                "-timely_at",
                "timely_at,name",
                "-timely_at,name",
                "is_artsy_licensed,timely_at,name",
                "-is_artsy_licensed,timely_at,name"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "id"
                ],
                "type": "object",
                "properties": {
                  "id": {
                    "type": "array",
                    "description": "Restrict to this subset of sales. `sort` will be respected if provided. With `batched`, order is preserved.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Retrieve sales.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/search/filtered/{type}/{id}/options": {
      "get": {
        "tags": [
          "search"
        ],
        "description": "Filter options.",
        "operationId": "getApiV1SearchFilteredTypeIdOptions",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Filter options.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/search/filtered/{type}/{id}": {
      "get": {
        "tags": [
          "search"
        ],
        "description": "Filtered gene/tag/fair/artist search.",
        "operationId": "getApiV1SearchFilteredTypeId",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Filtered gene/tag/fair/artist search.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/sets/contains": {
      "get": {
        "tags": [
          "sets"
        ],
        "description": "Get all sets, that contain the given item.",
        "operationId": "getApiV1SetsContains",
        "parameters": [
          {
            "name": "item_type",
            "in": "query",
            "description": "Item type.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "item_id",
            "in": "query",
            "description": "Item id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "_id",
                "-_id",
                "key",
                "-key",
                "created_at",
                "-created_at",
                "owner_type",
                "-owner_type",
                "owner_id",
                "-owner_id",
                "item_type",
                "-item_type",
                "name",
                "-name",
                "internal_name",
                "-internal_name"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get all sets, that contain the given item.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/sets": {
      "get": {
        "tags": [
          "sets"
        ],
        "description": "Get all sets, optionally by label, item_type, or owner.",
        "operationId": "getApiV1Sets",
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "_id",
                "-_id",
                "key",
                "-key",
                "created_at",
                "-created_at",
                "owner_type",
                "-owner_type",
                "owner_id",
                "-owner_id",
                "item_type",
                "-item_type",
                "name",
                "-name",
                "internal_name",
                "-internal_name"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get all sets, optionally by label, item_type, or owner.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/set/{id}/item/{item_id}": {
      "put": {
        "tags": [
          "set"
        ],
        "description": "Update an item in an existing set.",
        "operationId": "putApiV1SetIdItemItemId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Set id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "item_id",
            "in": "path",
            "description": "Item id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1SetIdItem"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update an item in an existing set.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1SetIdItem"
      },
      "delete": {
        "tags": [
          "set"
        ],
        "description": "Delete an item from an existing set.",
        "operationId": "deleteApiV1SetIdItemItemId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Set id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "item_id",
            "in": "path",
            "description": "Item id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete an item from an existing set.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/set/{id}/item": {
      "post": {
        "tags": [
          "set"
        ],
        "description": "Add an item to an existing set.",
        "operationId": "postApiV1SetIdItem",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Set id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1SetIdItem"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Add an item to an existing set.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1SetIdItem"
      }
    },
    "/api/v1/set/{id}/items": {
      "get": {
        "tags": [
          "set"
        ],
        "description": "Get all items in an existing set.",
        "operationId": "getApiV1SetIdItems",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Set id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "has_image",
            "in": "query",
            "description": "True to reject items without images.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "exclude_disliked_artworks",
            "in": "query",
            "description": "Exclude disliked artworks if authenticated.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get all items in an existing set.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/set/{id}": {
      "get": {
        "tags": [
          "set"
        ],
        "description": "Retrieve an existing set.",
        "operationId": "getApiV1SetId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Set id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve an existing set.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "set"
        ],
        "description": "Update an existing set.",
        "operationId": "putApiV1SetId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Set id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1Set"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update an existing set.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1Set"
      },
      "delete": {
        "tags": [
          "set"
        ],
        "description": "Delete an existing set.",
        "operationId": "deleteApiV1SetId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Set id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete an existing set.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/set": {
      "post": {
        "tags": [
          "set"
        ],
        "description": "Create a new set.",
        "operationId": "postApiV1Set",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1Set"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a new set.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1Set"
      }
    },
    "/api/v1/shortcut": {
      "post": {
        "tags": [
          "shortcut"
        ],
        "description": "Create a new shortcut for a given long URL (and optional short URL).",
        "operationId": "postApiV1Shortcut",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1Shortcut"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a new shortcut for a given long URL (and optional short URL).",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1Shortcut"
      }
    },
    "/api/v1/shortcut/{short}": {
      "get": {
        "tags": [
          "shortcut"
        ],
        "description": "Retrieve a shortcut by short.",
        "operationId": "getApiV1ShortcutShort",
        "parameters": [
          {
            "name": "short",
            "in": "path",
            "description": "Shortcut id or shortcut name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a shortcut by short.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "shortcut"
        ],
        "description": "Update an existing shortcut.",
        "operationId": "putApiV1ShortcutShort",
        "parameters": [
          {
            "name": "short",
            "in": "path",
            "description": "Shortcut short.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1Shortcut"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update an existing shortcut.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1Shortcut"
      },
      "delete": {
        "tags": [
          "shortcut"
        ],
        "description": "Delete an existing shortcut.",
        "operationId": "deleteApiV1ShortcutShort",
        "parameters": [
          {
            "name": "short",
            "in": "path",
            "description": "Shortcut short.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete an existing shortcut.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/shortcuts": {
      "get": {
        "tags": [
          "shortcuts"
        ],
        "description": "Retrieve all shortcuts.",
        "operationId": "getApiV1Shortcuts",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "short",
                "-short",
                "created_at",
                "-created_at"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve all shortcuts.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/show/{id}": {
      "get": {
        "tags": [
          "show"
        ],
        "description": "Retrieve a partner show.",
        "operationId": "getApiV1ShowId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Partner show id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a partner show.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "show"
        ],
        "description": "Update an existing partner show.",
        "operationId": "putApiV1ShowId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1Show"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update an existing partner show.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1Show"
      },
      "delete": {
        "tags": [
          "show"
        ],
        "description": "Delete a show.",
        "operationId": "deleteApiV1ShowId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Show id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete a show.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/show": {
      "post": {
        "tags": [
          "show"
        ],
        "description": "Create a new partner show.",
        "operationId": "postApiV1Show",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1Show"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a new partner show.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1Show"
      }
    },
    "/api/v1/shows": {
      "get": {
        "tags": [
          "shows"
        ],
        "description": "Retrieve all partner shows.",
        "operationId": "getApiV1Shows",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "artwork",
            "in": "query",
            "description": "Filter shows by the artwork on exhibit.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Return shows that are 'current', 'running', 'closed', 'upcoming' or 'active'.",
            "schema": {
              "type": "string",
              "enum": [
                "current",
                "running",
                "closed",
                "upcoming",
                "running_and_upcoming",
                "closing_soon",
                "active"
              ]
            }
          },
          {
            "name": "day_threshold",
            "in": "query",
            "description": "Number of days which will be used to filter upcoming and closing soon shows.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "near",
            "in": "query",
            "description": "Coordinates to find shows closest to.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "max_distance",
            "in": "query",
            "description": "Max distance to use when geo-locating shows (default: 75 km).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fair_id",
            "in": "query",
            "description": "Only return shows at the given fair.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partner_id",
            "in": "query",
            "description": "Only return shows at the given partner.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "displayable",
            "in": "query",
            "description": "Include all displayable shows.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "include_local_discovery",
            "in": "query",
            "description": "Include local discovery shows.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "at_a_fair",
            "in": "query",
            "description": "Only return shows that are part of a fair.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "has_location",
            "in": "query",
            "description": "If true, will include only shows with a location, if false only shows without a location.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "include_discovery_blocked",
            "in": "query",
            "description": "Include shows that were flagged as non-discoverable.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "created_at",
                "-created_at",
                "end_at",
                "-end_at",
                "start_at",
                "-start_at",
                "name",
                "-name",
                "-featured,-start_at",
                "-featured,-end_at",
                "sortable_name",
                "-sortable_name",
                "fully_qualified_name",
                "-fully_qualified_name",
                "-relevance,-start_at"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "array",
                    "description": "Only return shows that match passed in ids.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "partner_types": {
                    "type": "array",
                    "description": "Only return shows that match passed in partner types.",
                    "items": {
                      "type": "string",
                      "enum": [
                        "Auction",
                        "Demo",
                        "Gallery",
                        "Private Collector",
                        "Private Dealer",
                        "Institution",
                        "Institutional Seller",
                        "Brand"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Retrieve all partner shows.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/shows/feed": {
      "get": {
        "tags": [
          "shows"
        ],
        "description": "Retrieve all displayable, non-fair partner shows feed.",
        "operationId": "getApiV1ShowsFeed",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve all displayable, non-fair partner shows feed.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/site_hero_unit/{site_hero_unit_id}/image": {
      "post": {
        "tags": [
          "site_hero_unit"
        ],
        "description": "Add an image to a hero unit.",
        "operationId": "postApiV1SiteHeroUnitSiteHeroUnitIdImage",
        "parameters": [
          {
            "name": "site_hero_unit_id",
            "in": "path",
            "description": "Hero Unit id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1SiteHeroUnitSiteHeroUnitIdImage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Add an image to a hero unit.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1SiteHeroUnitSiteHeroUnitIdImage"
      }
    },
    "/api/v1/site_hero_unit/{id}": {
      "get": {
        "tags": [
          "site_hero_unit"
        ],
        "description": "Retrieve a site hero unit.",
        "operationId": "getApiV1SiteHeroUnitId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Site hero unit id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a site hero unit.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "site_hero_unit"
        ],
        "description": "Update a site hero unit.",
        "operationId": "putApiV1SiteHeroUnitId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Site hero unit id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1SiteHeroUnit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update a site hero unit.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1SiteHeroUnit"
      },
      "delete": {
        "tags": [
          "site_hero_unit"
        ],
        "description": "Delete a site hero unit.",
        "operationId": "deleteApiV1SiteHeroUnitId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Site hero unit id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete a site hero unit.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/site_hero_unit": {
      "post": {
        "tags": [
          "site_hero_unit"
        ],
        "description": "Create a site hero unit.",
        "operationId": "postApiV1SiteHeroUnit",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1SiteHeroUnit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a site hero unit.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1SiteHeroUnit"
      }
    },
    "/api/v1/site_hero_units": {
      "get": {
        "tags": [
          "site_hero_units"
        ],
        "description": "Retrieve all site hero units.",
        "operationId": "getApiV1SiteHeroUnits",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "enabled",
            "in": "query",
            "description": "Only return enabled site hero units.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Grape::API::Boolean",
            "in": "query",
            "description": "Only return enabled site hero units.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mobile",
            "in": "query",
            "description": "Don't return non-mobile hero units.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "desktop",
            "in": "query",
            "description": "Don't return non-desktop hero units.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "martsy",
            "in": "query",
            "description": "Don't return non-martsy hero units.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "position"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve all site hero units.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/stripe_customer": {
      "get": {
        "tags": [
          "stripe_customer"
        ],
        "description": "Retrieve Stripe customer for a partner.",
        "operationId": "getApiV1StripeCustomer",
        "parameters": [
          {
            "name": "partner_id",
            "in": "query",
            "description": "Partner Id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve Stripe customer for a partner.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "stripe_customer"
        ],
        "description": "Create or return an existing customer account and Stripe customer for a user.",
        "operationId": "postApiV1StripeCustomer",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1StripeCustomer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create or return an existing customer account and Stripe customer for a user.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1StripeCustomer"
      }
    },
    "/api/v1/system/roles": {
      "get": {
        "tags": [
          "system"
        ],
        "description": "List all available roles",
        "operationId": "getApiV1SystemRoles",
        "responses": {
          "200": {
            "description": "List all available roles",
            "content": {}
          }
        }
      }
    },
    "/api/v1/system/time(/{zone})": {
      "get": {
        "tags": [
          "system"
        ],
        "description": "Return system time.",
        "operationId": "getApiV1SystemTime(Zone)",
        "parameters": [
          {
            "name": "zone",
            "in": "path",
            "description": "Time zone, one of local or utc.",
            "required": true,
            "schema": {
              "type": "string",
              "default": "utc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return system time.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/system/cache": {
      "delete": {
        "tags": [
          "system"
        ],
        "description": "Clear rails cache.",
        "operationId": "deleteApiV1SystemCache",
        "responses": {
          "204": {
            "description": "Clear rails cache.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/system/info": {
      "get": {
        "tags": [
          "system"
        ],
        "description": "Retrieve system info.",
        "operationId": "getApiV1SystemInfo",
        "responses": {
          "200": {
            "description": "Retrieve system info.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/system/up": {
      "get": {
        "tags": [
          "system"
        ],
        "description": "System up check.",
        "operationId": "getApiV1SystemUp",
        "responses": {
          "200": {
            "description": "System up check.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/system/boom/{status_code}": {
      "get": {
        "tags": [
          "system"
        ],
        "description": "Return a specific error response.",
        "operationId": "getApiV1SystemBoomStatusCode",
        "parameters": [
          {
            "name": "status_code",
            "in": "path",
            "description": "An HTTP response status code.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return a specific error response.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/system/boom": {
      "get": {
        "tags": [
          "system"
        ],
        "description": "Raise an exception with an optional error status to return.",
        "operationId": "getApiV1SystemBoom",
        "responses": {
          "200": {
            "description": "Raise an exception with an optional error status to return.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/system/ping": {
      "get": {
        "tags": [
          "system"
        ],
        "description": "Return pong.",
        "operationId": "getApiV1SystemPing",
        "responses": {
          "200": {
            "description": "Return pong.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/tag/{id}": {
      "get": {
        "tags": [
          "tag"
        ],
        "description": "Retrieve a tag.",
        "operationId": "getApiV1TagId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tag id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a tag.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "tag"
        ],
        "description": "Update an existing tag.",
        "operationId": "putApiV1TagId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tag id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1Tag"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update an existing tag.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1Tag"
      },
      "delete": {
        "tags": [
          "tag"
        ],
        "description": "Delete a tag.",
        "operationId": "deleteApiV1TagId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tag id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete a tag.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/tag/{id}/image(/{image_version})": {
      "get": {
        "tags": [
          "tag"
        ],
        "description": "Get a tag's image.",
        "operationId": "getApiV1TagIdImage(ImageVersion)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tag's id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "image_version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a tag's image.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/tag/{id}/artworks": {
      "get": {
        "tags": [
          "tag"
        ],
        "description": "Retrieve tagged artworks.",
        "operationId": "getApiV1TagIdArtworks",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Tag id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve tagged artworks.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/tags": {
      "get": {
        "tags": [
          "tags"
        ],
        "description": "Retrieve all tags.",
        "operationId": "getApiV1Tags",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "name",
                "-name",
                "created_at",
                "-created_at"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve all tags.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/token/exchange": {
      "post": {
        "tags": [
          "token"
        ],
        "description": "Get a token for a client app.",
        "operationId": "postApiV1TokenExchange",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1TokenExchange"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Get a token for a client app.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1TokenExchange"
      }
    },
    "/api/v1/user_art_quiz": {
      "get": {
        "tags": [
          "user_art_quiz"
        ],
        "description": "Retrieve a user's art quiz.",
        "operationId": "getApiV1UserArtQuiz",
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "description": "The id of the user to retrieve the art quiz for.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a user's art quiz.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "user_art_quiz"
        ],
        "description": "Update a user's art quiz.",
        "operationId": "putApiV1UserArtQuiz",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1UserArtQuiz"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update a user's art quiz.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1UserArtQuiz"
      }
    },
    "/api/v1/user_fair_actions": {
      "get": {
        "tags": [
          "user_fair_actions"
        ],
        "description": "Retrieve user fair actions for a given collector or sale profile.",
        "operationId": "getApiV1UserFairActions",
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "-_id",
                "_id"
              ]
            }
          },
          {
            "name": "owner_type",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "UserSaleProfile",
                "CollectorProfile"
              ]
            }
          },
          {
            "name": "owner_id",
            "in": "query",
            "description": "ID of owner",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "anonymous_session_id",
            "in": "query",
            "description": "Session ID of the inquirer if anonymous.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "session_id",
            "in": "query",
            "description": "Client's key for anonymous session.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "User id.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve user fair actions for a given collector or sale profile.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/user_fair_action/{id}": {
      "delete": {
        "tags": [
          "user_fair_action"
        ],
        "description": "Delete a user-fair action",
        "operationId": "deleteApiV1UserFairActionId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "UserFairAction id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete a user-fair action",
            "content": {}
          }
        }
      }
    },
    "/api/v1/user_fair_action": {
      "post": {
        "tags": [
          "user_fair_action"
        ],
        "description": "Creates a new user fair action for a given collector or sale profile.",
        "operationId": "postApiV1UserFairAction",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1UserFairAction"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Creates a new user fair action for a given collector or sale profile.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1UserFairAction"
      }
    },
    "/api/v1/user_interests": {
      "get": {
        "tags": [
          "user_interests"
        ],
        "description": "Retrieve user interests of a collector profile.",
        "operationId": "getApiV1UserInterests",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "owner_id",
            "in": "query",
            "description": "Collector profile or sale profile id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "owner_type",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "UserSaleProfile",
                "CollectorProfile"
              ]
            }
          },
          {
            "name": "interest_type",
            "in": "query",
            "description": "Type of interest.",
            "schema": {
              "type": "string",
              "enum": [
                "Artist",
                "Gene"
              ]
            }
          },
          {
            "name": "category",
            "in": "query",
            "description": "Category of interest.",
            "schema": {
              "type": "string",
              "enum": [
                "collected_before",
                "interested_in_collecting"
              ]
            }
          },
          {
            "name": "anonymous_session_id",
            "in": "query",
            "description": "Anonymous session id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "session_id",
            "in": "query",
            "description": "Client's key for anonymous session.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "User id.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve user interests of a collector profile.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/user_interest/{id}": {
      "get": {
        "tags": [
          "user_interest"
        ],
        "description": "Get an interest.",
        "operationId": "getApiV1UserInterestId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User interest id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "anonymous_session_id",
            "in": "query",
            "description": "Anonymous session id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "session_id",
            "in": "query",
            "description": "Client's key for anonymous session.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get an interest.",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "user_interest"
        ],
        "description": "Delete an interest.",
        "operationId": "deleteApiV1UserInterestId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User interest id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "anonymous_session_id",
            "in": "query",
            "description": "Anonymous session id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "session_id",
            "in": "query",
            "description": "Client's key for anonymous session.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete an interest.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/user_interest": {
      "post": {
        "tags": [
          "user_interest"
        ],
        "description": "Add an interest.",
        "operationId": "postApiV1UserInterest",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1UserInterest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Add an interest.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1UserInterest"
      }
    },
    "/api/v1/user_sale_profile/{id}": {
      "get": {
        "tags": [
          "user_sale_profile"
        ],
        "description": "Retrieve a sale profile.",
        "operationId": "getApiV1UserSaleProfileId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Sale profile id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a sale profile.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "user_sale_profile"
        ],
        "description": "Update a profile.",
        "operationId": "putApiV1UserSaleProfileId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Sale profile id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1UserSaleProfile"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update a profile.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1UserSaleProfile"
      },
      "delete": {
        "tags": [
          "user_sale_profile"
        ],
        "description": "Delete a sale profile.",
        "operationId": "deleteApiV1UserSaleProfileId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Sale profile id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete a sale profile.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/user_sale_profile": {
      "post": {
        "tags": [
          "user_sale_profile"
        ],
        "description": "Create a sale profile.",
        "operationId": "postApiV1UserSaleProfile",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1UserSaleProfile"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a sale profile.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1UserSaleProfile"
      }
    },
    "/api/v1/user/{id}/representative/{representative_id}": {
      "put": {
        "tags": [
          "user"
        ],
        "description": "Update a user's representative.",
        "operationId": "putApiV1UserIdRepresentativeRepresentativeId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "representative_id",
            "in": "path",
            "description": "Representative's id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update a user's representative.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/user/{id}/representative": {
      "get": {
        "tags": [
          "user"
        ],
        "description": "Retrieve a user's representative.",
        "operationId": "getApiV1UserIdRepresentative",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a user's representative.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/user/{id}/lab_feature/{feature_id}": {
      "post": {
        "tags": [
          "user"
        ],
        "description": "Enable a lab feature for a user.",
        "operationId": "postApiV1UserIdLabFeatureFeatureId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "feature_id",
            "in": "path",
            "description": "Lab Feature id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1UserIdLabFeature"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Enable a lab feature for a user.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1UserIdLabFeature"
      },
      "delete": {
        "tags": [
          "user"
        ],
        "description": "Disables a lab feature for a user.",
        "operationId": "deleteApiV1UserIdLabFeatureFeatureId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "feature_id",
            "in": "path",
            "description": "Lab Feature id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Disables a lab feature for a user.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/user/{id}/lab_features": {
      "get": {
        "tags": [
          "user"
        ],
        "description": "Retrieve a user's enabled lab features.",
        "operationId": "getApiV1UserIdLabFeatures",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a user's enabled lab features.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/user": {
      "get": {
        "tags": [
          "user"
        ],
        "description": "Check whether a user exists by email address.",
        "operationId": "getApiV1User",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "User email.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Check whether a user exists by email address.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "user"
        ],
        "description": "Create a new user.",
        "operationId": "postApiV1User",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a new user.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1User"
      }
    },
    "/api/v1/user/identify": {
      "post": {
        "tags": [
          "user"
        ],
        "description": "Check whether a user exists by email address (used by Artsy clients for authentication flows).",
        "operationId": "postApiV1UserIdentify",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1UserIdentify"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Check whether a user exists by email address (used by Artsy clients for authentication flows).",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1UserIdentify"
      }
    },
    "/api/v1/user/{id}/admin_note/{admin_note_id}": {
      "get": {
        "tags": [
          "user"
        ],
        "description": "Retrieve one user admin_note.",
        "operationId": "getApiV1UserIdAdminNoteAdminNoteId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "admin_note_id",
            "in": "path",
            "description": "Admin note id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve one user admin_note.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "description": "Update an existing admin_note.",
        "operationId": "putApiV1UserIdAdminNoteAdminNoteId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "admin_note_id",
            "in": "path",
            "description": "Admin note id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update an existing admin_note.",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "description": "Delete an existing admin_note.",
        "operationId": "deleteApiV1UserIdAdminNoteAdminNoteId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "admin_note_id",
            "in": "path",
            "description": "Admin note id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete an existing admin_note.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/user/{id}/admin_notes": {
      "get": {
        "tags": [
          "user"
        ],
        "description": "Retrieve all user's admin_notes.",
        "operationId": "getApiV1UserIdAdminNotes",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve all user's admin_notes.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/user/{id}/admin_note": {
      "post": {
        "tags": [
          "user"
        ],
        "description": "Create a user admin_note.",
        "operationId": "postApiV1UserIdAdminNote",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Create a user admin_note.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/user/{user_id}/access_control/{id}": {
      "delete": {
        "tags": [
          "user"
        ],
        "description": "Delete a user's access control.",
        "operationId": "deleteApiV1UserUserIdAccessControlId",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Access control id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete a user's access control.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/user/{id}/access_controls": {
      "get": {
        "tags": [
          "user"
        ],
        "description": "Get user's access controls.",
        "operationId": "getApiV1UserIdAccessControls",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "model",
            "in": "query",
            "description": "Property model, eg. 'partner'.",
            "schema": {
              "type": "string",
              "enum": [
                "partner",
                "artist",
                "artwork",
                "profile"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get user's access controls.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/user/{user_id}/access_control": {
      "post": {
        "tags": [
          "user"
        ],
        "description": "Grants user access to a model.",
        "operationId": "postApiV1UserUserIdAccessControl",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1UserUserIdAccessControl"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Grants user access to a model.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1UserUserIdAccessControl"
      }
    },
    "/api/v1/user/{id}/backup_code": {
      "post": {
        "tags": [
          "user"
        ],
        "description": "Send the User a 2FA backup code",
        "operationId": "postApiV1UserIdBackupCode",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Send the User a 2FA backup code",
            "content": {}
          }
        }
      }
    },
    "/api/v1/user/{id}/password": {
      "put": {
        "tags": [
          "user"
        ],
        "description": "Change a users password.",
        "operationId": "putApiV1UserIdPassword",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1UserIdPassword"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Change a users password.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1UserIdPassword"
      }
    },
    "/api/v1/user/{id}/recently_viewed_artwork_ids": {
      "get": {
        "tags": [
          "user"
        ],
        "description": "Retrieve all recently viewed artworks by a user.",
        "operationId": "getApiV1UserIdRecentlyViewedArtworkIds",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve all recently viewed artworks by a user.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/user/{id}/artwork_inquiry_requests": {
      "get": {
        "tags": [
          "user"
        ],
        "description": "Retrieve all artwork inquiry requests by a user.",
        "operationId": "getApiV1UserIdArtworkInquiryRequests",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "-created_at",
                "created_at",
                "-outcome",
                "outcome",
                "likely_to_purchase",
                "-likely_to_purchase",
                "status",
                "-status",
                "flagged",
                "-flagged",
                "contact_gallery",
                "-contact_gallery",
                "status,-likely_to_purchase,created_at",
                "last_message_received_at",
                "-last_message_received_at"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve all artwork inquiry requests by a user.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/user/{id}/suggested/genes": {
      "get": {
        "tags": [
          "user"
        ],
        "description": "Retrieve suggested genes for a user.",
        "operationId": "getApiV1UserIdSuggestedGenes",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve suggested genes for a user.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/user/{id}/suggested/similar/artists": {
      "get": {
        "tags": [
          "user"
        ],
        "description": "Retrieve suggested artists for a user, based on similar artists.",
        "operationId": "getApiV1UserIdSuggestedSimilarArtists",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit_per_artist",
            "in": "query",
            "description": "Limit the number of suggestions per artist.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "exclude_artists_without_forsale_artworks",
            "in": "query",
            "description": "When true, will only include artists with for sale works.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "exclude_followed_artists",
            "in": "query",
            "description": "If true, will exclude followed artists as a suggestion.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve suggested artists for a user, based on similar artists.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/user/{id}/follow/profiles": {
      "get": {
        "tags": [
          "user"
        ],
        "description": "Retrieve all profiles followed by a user.",
        "operationId": "getApiV1UserIdFollowProfiles",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Profile type.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve all profiles followed by a user.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/user/{id}/follow/genes": {
      "get": {
        "tags": [
          "user"
        ],
        "description": "Retrieve all genes followed by a user.",
        "operationId": "getApiV1UserIdFollowGenes",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "name",
                "-name",
                "counts.artists",
                "-counts.artists",
                "counts.artworks",
                "-counts.artworks",
                "published",
                "-published",
                "automated",
                "-automated"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve all genes followed by a user.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/user/{id}/roles/{role_type}": {
      "post": {
        "tags": [
          "user"
        ],
        "description": "Add a new role to the user",
        "operationId": "postApiV1UserIdRolesRoleType",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "role_type",
            "in": "path",
            "description": "Role type.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "admin",
                "billing_admin",
                "consignments_manager",
                "consignments_representative",
                "content_manager",
                "customer_support",
                "editorial",
                "genomer",
                "metadata_admin",
                "partner_support",
                "role_manager",
                "sales_admin",
                "sales_observer",
                "subscriptions_manager",
                "team",
                "verification_admin"
              ]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Add a new role to the user",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "description": "Remove a role from a user",
        "operationId": "deleteApiV1UserIdRolesRoleType",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "role_type",
            "in": "path",
            "description": "Role type.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "admin",
                "billing_admin",
                "consignments_manager",
                "consignments_representative",
                "content_manager",
                "customer_support",
                "editorial",
                "genomer",
                "metadata_admin",
                "partner_support",
                "role_manager",
                "sales_admin",
                "sales_observer",
                "subscriptions_manager",
                "team",
                "verification_admin"
              ]
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Remove a role from a user",
            "content": {}
          }
        }
      }
    },
    "/api/v1/user/{id}/follow/artists": {
      "get": {
        "tags": [
          "user"
        ],
        "description": "Retrieve all artists followed by a user.",
        "operationId": "getApiV1UserIdFollowArtists",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "_slugs",
                "-_slugs",
                "created_at",
                "-created_at",
                "sortable_id",
                "-sortable_id",
                "-trending"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve all artists followed by a user.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/user/{id}": {
      "get": {
        "tags": [
          "user"
        ],
        "description": "Retrieve a user by id.",
        "operationId": "getApiV1UserId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a user by id.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "description": "Update an existing user.",
        "operationId": "putApiV1UserId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update an existing user.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1User"
      },
      "delete": {
        "tags": [
          "user"
        ],
        "description": "Delete an existing user.",
        "operationId": "deleteApiV1UserId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete an existing user.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/users/reset_password": {
      "put": {
        "tags": [
          "users"
        ],
        "description": "Reset a password given a password token.",
        "operationId": "putApiV1UsersResetPassword",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1UsersResetPassword"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Reset a password given a password token.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1UsersResetPassword"
      }
    },
    "/api/v1/users/send_reset_password_instructions": {
      "post": {
        "tags": [
          "users"
        ],
        "description": "Send reset password instructions.",
        "operationId": "postApiV1UsersSendResetPasswordInstructions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1UsersSendResetPasswordInstructions"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Send reset password instructions.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1UsersSendResetPasswordInstructions"
      }
    },
    "/api/v1/users": {
      "get": {
        "tags": [
          "users"
        ],
        "description": "Retrieve all users.",
        "operationId": "getApiV1Users",
        "parameters": [
          {
            "name": "properties",
            "in": "query",
            "description": "Scope of user data to return (default: all).",
            "schema": {
              "type": "string",
              "default": "all",
              "enum": [
                "short",
                "public",
                "all"
              ]
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order.",
            "schema": {
              "type": "string",
              "enum": [
                "name",
                "-name",
                "email",
                "-email",
                "collector_since",
                "-collector_since"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "array",
                    "description": "Only return users that match passed in ids.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "roles": {
                    "type": "array",
                    "description": "Return users that have any of the specified roles (required, depending on privilege level).",
                    "items": {
                      "type": "string",
                      "enum": [
                        "admin",
                        "billing_admin",
                        "consignments_manager",
                        "consignments_representative",
                        "content_manager",
                        "customer_support",
                        "editorial",
                        "genomer",
                        "metadata_admin",
                        "partner_support",
                        "role_manager",
                        "sales_admin",
                        "sales_observer",
                        "subscriptions_manager",
                        "team",
                        "verification_admin"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Retrieve all users.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/verified_representatives/{id}": {
      "delete": {
        "tags": [
          "verified_representatives"
        ],
        "description": "Delete a verified representative.",
        "operationId": "deleteApiV1VerifiedRepresentativesId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete a verified representative.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/verified_representatives": {
      "get": {
        "tags": [
          "verified_representatives"
        ],
        "description": "Get list of verified representatives.",
        "operationId": "getApiV1VerifiedRepresentatives",
        "parameters": [
          {
            "name": "artist_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partner_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get list of verified representatives.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "verified_representatives"
        ],
        "description": "Create a verified representative.",
        "operationId": "postApiV1VerifiedRepresentatives",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1VerifiedRepresentatives"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a verified representative.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1VerifiedRepresentatives"
      }
    },
    "/api/v1/video": {
      "post": {
        "tags": [
          "video"
        ],
        "description": "Create a video.",
        "operationId": "postApiV1Video",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1Video"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a video.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1Video"
      }
    },
    "/api/v1/video/{id}": {
      "get": {
        "tags": [
          "video"
        ],
        "description": "Retrieve a video.",
        "operationId": "getApiV1VideoId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Video id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a video.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/viewing_rooms": {
      "get": {
        "tags": [
          "viewing_rooms"
        ],
        "description": "Retrieve viewing rooms",
        "operationId": "getApiV1ViewingRooms",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partner_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featured",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "statuses": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "default": "",
                      "enum": [
                        "draft",
                        "scheduled",
                        "live",
                        "closed"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Retrieve viewing rooms",
            "content": {}
          }
        }
      }
    },
    "/api/v1/viewing_room/{id}/subsections": {
      "get": {
        "tags": [
          "viewing_room"
        ],
        "description": "Retrieve a viewing room's subsections.",
        "operationId": "getApiV1ViewingRoomIdSubsections",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Viewing room id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a viewing room's subsections.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "viewing_room"
        ],
        "description": "Update a viewing room's subsections.",
        "operationId": "putApiV1ViewingRoomIdSubsections",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1ViewingRoomIdSubsections"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update a viewing room's subsections.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1ViewingRoomIdSubsections"
      }
    },
    "/api/v1/viewing_room/{id}/viewing_room_artworks": {
      "get": {
        "tags": [
          "viewing_room"
        ],
        "description": "Retrieve join entities between viewing rooms and artworks.",
        "operationId": "getApiV1ViewingRoomIdViewingRoomArtworks",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Viewing room id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve join entities between viewing rooms and artworks.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "viewing_room"
        ],
        "description": "Update a viewing room's artworks.",
        "operationId": "putApiV1ViewingRoomIdViewingRoomArtworks",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1ViewingRoomIdViewingRoomArtworks"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update a viewing room's artworks.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1ViewingRoomIdViewingRoomArtworks"
      }
    },
    "/api/v1/viewing_room/{id}": {
      "get": {
        "tags": [
          "viewing_room"
        ],
        "description": "Retrieve a viewing room.",
        "operationId": "getApiV1ViewingRoomId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Viewing room id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a viewing room.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "viewing_room"
        ],
        "description": "Update a viewing room.",
        "operationId": "putApiV1ViewingRoomId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Viewing Room ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putApiV1ViewingRoom"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update a viewing room.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1ViewingRoom"
      },
      "delete": {
        "tags": [
          "viewing_room"
        ],
        "description": "Delete a viewing_room.",
        "operationId": "deleteApiV1ViewingRoomId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Viewing Room ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete a viewing_room.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/viewing_room": {
      "post": {
        "tags": [
          "viewing_room"
        ],
        "description": "Create a viewing room.",
        "operationId": "postApiV1ViewingRoom",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1ViewingRoom"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a viewing room.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1ViewingRoom"
      }
    },
    "/api/v1/xapp_token": {
      "get": {
        "tags": [
          "xapp_token"
        ],
        "description": "Obtain an XApp token.",
        "operationId": "getApiV1XappToken",
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "Client id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_secret",
            "in": "query",
            "description": "Client secret.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Obtain an XApp token.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/address_verification": {
      "post": {
        "tags": [
          "address_verification"
        ],
        "description": "Verify an address",
        "operationId": "postApiV1AddressVerification",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1AddressVerification"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Verify an address",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1AddressVerification"
      }
    },
    "/api/v1/client_application/{id}/client_application_partner/{client_application_partner_id}": {
      "delete": {
        "tags": [
          "client_application"
        ],
        "operationId": "deleteApiV1ClientApplicationIdClientApplicationPartnerClientApplicationPartnerId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Client application id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_application_partner_id",
            "in": "path",
            "description": "Client application partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "deleted ClientApplicationPartner",
            "content": {}
          }
        }
      }
    },
    "/api/v1/client_application/{id}/client_application_partner": {
      "post": {
        "tags": [
          "client_application"
        ],
        "operationId": "postApiV1ClientApplicationIdClientApplicationPartner",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Client application id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1ClientApplicationIdClientApplicationPartner"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "created ClientApplicationPartner",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1ClientApplicationIdClientApplicationPartner"
      }
    },
    "/api/v1/client_application/{id}/client_application_partners": {
      "get": {
        "tags": [
          "client_application"
        ],
        "operationId": "getApiV1ClientApplicationIdClientApplicationPartners",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Client application id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "get ClientApplicationPartner(s)",
            "content": {}
          }
        }
      }
    },
    "/api/v1/fair_booth_import": {
      "post": {
        "tags": [
          "fair_booth_import"
        ],
        "description": "Executes fair booth creation process.",
        "operationId": "postApiV1FairBoothImport",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV1FairBoothImport"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Executes fair booth creation process.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApiV1FairBoothImport"
      }
    },
    "/api/v1/increments": {
      "get": {
        "tags": [
          "increments"
        ],
        "operationId": "getApiV1Increments",
        "parameters": [
          {
            "name": "sale_id",
            "in": "query",
            "description": "ID or slug of sale by which to filter increment strategies.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "in": "query",
            "description": "Key by which to filter increment strategies.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "get Increment(s)",
            "content": {}
          }
        }
      }
    },
    "/api/v1/increment/{key}": {
      "get": {
        "tags": [
          "increment"
        ],
        "operationId": "getApiV1IncrementKey",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Key identifying increment strategy.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "get Increment(s)",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner_collector_profile/{collector_profile_id}/partner_engagement": {
      "get": {
        "tags": [
          "partner_collector_profile"
        ],
        "description": "Retrieve information related to partner engagement.",
        "operationId": "getApiV1PartnerCollectorProfileCollectorProfileIdPartnerEngagement",
        "parameters": [
          {
            "name": "collector_profile_id",
            "in": "path",
            "description": "CollectorProfile id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partner_id",
            "in": "query",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve information related to partner engagement.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner_collector_profile/{collector_profile_id}/artwork_inquiry_requests_count": {
      "get": {
        "tags": [
          "partner_collector_profile"
        ],
        "description": "Retrieve a count of artwork inquiries made by a collector profile.",
        "operationId": "getApiV1PartnerCollectorProfileCollectorProfileIdArtworkInquiryRequestsCount",
        "parameters": [
          {
            "name": "collector_profile_id",
            "in": "path",
            "description": "CollectorProfile id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partner_id",
            "in": "query",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "artist_id",
            "in": "query",
            "description": "When present, only consider inquiry requests for this artist.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a count of artwork inquiries made by a collector profile.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner_collector_profile/{collector_profile_id}/user_interests": {
      "get": {
        "tags": [
          "partner_collector_profile"
        ],
        "description": "Retrieve user interests of a collector profile.",
        "operationId": "getApiV1PartnerCollectorProfileCollectorProfileIdUserInterests",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve, starting at 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to retrieve for this page or from the current offset.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "collector_profile_id",
            "in": "path",
            "description": "CollectorProfile id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partner_id",
            "in": "query",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve user interests of a collector profile.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner_collector_profile": {
      "get": {
        "tags": [
          "partner_collector_profile"
        ],
        "description": "Retrieve details of a partner collector profile",
        "operationId": "getApiV1PartnerCollectorProfile",
        "parameters": [
          {
            "name": "partner_id",
            "in": "query",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve details of a partner collector profile",
            "content": {}
          }
        }
      }
    },
    "/api/v1/partner_collector_profiles": {
      "get": {
        "tags": [
          "partner_collector_profiles"
        ],
        "operationId": "getApiV1PartnerCollectorProfiles",
        "parameters": [
          {
            "name": "partner_id",
            "in": "query",
            "description": "Partner id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "total_count",
            "in": "query",
            "description": "When true, include total count in headers",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "user_ids"
                ],
                "type": "object",
                "properties": {
                  "user_ids": {
                    "type": "array",
                    "description": "User ids.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "get PartnerCollectorProfile(s)",
            "content": {}
          }
        }
      }
    },
    "/api/v1/profiles": {
      "get": {
        "tags": [
          "profiles"
        ],
        "description": "Retrieve 1 or more profiles.",
        "operationId": "getApiV1Profiles",
        "parameters": [
          {
            "name": "owner_type",
            "in": "query",
            "description": "Type of owner.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "array",
                    "description": "One or more profile ids.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "owner_ids": {
                    "type": "array",
                    "description": "One or more owner ids.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Retrieve 1 or more profiles.",
            "content": {}
          }
        }
      }
    },
    "/api/v1/webhook_deliveries": {
      "get": {
        "tags": [
          "webhook_deliveries"
        ],
        "operationId": "getApiV1WebhookDeliveries",
        "parameters": [
          {
            "name": "client_application_id",
            "in": "query",
            "description": "Client application ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "maximum": 99,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "get WebhookDelivery(s)",
            "content": {}
          }
        }
      }
    },
    "/api/v1/webhook_delivery/{id}/redeliver": {
      "post": {
        "tags": [
          "webhook_delivery"
        ],
        "operationId": "postApiV1WebhookDeliveryIdRedeliver",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created Redeliver",
            "content": {}
          }
        }
      }
    },
    "/api/v1/webhook_delivery/{id}": {
      "get": {
        "tags": [
          "webhook_delivery"
        ],
        "operationId": "getApiV1WebhookDeliveryId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "get WebhookDelivery(s)",
            "content": {}
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "postApiV1AccountRequests": {
        "required": [
          "action"
        ],
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string",
            "description": "User id."
          },
          "action": {
            "type": "string",
            "description": "Action taken.",
            "enum": [
              "user_delete",
              "user_data"
            ]
          },
          "notes": {
            "type": "string",
            "description": "Notes."
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        },
        "description": "Create an account request, which may be associated with a user."
      },
      "putApiV1ArtistCareerHighlight": {
        "type": "object",
        "properties": {
          "solo": {
            "type": "string"
          },
          "group": {
            "type": "string"
          },
          "collected": {
            "type": "string"
          }
        },
        "description": "Update an artist career highlight."
      },
      "postApiV1ArtistCareerHighlight": {
        "required": [
          "artist_id",
          "partner_id"
        ],
        "type": "object",
        "properties": {
          "artist_id": {
            "type": "string",
            "description": "Artist id."
          },
          "partner_id": {
            "type": "string",
            "description": "Partner id."
          }
        },
        "description": "Create an artist career highlight."
      },
      "putApiV1ArtistIdGenome": {
        "type": "object",
        "properties": {
          "genes": {
            "type": "object",
            "properties": {},
            "description": "Gene name/value pairs."
          }
        },
        "description": "Update an artist's genome."
      },
      "postApiV1ArtistIdMerge": {
        "required": [
          "artist_id"
        ],
        "type": "object",
        "properties": {
          "artist_id": {
            "type": "string",
            "description": "Artist to merge id."
          }
        },
        "description": "Merge two artists (any artworks, follows, and posts)"
      },
      "postApiV1Artist": {
        "type": "object",
        "properties": {
          "first": {
            "type": "string",
            "description": "First name."
          },
          "middle": {
            "type": "string",
            "description": "Middle name."
          },
          "last": {
            "type": "string",
            "description": "Last name."
          },
          "display_name": {
            "type": "string",
            "description": "Display name."
          },
          "birthday": {
            "type": "string",
            "description": "A date on which the artist was born."
          },
          "deathday": {
            "type": "string",
            "description": "A date on which the artist died."
          },
          "gender": {
            "type": "string",
            "description": "Gender."
          },
          "nationality": {
            "type": "string",
            "description": "The country that best defines the artist."
          },
          "hometown": {
            "type": "string",
            "description": "The city in which the artist was born."
          },
          "location": {
            "type": "string",
            "description": "The city in which the artist is currently working."
          },
          "statement": {
            "type": "string",
            "description": "An artist statement."
          },
          "biography": {
            "type": "string",
            "description": "A brief biography."
          },
          "blurb": {
            "type": "string",
            "description": "A blurb that best describes the artist."
          },
          "education": {
            "type": "string",
            "description": "Artist's degrees and academic achievements."
          },
          "awards": {
            "type": "string",
            "description": "Artist's awards."
          },
          "publications": {
            "type": "string",
            "description": "Artist's publications."
          },
          "collections": {
            "type": "string",
            "description": "Collections that contain artist's works."
          },
          "soloexhibitions": {
            "type": "string",
            "description": "A list of solo exhibitions."
          },
          "groupexhibitions": {
            "type": "string",
            "description": "A list of group exhibitions."
          },
          "image_rights": {
            "type": "string",
            "description": "Rights associated with an artist."
          },
          "alternate_names": {
            "type": "array",
            "description": "Alternate names or synonyms for this artist.",
            "items": {
              "type": "string"
            }
          },
          "featured_names": {
            "type": "array",
            "description": "Used by global search to produce featured results",
            "items": {
              "type": "string"
            }
          },
          "public": {
            "type": "string"
          },
          "gemini_token": {
            "type": "string",
            "description": "Token for image entry on Gemini."
          },
          "consignable": {
            "type": "string",
            "description": "True if Artsy clients may solicit consignments for the artist."
          },
          "hide_auction_link": {
            "type": "string",
            "description": "If true, do not display auction results link."
          },
          "exclude_from_criteo": {
            "type": "string",
            "description": "Exclude from Criteo artwork report."
          },
          "disable_price_context": {
            "type": "string",
            "description": "Disable price context feature."
          },
          "target_supply_priority": {
            "type": "integer",
            "description": "Corresponds to target supply priority tier (e.g. P1, P2)",
            "format": "int32"
          },
          "target_supply_type": {
            "type": "string",
            "description": "The target supply category"
          },
          "group_indicator": {
            "type": "string",
            "description": "Indicates whether the artist is a solo person or more of a group."
          },
          "medium_known_for": {
            "type": "string",
            "description": "Name of medium this artist is known for."
          },
          "alternate_nationalities": {
            "type": "array",
            "description": "Other nationalities associated with the artist, for matching.",
            "items": {
              "type": "string"
            }
          },
          "cover_artwork_id": {
            "type": "string"
          },
          "critically_acclaimed": {
            "type": "string",
            "description": "Indicates whether the artist has been deemed critically acclaimed."
          },
          "vanguard_year": {
            "type": "string",
            "description": "Indicates year the artist was in Artsy Vanguard."
          },
          "recent_show": {
            "type": "string",
            "description": "Recent Artist's Show."
          },
          "foundations": {
            "type": "string",
            "description": "Indicates when the artist was in Artsy Foundations."
          },
          "is_personal_artist": {
            "type": "boolean",
            "description": "Whether the artist is a personal artist that belongs to a user."
          }
        },
        "description": "Create a new artist."
      },
      "putApiV1Artist": {
        "type": "object",
        "properties": {
          "first": {
            "type": "string",
            "description": "First name."
          },
          "middle": {
            "type": "string",
            "description": "Middle name."
          },
          "last": {
            "type": "string",
            "description": "Last name."
          },
          "display_name": {
            "type": "string",
            "description": "Display name."
          },
          "birthday": {
            "type": "string",
            "description": "A date on which the artist was born."
          },
          "deathday": {
            "type": "string",
            "description": "A date on which the artist died."
          },
          "gender": {
            "type": "string",
            "description": "Gender."
          },
          "nationality": {
            "type": "string",
            "description": "The country that best defines the artist."
          },
          "hometown": {
            "type": "string",
            "description": "The city in which the artist was born."
          },
          "location": {
            "type": "string",
            "description": "The city in which the artist is currently working."
          },
          "statement": {
            "type": "string",
            "description": "An artist statement."
          },
          "biography": {
            "type": "string",
            "description": "A brief biography."
          },
          "blurb": {
            "type": "string",
            "description": "A blurb that best describes the artist."
          },
          "education": {
            "type": "string",
            "description": "Artist's degrees and academic achievements."
          },
          "awards": {
            "type": "string",
            "description": "Artist's awards."
          },
          "publications": {
            "type": "string",
            "description": "Artist's publications."
          },
          "collections": {
            "type": "string",
            "description": "Collections that contain artist's works."
          },
          "soloexhibitions": {
            "type": "string",
            "description": "A list of solo exhibitions."
          },
          "groupexhibitions": {
            "type": "string",
            "description": "A list of group exhibitions."
          },
          "image_rights": {
            "type": "string",
            "description": "Rights associated with an artist."
          },
          "alternate_names": {
            "type": "array",
            "description": "Alternate names or synonyms for this artist.",
            "items": {
              "type": "string"
            }
          },
          "featured_names": {
            "type": "array",
            "description": "Used by global search to produce featured results",
            "items": {
              "type": "string"
            }
          },
          "public": {
            "type": "string"
          },
          "gemini_token": {
            "type": "string",
            "description": "Token for image entry on Gemini."
          },
          "consignable": {
            "type": "string",
            "description": "True if Artsy clients may solicit consignments for the artist."
          },
          "hide_auction_link": {
            "type": "string",
            "description": "If true, do not display auction results link."
          },
          "exclude_from_criteo": {
            "type": "string",
            "description": "Exclude from Criteo artwork report."
          },
          "disable_price_context": {
            "type": "string",
            "description": "Disable price context feature."
          },
          "target_supply_priority": {
            "type": "integer",
            "description": "Corresponds to target supply priority tier (e.g. P1, P2)",
            "format": "int32"
          },
          "target_supply_type": {
            "type": "string",
            "description": "The target supply category"
          },
          "group_indicator": {
            "type": "string",
            "description": "Indicates whether the artist is a solo person or more of a group."
          },
          "medium_known_for": {
            "type": "string",
            "description": "Name of medium this artist is known for."
          },
          "alternate_nationalities": {
            "type": "array",
            "description": "Other nationalities associated with the artist, for matching.",
            "items": {
              "type": "string"
            }
          },
          "cover_artwork_id": {
            "type": "string"
          },
          "critically_acclaimed": {
            "type": "string",
            "description": "Indicates whether the artist has been deemed critically acclaimed."
          },
          "vanguard_year": {
            "type": "string",
            "description": "Indicates year the artist was in Artsy Vanguard."
          },
          "recent_show": {
            "type": "string",
            "description": "Recent Artist's Show."
          },
          "foundations": {
            "type": "string",
            "description": "Indicates when the artist was in Artsy Foundations."
          }
        },
        "description": "Update an existing artist."
      },
      "putApiV1ArtworkArtworkIdInventory": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "The new number of items available.",
            "format": "int32"
          },
          "unlimited": {
            "type": "boolean",
            "description": "Whether the inventory for this item should be treated as unlimited."
          },
          "deduct": {
            "type": "integer",
            "description": "Number of items to deduct from sold inventory",
            "format": "int32"
          },
          "undeduct": {
            "type": "integer",
            "description": "Number of items to be added back to sold inventory",
            "format": "int32"
          }
        },
        "description": "Create or update an artwork's inventory."
      },
      "putApiV1ArtworkArtworkIdImage": {
        "type": "object",
        "properties": {
          "position": {
            "type": "string",
            "description": "Position of the image within the artwork images."
          },
          "downloadable": {
            "type": "string"
          },
          "skip_watermark": {
            "type": "string"
          },
          "reprocess_original": {
            "type": "boolean",
            "description": "Reprocess originally uploaded image."
          }
        },
        "description": "Update an artwork image."
      },
      "postApiV1ArtworkArtworkIdImage": {
        "type": "object",
        "properties": {
          "remote_image_url": {
            "type": "string",
            "description": "Remote URL for the image to upload (string). Takes precedence over gemini_token."
          },
          "gemini_token": {
            "type": "string",
            "description": "Gemini token of image to associate with artwork."
          },
          "skip_watermark": {
            "type": "boolean",
            "description": "Skips applying Digimarc watermarking to image."
          },
          "low_priority": {
            "type": "boolean",
            "description": "Should be true when clients expect to submit a large number of images."
          },
          "position": {
            "type": "string",
            "description": "Position of the image within the artwork images."
          }
        },
        "description": "Add an image to an artwork."
      },
      "putApiV1ArtworkIdGenome": {
        "type": "object",
        "properties": {
          "genes": {
            "type": "object",
            "properties": {},
            "description": "Gene name/value pairs."
          }
        },
        "description": "Update an artwork's genome."
      },
      "postApiV1Artwork": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Artwork title."
          },
          "date": {
            "type": "string"
          },
          "category": {
            "type": "string",
            "description": "Artwork category."
          },
          "condition": {
            "type": "string"
          },
          "medium": {
            "type": "string",
            "description": "Artwork medium."
          },
          "signature": {
            "type": "string",
            "description": "Description of artist signature, when present."
          },
          "provenance": {
            "type": "string",
            "description": "Artwork provenance."
          },
          "series": {
            "type": "string",
            "description": "Artwork series."
          },
          "depth": {
            "type": "string",
            "description": "Depth."
          },
          "diameter": {
            "type": "string",
            "description": "Diameter."
          },
          "duration": {
            "type": "string",
            "description": "Multimedia artwork duration."
          },
          "width": {
            "type": "string",
            "description": "Width."
          },
          "height": {
            "type": "string",
            "description": "Height."
          },
          "metric": {
            "type": "string",
            "description": "Metric used for dimensions."
          },
          "literature": {
            "type": "string",
            "description": "Artwork literature."
          },
          "exhibition_history": {
            "type": "string",
            "description": "Exhibition history."
          },
          "collecting_institution": {
            "type": "string",
            "description": "Collecting institution."
          },
          "additional_information": {
            "type": "string",
            "description": "Additional information."
          },
          "image_rights": {
            "type": "string",
            "description": "Image rights."
          },
          "external_id": {
            "type": "string",
            "description": "External provider identity."
          },
          "external_video_id": {
            "type": "string",
            "description": "External video identity. Currently points to Vimeo upload."
          },
          "import_source": {
            "type": "string",
            "description": "A reference to the system used to import the work."
          },
          "availability": {
            "type": "string",
            "description": "Availability."
          },
          "ecommerce": {
            "type": "string",
            "description": "Buy Now by partner"
          },
          "price_listed": {
            "type": "number",
            "description": "Price listed.",
            "format": "float"
          },
          "price_min": {
            "type": "number",
            "description": "Minimum price.",
            "format": "float"
          },
          "price_max": {
            "type": "number",
            "description": "Maximum price.",
            "format": "float"
          },
          "display_price_range": {
            "type": "string",
            "description": "Display price as range."
          },
          "price_hidden": {
            "type": "string",
            "description": "Price hidden."
          },
          "price_currency": {
            "type": "string",
            "description": "Currency used."
          },
          "price_includes_tax": {
            "type": "string",
            "description": "Price includes tax, such as VAT."
          },
          "feature_eligible": {
            "type": "string",
            "description": "Artwork eligible for show feed."
          },
          "tags": {
            "type": "array",
            "description": "Tags.",
            "items": {
              "type": "string"
            }
          },
          "inventory_id": {
            "type": "string"
          },
          "partner": {
            "type": "string"
          },
          "website": {
            "type": "string",
            "description": "Net art website URL."
          },
          "secondary_market": {
            "type": "string",
            "description": "Whether received directly from the artist or not."
          },
          "can_share_image": {
            "type": "string"
          },
          "offer": {
            "type": "string",
            "description": "Make Offer enabled by partner"
          },
          "manufacturer": {
            "type": "string",
            "description": "Manufacturer of the artwork (generally applied to design objects)."
          },
          "unique": {
            "type": "string",
            "description": "Indicates a unique single artwork (generally applied to design objects)."
          },
          "dimensions_string": {
            "type": "string",
            "description": "Dimensions as plain text."
          },
          "publisher": {
            "type": "string",
            "description": "Publisher of artwork (generally applied to prints)."
          },
          "relevant_auction_results": {
            "type": "string",
            "description": "Text representation of relevant auction results."
          },
          "blurb": {
            "type": "string",
            "description": "Short text blurb about the artwork."
          },
          "cultural_maker": {
            "type": "string",
            "description": "Can be substituted for artist when no artist is available."
          },
          "cultural_maker_ids": {
            "type": "array",
            "description": "List of related cultural makers' IDs",
            "items": {
              "type": "string"
            }
          },
          "confidential_notes": {
            "type": "string",
            "description": "Confidential notes about the artwork."
          },
          "attribution_class": {
            "type": "string",
            "description": "Attribution class, aka artwork classification"
          },
          "framed": {
            "type": "string",
            "description": "Framed?"
          },
          "certificate_of_authenticity": {
            "type": "string",
            "description": "Certificate of Authenticity?"
          },
          "coa_by_authenticating_body": {
            "type": "string",
            "description": "Certificate of Authenticity issued by authenticating body?"
          },
          "coa_by_gallery": {
            "type": "string",
            "description": "Certificate of Authenticity issued by gallery?"
          },
          "condition_description": {
            "type": "string",
            "description": "Condition description."
          },
          "signed_by_artist": {
            "type": "string",
            "description": "Hand-signed by artist?"
          },
          "stamped_by_artist_estate": {
            "type": "string",
            "description": "Stamped by artist estate?"
          },
          "sticker_label": {
            "type": "string",
            "description": "Sticker label for signature/authentication?"
          },
          "signed_in_plate": {
            "type": "string",
            "description": "Signed in plate?"
          },
          "signed_other": {
            "type": "string",
            "description": "Other form of signature/authentication?"
          },
          "not_signed": {
            "type": "string",
            "description": "Not signed?"
          },
          "pickup_available": {
            "type": "string",
            "description": "Available for pickup?"
          },
          "domestic_shipping_fee_cents": {
            "type": "integer",
            "description": "Flat domestic shipping fee.",
            "format": "int32"
          },
          "international_shipping_fee_cents": {
            "type": "integer",
            "description": "Flat international shipping fee.",
            "format": "int32"
          },
          "price_paid_cents": {
            "type": "integer",
            "description": "Price paid by a collector for this artwork in My Collection",
            "format": "int32"
          },
          "price_paid_currency": {
            "type": "string",
            "description": "Currency for price_paid_cents"
          },
          "shipping_weight": {
            "type": "number",
            "description": "Weight of artwork to be shipped.",
            "format": "float"
          },
          "shipping_weight_metric": {
            "type": "string",
            "description": "Weight metric for artwork to be shipped"
          },
          "framed_height": {
            "type": "number",
            "description": "Framed height",
            "format": "float"
          },
          "framed_width": {
            "type": "number",
            "description": "Framed width",
            "format": "float"
          },
          "framed_depth": {
            "type": "number",
            "description": "Framed depth",
            "format": "float"
          },
          "framed_diameter": {
            "type": "number",
            "description": "Framed diameter",
            "format": "float"
          },
          "framed_metric": {
            "type": "string",
            "description": "Metric for framed dimensions."
          },
          "arta_enabled": {
            "type": "string",
            "description": "Opted into Arta shipping service"
          },
          "artsy_shipping_international": {
            "type": "string",
            "description": "Opted into Artsy international shipping service"
          },
          "artsy_shipping_domestic": {
            "type": "string"
          },
          "artwork_location": {
            "type": "string",
            "description": "Location of the artwork for \"My Collection\" artworks"
          },
          "submission_id": {
            "type": "string",
            "description": "Submission ID in Convection"
          },
          "collector_location": {
            "type": "string"
          },
          "shipping_notes": {
            "type": "string",
            "description": "Notes provided by the partner in regards to shipping details"
          },
          "set_video_as_cover": {
            "type": "string",
            "description": "Sets the video as the cover image."
          },
          "partner_promoted": {
            "type": "string",
            "description": "Artwork is promoted by partner."
          },
          "visibility_level": {
            "type": "string",
            "description": "The level of external exposure an artwork receives."
          },
          "display_artist_bio": {
            "type": "string",
            "description": "Whether or not artist bio should be displayed on a private artwork."
          },
          "artists": {
            "type": "array",
            "description": "List of related artists' IDs",
            "items": {
              "type": "string"
            }
          },
          "partner_location_id": {
            "type": "string",
            "description": "Location of an artwork."
          },
          "collection_id": {
            "type": "string",
            "description": "Collection id to add artwork to."
          },
          "inventory": {
            "type": "object",
            "properties": {
              "count": {
                "type": "integer",
                "description": "The new number of items available.",
                "format": "int32"
              },
              "unlimited": {
                "type": "boolean",
                "description": "Whether the inventory for this item should be treated as unlimited."
              }
            },
            "description": "Params to create inventory record"
          }
        },
        "description": "Create an artwork."
      },
      "putApiV1Artwork": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Artwork title."
          },
          "date": {
            "type": "string"
          },
          "category": {
            "type": "string",
            "description": "Artwork category."
          },
          "condition": {
            "type": "string"
          },
          "medium": {
            "type": "string",
            "description": "Artwork medium."
          },
          "signature": {
            "type": "string",
            "description": "Description of artist signature, when present."
          },
          "provenance": {
            "type": "string",
            "description": "Artwork provenance."
          },
          "series": {
            "type": "string",
            "description": "Artwork series."
          },
          "depth": {
            "type": "string",
            "description": "Depth."
          },
          "diameter": {
            "type": "string",
            "description": "Diameter."
          },
          "duration": {
            "type": "string",
            "description": "Multimedia artwork duration."
          },
          "width": {
            "type": "string",
            "description": "Width."
          },
          "height": {
            "type": "string",
            "description": "Height."
          },
          "metric": {
            "type": "string",
            "description": "Metric used for dimensions."
          },
          "literature": {
            "type": "string",
            "description": "Artwork literature."
          },
          "exhibition_history": {
            "type": "string",
            "description": "Exhibition history."
          },
          "collecting_institution": {
            "type": "string",
            "description": "Collecting institution."
          },
          "additional_information": {
            "type": "string",
            "description": "Additional information."
          },
          "image_rights": {
            "type": "string",
            "description": "Image rights."
          },
          "external_id": {
            "type": "string",
            "description": "External provider identity."
          },
          "external_video_id": {
            "type": "string",
            "description": "External video identity. Currently points to Vimeo upload."
          },
          "import_source": {
            "type": "string",
            "description": "A reference to the system used to import the work."
          },
          "availability": {
            "type": "string",
            "description": "Availability."
          },
          "ecommerce": {
            "type": "string",
            "description": "Buy Now by partner"
          },
          "price_listed": {
            "type": "number",
            "description": "Price listed.",
            "format": "float"
          },
          "price_min": {
            "type": "number",
            "description": "Minimum price.",
            "format": "float"
          },
          "price_max": {
            "type": "number",
            "description": "Maximum price.",
            "format": "float"
          },
          "display_price_range": {
            "type": "string",
            "description": "Display price as range."
          },
          "price_hidden": {
            "type": "string",
            "description": "Price hidden."
          },
          "price_currency": {
            "type": "string",
            "description": "Currency used."
          },
          "price_includes_tax": {
            "type": "string",
            "description": "Price includes tax, such as VAT."
          },
          "feature_eligible": {
            "type": "string",
            "description": "Artwork eligible for show feed."
          },
          "tags": {
            "type": "array",
            "description": "Tags.",
            "items": {
              "type": "string"
            }
          },
          "inventory_id": {
            "type": "string"
          },
          "partner": {
            "type": "string"
          },
          "website": {
            "type": "string",
            "description": "Net art website URL."
          },
          "secondary_market": {
            "type": "string",
            "description": "Whether received directly from the artist or not."
          },
          "can_share_image": {
            "type": "string"
          },
          "offer": {
            "type": "string",
            "description": "Make Offer enabled by partner"
          },
          "manufacturer": {
            "type": "string",
            "description": "Manufacturer of the artwork (generally applied to design objects)."
          },
          "unique": {
            "type": "string",
            "description": "Indicates a unique single artwork (generally applied to design objects)."
          },
          "dimensions_string": {
            "type": "string",
            "description": "Dimensions as plain text."
          },
          "publisher": {
            "type": "string",
            "description": "Publisher of artwork (generally applied to prints)."
          },
          "relevant_auction_results": {
            "type": "string",
            "description": "Text representation of relevant auction results."
          },
          "blurb": {
            "type": "string",
            "description": "Short text blurb about the artwork."
          },
          "cultural_maker": {
            "type": "string",
            "description": "Can be substituted for artist when no artist is available."
          },
          "cultural_maker_ids": {
            "type": "array",
            "description": "List of related cultural makers' IDs",
            "items": {
              "type": "string"
            }
          },
          "confidential_notes": {
            "type": "string",
            "description": "Confidential notes about the artwork."
          },
          "attribution_class": {
            "type": "string",
            "description": "Attribution class, aka artwork classification"
          },
          "framed": {
            "type": "string",
            "description": "Framed?"
          },
          "certificate_of_authenticity": {
            "type": "string",
            "description": "Certificate of Authenticity?"
          },
          "coa_by_authenticating_body": {
            "type": "string",
            "description": "Certificate of Authenticity issued by authenticating body?"
          },
          "coa_by_gallery": {
            "type": "string",
            "description": "Certificate of Authenticity issued by gallery?"
          },
          "condition_description": {
            "type": "string",
            "description": "Condition description."
          },
          "signed_by_artist": {
            "type": "string",
            "description": "Hand-signed by artist?"
          },
          "stamped_by_artist_estate": {
            "type": "string",
            "description": "Stamped by artist estate?"
          },
          "sticker_label": {
            "type": "string",
            "description": "Sticker label for signature/authentication?"
          },
          "signed_in_plate": {
            "type": "string",
            "description": "Signed in plate?"
          },
          "signed_other": {
            "type": "string",
            "description": "Other form of signature/authentication?"
          },
          "not_signed": {
            "type": "string",
            "description": "Not signed?"
          },
          "pickup_available": {
            "type": "string",
            "description": "Available for pickup?"
          },
          "domestic_shipping_fee_cents": {
            "type": "integer",
            "description": "Flat domestic shipping fee.",
            "format": "int32"
          },
          "international_shipping_fee_cents": {
            "type": "integer",
            "description": "Flat international shipping fee.",
            "format": "int32"
          },
          "price_paid_cents": {
            "type": "integer",
            "description": "Price paid by a collector for this artwork in My Collection",
            "format": "int32"
          },
          "price_paid_currency": {
            "type": "string",
            "description": "Currency for price_paid_cents"
          },
          "shipping_weight": {
            "type": "number",
            "description": "Weight of artwork to be shipped.",
            "format": "float"
          },
          "shipping_weight_metric": {
            "type": "string",
            "description": "Weight metric for artwork to be shipped"
          },
          "framed_height": {
            "type": "number",
            "description": "Framed height",
            "format": "float"
          },
          "framed_width": {
            "type": "number",
            "description": "Framed width",
            "format": "float"
          },
          "framed_depth": {
            "type": "number",
            "description": "Framed depth",
            "format": "float"
          },
          "framed_diameter": {
            "type": "number",
            "description": "Framed diameter",
            "format": "float"
          },
          "framed_metric": {
            "type": "string",
            "description": "Metric for framed dimensions."
          },
          "arta_enabled": {
            "type": "string",
            "description": "Opted into Arta shipping service"
          },
          "artsy_shipping_international": {
            "type": "string",
            "description": "Opted into Artsy international shipping service"
          },
          "artsy_shipping_domestic": {
            "type": "string"
          },
          "artwork_location": {
            "type": "string",
            "description": "Location of the artwork for \"My Collection\" artworks"
          },
          "submission_id": {
            "type": "string",
            "description": "Submission ID in Convection"
          },
          "collector_location": {
            "type": "string"
          },
          "shipping_notes": {
            "type": "string",
            "description": "Notes provided by the partner in regards to shipping details"
          },
          "set_video_as_cover": {
            "type": "string",
            "description": "Sets the video as the cover image."
          },
          "partner_promoted": {
            "type": "string",
            "description": "Artwork is promoted by partner."
          },
          "visibility_level": {
            "type": "string",
            "description": "The level of external exposure an artwork receives."
          },
          "display_artist_bio": {
            "type": "string",
            "description": "Whether or not artist bio should be displayed on a private artwork."
          },
          "artists": {
            "type": "array",
            "description": "List of related artists' IDs",
            "items": {
              "type": "string"
            }
          },
          "partner_location_id": {
            "type": "string",
            "description": "Location of an artwork."
          },
          "force_publish": {
            "type": "boolean",
            "description": "Publishes an artwork without validating"
          }
        },
        "description": "Update an existing artwork."
      },
      "putApiV1ArtworkArtworkIdEditionSetIdInventory": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "The new number of items available.",
            "format": "int32"
          },
          "unlimited": {
            "type": "boolean",
            "description": "Whether the inventory for this item should be treated as unlimited (default: false)."
          },
          "deduct": {
            "type": "integer",
            "description": "Number of items to deduct from sold inventory",
            "format": "int32"
          },
          "undeduct": {
            "type": "integer",
            "description": "Number of items to be added back to sold inventory",
            "format": "int32"
          }
        },
        "description": "Create or update an edition set's inventory."
      },
      "putApiV1ArtworkArtworkIdEditionSet": {
        "type": "object",
        "properties": {
          "availability": {
            "type": "string",
            "description": "Availability."
          },
          "ecommerce": {
            "type": "string",
            "description": "Buy Now by partner"
          },
          "offer": {
            "type": "string",
            "description": "Make Offer enabled by partner"
          },
          "price_listed": {
            "type": "number",
            "description": "Price listed.",
            "format": "float"
          },
          "price_min": {
            "type": "number",
            "description": "Minimum price.",
            "format": "float"
          },
          "price_max": {
            "type": "number",
            "description": "Maximum price.",
            "format": "float"
          },
          "price_hidden": {
            "type": "string",
            "description": "Price hidden."
          },
          "price_currency": {
            "type": "string",
            "description": "Currency used."
          },
          "display_price_range": {
            "type": "string",
            "description": "Display price as range."
          },
          "price_includes_tax": {
            "type": "string",
            "description": "Price includes tax, such as VAT."
          },
          "height": {
            "type": "string",
            "description": "Height."
          },
          "width": {
            "type": "string",
            "description": "Width."
          },
          "depth": {
            "type": "string",
            "description": "Depth."
          },
          "diameter": {
            "type": "string",
            "description": "Diameter."
          },
          "duration": {
            "type": "string",
            "description": "Multimedia artwork duration."
          },
          "metric": {
            "type": "string",
            "description": "Metric used for dimensions."
          },
          "edition_size": {
            "type": "string",
            "description": "Number of works in this edition."
          },
          "available_editions": {
            "type": "array",
            "description": "Available editions in an array format, eg. ['1', 2, '3-9'].",
            "items": {
              "type": "string"
            }
          },
          "artist_proofs": {
            "type": "integer",
            "description": "Artist proofs.",
            "format": "int32"
          },
          "external_id": {
            "type": "string",
            "description": "External identity."
          },
          "secondary_market": {
            "type": "string",
            "description": "Whether received directly from the artist or not."
          },
          "prototypes": {
            "type": "integer",
            "description": "Prototypes (typically used in design objects).",
            "format": "int32"
          },
          "shipping_weight": {
            "type": "number",
            "description": "Weight of artwork to be shipped.",
            "format": "float"
          },
          "shipping_weight_metric": {
            "type": "string",
            "description": "Weight metric for artwork to be shipped"
          },
          "framed": {
            "type": "string",
            "description": "Framed?"
          },
          "framed_height": {
            "type": "number",
            "description": "Framed height",
            "format": "float"
          },
          "framed_width": {
            "type": "number",
            "description": "Framed width",
            "format": "float"
          },
          "framed_depth": {
            "type": "number",
            "description": "Framed depth",
            "format": "float"
          },
          "framed_diameter": {
            "type": "number",
            "description": "Framed diameter",
            "format": "float"
          },
          "framed_metric": {
            "type": "string",
            "description": "Metric for framed dimensions."
          },
          "partner_id": {
            "type": "string"
          }
        },
        "description": "Update an existing edition set."
      },
      "postApiV1ArtworkArtworkIdEditionSet": {
        "type": "object",
        "properties": {
          "availability": {
            "type": "string",
            "description": "Availability."
          },
          "ecommerce": {
            "type": "string",
            "description": "Buy Now by partner"
          },
          "offer": {
            "type": "string",
            "description": "Make Offer enabled by partner"
          },
          "price_listed": {
            "type": "number",
            "description": "Price listed.",
            "format": "float"
          },
          "price_min": {
            "type": "number",
            "description": "Minimum price.",
            "format": "float"
          },
          "price_max": {
            "type": "number",
            "description": "Maximum price.",
            "format": "float"
          },
          "price_hidden": {
            "type": "string",
            "description": "Price hidden."
          },
          "price_currency": {
            "type": "string",
            "description": "Currency used."
          },
          "display_price_range": {
            "type": "string",
            "description": "Display price as range."
          },
          "price_includes_tax": {
            "type": "string",
            "description": "Price includes tax, such as VAT."
          },
          "height": {
            "type": "string",
            "description": "Height."
          },
          "width": {
            "type": "string",
            "description": "Width."
          },
          "depth": {
            "type": "string",
            "description": "Depth."
          },
          "diameter": {
            "type": "string",
            "description": "Diameter."
          },
          "duration": {
            "type": "string",
            "description": "Multimedia artwork duration."
          },
          "metric": {
            "type": "string",
            "description": "Metric used for dimensions."
          },
          "edition_size": {
            "type": "string",
            "description": "Number of works in this edition."
          },
          "available_editions": {
            "type": "array",
            "description": "Available editions in an array format, eg. ['1', 2, '3-9'].",
            "items": {
              "type": "string"
            }
          },
          "artist_proofs": {
            "type": "integer",
            "description": "Artist proofs.",
            "format": "int32"
          },
          "external_id": {
            "type": "string",
            "description": "External identity."
          },
          "secondary_market": {
            "type": "string",
            "description": "Whether received directly from the artist or not."
          },
          "prototypes": {
            "type": "integer",
            "description": "Prototypes (typically used in design objects).",
            "format": "int32"
          },
          "shipping_weight": {
            "type": "number",
            "description": "Weight of artwork to be shipped.",
            "format": "float"
          },
          "shipping_weight_metric": {
            "type": "string",
            "description": "Weight metric for artwork to be shipped"
          },
          "framed": {
            "type": "string",
            "description": "Framed?"
          },
          "framed_height": {
            "type": "number",
            "description": "Framed height",
            "format": "float"
          },
          "framed_width": {
            "type": "number",
            "description": "Framed width",
            "format": "float"
          },
          "framed_depth": {
            "type": "number",
            "description": "Framed depth",
            "format": "float"
          },
          "framed_diameter": {
            "type": "number",
            "description": "Framed diameter",
            "format": "float"
          },
          "framed_metric": {
            "type": "string",
            "description": "Metric for framed dimensions."
          },
          "partner_id": {
            "type": "string"
          },
          "inventory": {
            "type": "object",
            "properties": {
              "count": {
                "type": "integer",
                "description": "The new number of items available.",
                "format": "int32"
              },
              "unlimited": {
                "type": "boolean",
                "description": "Whether the inventory for this item should be treated as unlimited."
              }
            },
            "description": "Params to create inventory record"
          }
        },
        "description": "Create an artwork edition set."
      },
      "putApiV1BankAccount": {
        "type": "object",
        "properties": {
          "account_holder_name": {
            "type": "string",
            "description": "Account holder name."
          }
        },
        "description": "Update a bank account."
      },
      "postApiV1BankAccount": {
        "required": [
          "bank_account_type",
          "external_id",
          "fingerprint",
          "last4",
          "user_id"
        ],
        "type": "object",
        "properties": {
          "external_id": {
            "type": "string",
            "description": "Payment method ID in Stripe."
          },
          "last4": {
            "type": "string",
            "description": "Last 4."
          },
          "fingerprint": {
            "type": "string",
            "description": "Fingerprint."
          },
          "user_id": {
            "type": "string",
            "description": "User ID."
          },
          "bank_account_type": {
            "type": "string",
            "description": "Bank account type.",
            "enum": [
              "us_bank_account",
              "sepa_debit"
            ]
          },
          "account_holder_type": {
            "type": "string",
            "description": "Account holder type."
          },
          "account_type": {
            "type": "string",
            "description": "Account type."
          },
          "bank_name": {
            "type": "string",
            "description": "Bank name."
          },
          "routing_number": {
            "type": "string",
            "description": "Routing number."
          },
          "account_holder_name": {
            "type": "string",
            "description": "Account holder name."
          },
          "account_holder_email": {
            "type": "string",
            "description": "Account holder email."
          },
          "country": {
            "type": "string",
            "description": "Country."
          },
          "currency": {
            "type": "string",
            "description": "Currency."
          },
          "one_time_use": {
            "type": "boolean",
            "description": "Flag showing if this bank account was created for one time use"
          },
          "status": {
            "type": "string",
            "description": "Status."
          },
          "bank_code": {
            "type": "string",
            "description": "[SEPA only] Bank code."
          },
          "branch_code": {
            "type": "string",
            "description": "[SEPA only] Branch code."
          }
        },
        "description": "Add a bank account."
      },
      "putApiV1BidderPositionIdRetract": {
        "required": [
          "reason"
        ],
        "type": "object",
        "properties": {
          "reason": {
            "type": "string",
            "description": "Reason for retraction."
          }
        },
        "description": "Retract a bidder position."
      },
      "postApiV1BidderPosition": {
        "required": [
          "artwork_id",
          "max_bid_amount_cents",
          "sale_id",
          "user_id"
        ],
        "type": "object",
        "properties": {
          "sale_id": {
            "type": "string",
            "description": "Sale id."
          },
          "artwork_id": {
            "type": "string",
            "description": "Artwork id."
          },
          "max_bid_amount_cents": {
            "type": "string",
            "description": "Maximum amount to bid, in cents."
          },
          "user_id": {
            "type": "string",
            "description": "User placing bid."
          },
          "bid_max": {
            "type": "boolean",
            "description": "Bid maximum amount immediately rather than incrementing as necessary."
          }
        },
        "description": "Place a bid with a maximum amount in cents."
      },
      "putApiV1Bidder": {
        "type": "object",
        "properties": {
          "created_by_admin": {
            "type": "boolean",
            "description": "Whether this bidder is approved by an admin."
          },
          "disqualified": {
            "type": "boolean",
            "description": "Whether this bidder has been disqualified by an admin."
          }
        },
        "description": "Register to bid."
      },
      "postApiV1Bidder": {
        "required": [
          "sale_id"
        ],
        "type": "object",
        "properties": {
          "sale_id": {
            "type": "string",
            "description": "Sale id."
          },
          "user_id": {
            "type": "string",
            "description": "User being registered (default: current user; admins only)."
          }
        },
        "description": "Register to bid."
      },
      "postApiV1CallbacksStripeConnect": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "description": "Receive Connect webhooks from Stripe."
      },
      "postApiV1CallbacksStripe": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "description": "Receive webhooks from Stripe."
      },
      "postApiV1CallbacksJumio": {
        "required": [
          "jumioIdScanReference",
          "merchantIdScanReference"
        ],
        "type": "object",
        "properties": {
          "merchantIdScanReference": {
            "type": "string",
            "description": "Identifier of an IdentityVerification."
          },
          "jumioIdScanReference": {
            "type": "string",
            "description": "Jumio's own identifier for the corresponding scan reference."
          }
        },
        "description": "Receive and process webhooks from Jumio"
      },
      "postApiV1CallbacksGemini": {
        "required": [
          "metadata",
          "token"
        ],
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Token for entry."
          },
          "metadata": {
            "type": "string",
            "description": "Hash of metadata, should include _type and id."
          },
          "image_url": {
            "type": "string",
            "description": "Hash of image version and url."
          },
          "deep_zoom": {
            "type": "string",
            "description": "Hash of deep zoom attributes (for artworks only)."
          },
          "image_geometry": {
            "type": "string",
            "description": "Hash of image geometry attributes."
          },
          "genes": {
            "type": "string",
            "description": "Hash of visual genome (genes and values- artworks only)."
          },
          "file_size": {
            "type": "string",
            "description": "File size of generated asset."
          },
          "blurhash": {
            "type": "string",
            "description": "Compact textual representation of a placeholder for an image."
          }
        },
        "description": "Receive webhook from Gemini Image Processing Service."
      },
      "postApiV1CallbacksBraze": {
        "required": [
          "email_frequency",
          "email_subscribe",
          "external_id"
        ],
        "type": "object",
        "properties": {
          "external_id": {
            "type": "string",
            "description": "User id"
          },
          "email_subscribe": {
            "type": "string",
            "description": "Value of Braze email subscribe property."
          },
          "email_frequency": {
            "type": "string",
            "description": "The frequency being adjusted."
          }
        },
        "description": "Webhook for receiving updates from Braze"
      },
      "putApiV1Collection": {
        "required": [
          "user_id"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "default": {
            "type": "boolean"
          },
          "private": {
            "type": "boolean"
          },
          "saves": {
            "type": "boolean"
          },
          "shareable_with_partners": {
            "type": "boolean"
          },
          "user_id": {
            "type": "string",
            "description": "User id."
          }
        },
        "description": "Update a collection."
      },
      "postApiV1Collection": {
        "required": [
          "user_id"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "default": {
            "type": "boolean"
          },
          "private": {
            "type": "boolean"
          },
          "saves": {
            "type": "boolean"
          },
          "shareable_with_partners": {
            "type": "boolean"
          },
          "user_id": {
            "type": "string",
            "description": "User id."
          }
        },
        "description": "Create a collection."
      },
      "postApiV1CollectionCollectionIdArtwork": {
        "required": [
          "user_id"
        ],
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string",
            "description": "User id."
          }
        },
        "description": "Add an artwork to a collection."
      },
      "putApiV1CollectorProfile": {
        "type": "object",
        "properties": {
          "institutional_affiliations": {
            "type": "string",
            "description": "Institutional Affiliations."
          },
          "confirmed_buyer_at": {
            "type": "string",
            "description": "Artsy confirmed buyer creation"
          },
          "collector_level": {
            "type": "integer",
            "description": "User Collector Level.",
            "format": "int32"
          },
          "affiliated_auction_house_ids": {
            "type": "array",
            "description": "List of affiliated auction house ids, referencing Galaxy.",
            "items": {
              "type": "string"
            }
          },
          "self_reported_purchases": {
            "type": "string",
            "description": "Free-form text of purchases the collector has indicated."
          },
          "affiliated_fair_ids": {
            "type": "array",
            "description": "List of affiliated fair ids, referencing Galaxy.",
            "items": {
              "type": "string"
            }
          },
          "affiliated_gallery_ids": {
            "type": "array",
            "description": "List of affiliated gallery ids, referencing Galaxy.",
            "items": {
              "type": "string"
            }
          },
          "yearly_budget_min": {
            "type": "integer",
            "description": "Yearly budget minimum.",
            "format": "int32"
          },
          "yearly_budget_max": {
            "type": "integer",
            "description": "Yearly budget maximum.",
            "format": "int32"
          },
          "min_works_per_year": {
            "type": "integer",
            "description": "Minimum number of works collected per year.",
            "format": "int32"
          },
          "why_buy_art": {
            "type": "string",
            "description": "Why the collector buys art."
          },
          "been_to_auction": {
            "type": "string",
            "description": "Whether the collector has been to an art auction."
          },
          "works_with_advisor": {
            "type": "string",
            "description": "Whether or not the collector works with an advisor."
          },
          "linked_in": {
            "type": "string",
            "description": "Collector's LinkedIn url."
          },
          "facebook": {
            "type": "string",
            "description": "Collector's Facebook page."
          },
          "instagram": {
            "type": "string",
            "description": "Collector's Instagram handle."
          },
          "twitter": {
            "type": "string",
            "description": "Collector's Twitter handle."
          },
          "company_website": {
            "type": "string",
            "description": "Company website."
          },
          "company_name": {
            "type": "string",
            "description": "Company name."
          },
          "intents": {
            "type": "array",
            "description": "Collector Intent.",
            "items": {
              "type": "string"
            }
          },
          "bio": {
            "type": "string",
            "description": "User bio in their own words."
          },
          "privacy": {
            "type": "string",
            "description": "Whether or not the collector shares detailed profile information with galleries."
          },
          "user": {
            "type": "string",
            "description": "User id."
          },
          "confirmed_buyer": {
            "type": "boolean",
            "description": "Artsy confirmed buyer."
          },
          "professional_buyer": {
            "type": "boolean",
            "description": "Artsy confirmed professional buyer."
          }
        },
        "description": "Update an existing collector profile."
      },
      "putApiV1Device": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name for device."
          },
          "token": {
            "type": "string",
            "description": "Token for device."
          },
          "app_id": {
            "type": "string",
            "description": "App id for device."
          },
          "production": {
            "type": "boolean",
            "description": "App Store version?"
          },
          "platform": {
            "type": "string",
            "description": "Platform for device."
          }
        },
        "description": "Update an existing device."
      },
      "postApiV1Device": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name for device."
          },
          "token": {
            "type": "string",
            "description": "Token for device."
          },
          "app_id": {
            "type": "string",
            "description": "App id for device."
          },
          "production": {
            "type": "boolean",
            "description": "App Store version?"
          },
          "platform": {
            "type": "string",
            "description": "Platform for device.",
            "default": "ios"
          }
        },
        "description": "Create or update a device."
      },
      "putApiV1FairFairIdImage": {
        "type": "object",
        "properties": {
          "remote_image_url": {
            "type": "string",
            "description": "Remote URL for the image to upload."
          },
          "gemini_token": {
            "type": "string",
            "description": "Gemini token."
          },
          "type": {
            "type": "string",
            "description": "Which type of fair image",
            "default": "banner",
            "enum": [
              "mobile",
              "banner"
            ]
          }
        },
        "description": "Modify the image on a fair."
      },
      "postApiV1FairFairIdImage": {
        "type": "object",
        "properties": {
          "remote_image_url": {
            "type": "string",
            "description": "Remote URL for the image to upload."
          },
          "gemini_token": {
            "type": "string",
            "description": "Gemini token."
          },
          "type": {
            "type": "string",
            "description": "Which type of fair image",
            "default": "banner",
            "enum": [
              "mobile",
              "banner"
            ]
          }
        },
        "description": "Add an image to a fair."
      },
      "postApiV1Fair": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "published": {
            "type": "string"
          },
          "start_at": {
            "type": "string"
          },
          "end_at": {
            "type": "string"
          },
          "about": {
            "type": "string"
          },
          "contact": {
            "type": "string"
          },
          "links": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "summary": {
            "type": "string",
            "description": "Short summary (275 character max)"
          },
          "medium_genes": {
            "type": "string"
          },
          "filter_genes": {
            "type": "string"
          },
          "tickets_link": {
            "type": "string",
            "description": "Markdown, containing ticket link information"
          },
          "tier": {
            "type": "integer",
            "format": "int32"
          },
          "layout": {
            "type": "string"
          },
          "display_vip": {
            "type": "string",
            "description": "Tells clients to display the VIP fair context"
          },
          "has_full_feature": {
            "type": "string",
            "description": "Indicates if fair has official partnership with Artsy"
          },
          "gemini_token": {
            "type": "string",
            "description": "Token for image entry on Gemini."
          },
          "organizer": {
            "type": "string"
          },
          "autopublish_artworks_at": {
            "type": "string"
          },
          "tagline": {
            "type": "string"
          },
          "hours": {
            "type": "string"
          },
          "tickets": {
            "type": "string"
          },
          "floorplan_url": {
            "type": "string",
            "description": "URL link to floorplan file"
          },
          "has_large_banner": {
            "type": "string",
            "description": "When true, banner size will be x-large no matter the tier."
          },
          "has_homepage_section": {
            "type": "string",
            "description": "When true, eligible for a homepage rail."
          },
          "has_listing": {
            "type": "string",
            "description": "When true, shows up in listings."
          },
          "active_start_at": {
            "type": "string"
          },
          "kaws_collection_slugs": {
            "type": "array",
            "description": "List of slugs of associated collections from KAWS",
            "items": {
              "type": "string"
            }
          },
          "featured_keywords": {
            "type": "array",
            "description": "Suggested filters for associated artworks.",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Create a new fair."
      },
      "putApiV1Fair": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "published": {
            "type": "string"
          },
          "start_at": {
            "type": "string"
          },
          "end_at": {
            "type": "string"
          },
          "about": {
            "type": "string"
          },
          "contact": {
            "type": "string"
          },
          "links": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "summary": {
            "type": "string",
            "description": "Short summary (275 character max)"
          },
          "medium_genes": {
            "type": "string"
          },
          "filter_genes": {
            "type": "string"
          },
          "tickets_link": {
            "type": "string",
            "description": "Markdown, containing ticket link information"
          },
          "tier": {
            "type": "integer",
            "format": "int32"
          },
          "layout": {
            "type": "string"
          },
          "display_vip": {
            "type": "string",
            "description": "Tells clients to display the VIP fair context"
          },
          "has_full_feature": {
            "type": "string",
            "description": "Indicates if fair has official partnership with Artsy"
          },
          "gemini_token": {
            "type": "string",
            "description": "Token for image entry on Gemini."
          },
          "organizer": {
            "type": "string"
          },
          "autopublish_artworks_at": {
            "type": "string"
          },
          "tagline": {
            "type": "string"
          },
          "hours": {
            "type": "string"
          },
          "tickets": {
            "type": "string"
          },
          "floorplan_url": {
            "type": "string",
            "description": "URL link to floorplan file"
          },
          "has_large_banner": {
            "type": "string",
            "description": "When true, banner size will be x-large no matter the tier."
          },
          "has_homepage_section": {
            "type": "string",
            "description": "When true, eligible for a homepage rail."
          },
          "has_listing": {
            "type": "string",
            "description": "When true, shows up in listings."
          },
          "active_start_at": {
            "type": "string"
          },
          "kaws_collection_slugs": {
            "type": "array",
            "description": "List of slugs of associated collections from KAWS",
            "items": {
              "type": "string"
            }
          },
          "featured_keywords": {
            "type": "array",
            "description": "Suggested filters for associated artworks.",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Update an existing fair."
      },
      "putApiV1FairFairIdFairEvent": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "extended_description": {
            "type": "string"
          },
          "venue": {
            "type": "string"
          },
          "start_at": {
            "type": "string"
          },
          "end_at": {
            "type": "string"
          },
          "fair": {
            "type": "string"
          },
          "fair_event_groups": {
            "type": "string"
          },
          "venue_address": {
            "type": "string"
          },
          "gemini_token": {
            "type": "string",
            "description": "Token for image entry on Gemini."
          },
          "caption": {
            "type": "string"
          }
        },
        "description": "Update an existing fair event."
      },
      "postApiV1FairFairIdFairEvent": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "extended_description": {
            "type": "string"
          },
          "venue": {
            "type": "string"
          },
          "start_at": {
            "type": "string"
          },
          "end_at": {
            "type": "string"
          },
          "fair": {
            "type": "string"
          },
          "fair_event_groups": {
            "type": "string"
          },
          "venue_address": {
            "type": "string"
          },
          "gemini_token": {
            "type": "string",
            "description": "Token for image entry on Gemini."
          },
          "caption": {
            "type": "string"
          }
        },
        "description": "Create a new fair event."
      },
      "postApiV1FairFairIdFairEventGroup": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "fair": {
            "type": "string"
          }
        },
        "description": "Create a new fair event group."
      },
      "putApiV1FairOrganizer": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "about": {
            "type": "string"
          },
          "website": {
            "type": "string"
          },
          "fairs": {
            "type": "array",
            "description": "Fairs to set (id's).",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Update a fair organizer."
      },
      "postApiV1FairOrganizer": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "about": {
            "type": "string"
          },
          "website": {
            "type": "string"
          },
          "fairs": {
            "type": "array",
            "description": "Fairs to set (id's).",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Create a fair organizer."
      },
      "putApiV1FeaturedLink": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "subtitle": {
            "type": "string"
          },
          "display_on_mobile": {
            "type": "string",
            "description": "Display on mobile."
          },
          "display_on_desktop": {
            "type": "string",
            "description": "Display on desktop."
          },
          "display_on_martsy": {
            "type": "string",
            "description": "Display on martsy."
          },
          "gemini_token": {
            "type": "string",
            "description": "Token for image entry on Gemini."
          },
          "description": {
            "type": "string"
          },
          "source_bucket": {
            "type": "string",
            "description": "S3 bucket of an already uploaded image."
          },
          "source_key": {
            "type": "string",
            "description": "S3 key of an already uploaded image."
          }
        },
        "description": "Update an existing link."
      },
      "postApiV1FeaturedLink": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "subtitle": {
            "type": "string"
          },
          "display_on_mobile": {
            "type": "string",
            "description": "Display on mobile."
          },
          "display_on_desktop": {
            "type": "string",
            "description": "Display on desktop."
          },
          "display_on_martsy": {
            "type": "string",
            "description": "Display on martsy."
          },
          "gemini_token": {
            "type": "string",
            "description": "Token for image entry on Gemini."
          },
          "description": {
            "type": "string"
          },
          "source_bucket": {
            "type": "string",
            "description": "S3 bucket of an already uploaded image."
          },
          "source_key": {
            "type": "string",
            "description": "S3 key of an already uploaded image."
          }
        },
        "description": "Create a new link."
      },
      "putApiV1Feature": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "active": {
            "type": "string"
          },
          "gemini_token": {
            "type": "string",
            "description": "Token for image entry on Gemini."
          },
          "subheadline": {
            "type": "string"
          },
          "callout": {
            "type": "string",
            "description": "Text that gets an emphasized UI treatment."
          },
          "layout": {
            "type": "string"
          },
          "source_bucket": {
            "type": "string",
            "description": "S3 bucket of an already uploaded image."
          },
          "source_key": {
            "type": "string",
            "description": "S3 key of an already uploaded image."
          }
        },
        "description": "Update an existing feature."
      },
      "postApiV1Feature": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "active": {
            "type": "string"
          },
          "gemini_token": {
            "type": "string",
            "description": "Token for image entry on Gemini."
          },
          "subheadline": {
            "type": "string"
          },
          "callout": {
            "type": "string",
            "description": "Text that gets an emphasized UI treatment."
          },
          "layout": {
            "type": "string"
          },
          "source_bucket": {
            "type": "string",
            "description": "S3 bucket of an already uploaded image."
          },
          "source_key": {
            "type": "string",
            "description": "S3 key of an already uploaded image."
          }
        },
        "description": "Create a feature."
      },
      "postApiV1Feedback": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "user_name": {
            "type": "string"
          },
          "user_email": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "description": "Create feedback."
      },
      "postApiV1FollowShows": {
        "required": [
          "partner_show_id"
        ],
        "type": "object",
        "properties": {
          "partner_show_id": {
            "type": "string",
            "description": "ID of the show to follow."
          }
        },
        "description": "Add a show to the list of shows a user is following"
      },
      "postApiV1GeneType": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "published": {
            "type": "string"
          },
          "genes": {
            "type": "string"
          },
          "properties": {
            "type": "string"
          }
        },
        "description": "Create a gene type."
      },
      "putApiV1GeneType": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "published": {
            "type": "string"
          },
          "genes": {
            "type": "string"
          },
          "properties": {
            "type": "string"
          }
        },
        "description": "Updated a gene type."
      },
      "postApiV1Gene": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "display_name": {
            "type": "string",
            "description": "User and SEO-friendly alternate display name (optional)"
          },
          "description": {
            "type": "string"
          },
          "published": {
            "type": "string"
          },
          "browseable": {
            "type": "string"
          },
          "gene_type": {
            "type": "string"
          },
          "gene_family_id": {
            "type": "string"
          },
          "additional_search_terms": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "automation_rules": {
            "type": "string"
          },
          "notes": {
            "type": "string"
          },
          "examples": {
            "type": "string"
          },
          "automated": {
            "type": "string"
          },
          "gemini_token": {
            "type": "string",
            "description": "Token for image entry on Gemini."
          }
        },
        "description": "Create a gene."
      },
      "putApiV1Gene": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "display_name": {
            "type": "string",
            "description": "User and SEO-friendly alternate display name (optional)"
          },
          "description": {
            "type": "string"
          },
          "published": {
            "type": "string"
          },
          "browseable": {
            "type": "string"
          },
          "gene_type": {
            "type": "string"
          },
          "gene_family_id": {
            "type": "string"
          },
          "additional_search_terms": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "automation_rules": {
            "type": "string"
          },
          "notes": {
            "type": "string"
          },
          "examples": {
            "type": "string"
          },
          "automated": {
            "type": "string"
          },
          "gemini_token": {
            "type": "string",
            "description": "Token for image entry on Gemini."
          }
        },
        "description": "Updated a gene."
      },
      "putApiV1HeroUnits": {
        "type": "object",
        "properties": {
          "body": {
            "type": "string",
            "description": "Body content for Hero Unit."
          },
          "link_text": {
            "type": "string",
            "description": "Link text for Hero Unit."
          },
          "link_url": {
            "type": "string",
            "description": "Link url for Hero Unit."
          },
          "title": {
            "type": "string",
            "description": "Title content for Hero Unit."
          },
          "start_at": {
            "type": "string",
            "description": "Time to start displaying Hero Unit.",
            "format": "date-time"
          },
          "end_at": {
            "type": "string",
            "description": "Time to end displaying Hero Unit.",
            "format": "date-time"
          },
          "position": {
            "type": "integer",
            "description": "Position for Hero Unit.",
            "format": "int32"
          },
          "credit": {
            "type": "string",
            "description": "Credit content for Hero Unit."
          },
          "label": {
            "type": "string",
            "description": "Label content for Hero Unit."
          },
          "image_attributes": {
            "type": "object",
            "properties": {
              "image_url": {
                "type": "string",
                "description": "Image url for Hero Unit."
              }
            }
          }
        },
        "description": "Update a hero unit."
      },
      "postApiV1HeroUnits": {
        "required": [
          "body",
          "link_text",
          "link_url",
          "title"
        ],
        "type": "object",
        "properties": {
          "body": {
            "type": "string",
            "description": "Body content for Hero Unit."
          },
          "link_text": {
            "type": "string",
            "description": "Link text for Hero Unit."
          },
          "link_url": {
            "type": "string",
            "description": "Link url for Hero Unit."
          },
          "title": {
            "type": "string",
            "description": "Title content for Hero Unit."
          },
          "start_at": {
            "type": "string",
            "description": "Time to start displaying Hero Unit.",
            "format": "date-time"
          },
          "end_at": {
            "type": "string",
            "description": "Time to end displaying Hero Unit.",
            "format": "date-time"
          },
          "position": {
            "type": "integer",
            "description": "Position for Hero Unit.",
            "format": "int32"
          },
          "credit": {
            "type": "string",
            "description": "Credit content for Hero Unit."
          },
          "label": {
            "type": "string",
            "description": "Label content for Hero Unit."
          },
          "image_attributes": {
            "type": "object",
            "properties": {
              "image_url": {
                "type": "string",
                "description": "Image url for Hero Unit."
              }
            }
          }
        },
        "description": "Create a hero unit."
      },
      "postApiV1IdentityVerificationIdOverride": {
        "required": [
          "reason",
          "state"
        ],
        "type": "object",
        "properties": {
          "state": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          }
        },
        "description": "manually set the state on an identity verification"
      },
      "postApiV1IdentityVerification": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string",
            "description": "User id of the subject of the identity verification. When no params provided, the current_user will be the subject"
          },
          "email": {
            "type": "string",
            "description": "Email of the subject of the identity verification. When no params provided, the current_user will be the subject"
          },
          "name": {
            "type": "string",
            "description": "Full name to be used with the verification. When provided, we use this instead of the name associated with the user's account"
          },
          "send_email": {
            "type": "boolean",
            "description": "Determines whether consumers of the identity verification event are asked to send an automated request email",
            "default": true
          },
          "sale_id": {
            "type": "string",
            "description": "The auction from which this identity verification request was initiated"
          },
          "initiator_id": {
            "type": "string",
            "description": "The ID of the user that initiated the IDV request (self or admin)"
          },
          "order_id": {
            "type": "string",
            "description": "The ID of the order that caused this IDV request to be initiated"
          }
        },
        "description": "Create an identity verification"
      },
      "putApiV1InquiryRequest": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "introduction": {
            "type": "string"
          },
          "note": {
            "type": "string"
          },
          "flagged": {
            "type": "string"
          },
          "contact_gallery": {
            "type": "string"
          },
          "user_reported_outcome": {
            "type": "string",
            "description": "Outcome of inquiry requested selected by the user."
          },
          "user_reported_outcome_comment": {
            "type": "string",
            "description": "Comments by user regarding outcome of inquiry request."
          },
          "inquiry_questions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "inquiry_shipping_location": {
            "type": "string"
          },
          "user": {
            "type": "string",
            "description": "User id."
          },
          "outcome_token": {
            "type": "string",
            "description": "Outcome Token used for authentication coming from email"
          }
        },
        "description": "Update an existing inquiry request."
      },
      "postApiV1InquiryRequestIdStatus": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "note": {
            "type": "string"
          }
        },
        "description": "Add a status to an inquiry request."
      },
      "putApiV1Invoice": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string",
            "description": "Optional user to be associated with invoice."
          },
          "name": {
            "type": "string",
            "description": "Optional recipient name."
          },
          "email": {
            "type": "string",
            "description": "Optional recipient email."
          },
          "state": {
            "type": "string",
            "description": "New state."
          },
          "external_note": {
            "type": "string",
            "description": "User-visible note."
          },
          "internal_note": {
            "type": "string",
            "description": "Admin-only note."
          },
          "currency": {
            "type": "string",
            "description": "Currency for the invoice and line items."
          }
        },
        "description": "Update an invoice."
      },
      "postApiV1Invoice": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string",
            "description": "Optional user to be associated with invoice."
          },
          "name": {
            "type": "string",
            "description": "Optional recipient name."
          },
          "email": {
            "type": "string",
            "description": "Optional recipient email."
          },
          "external_note": {
            "type": "string",
            "description": "User-visible note."
          },
          "internal_note": {
            "type": "string",
            "description": "Admin-only note."
          },
          "currency": {
            "type": "string",
            "description": "Currency for the invoice and line items."
          }
        },
        "description": "Create an invoice."
      },
      "postApiV1InvoiceInvoiceIdPayment": {
        "required": [
          "amount_cents",
          "provider",
          "token"
        ],
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "The invoice's secret token."
          },
          "credit_card_id": {
            "type": "string",
            "description": "Already-saved card for user associated with invoice (required if no card token provided)."
          },
          "credit_card_token": {
            "type": "string",
            "description": "Result of card tokenization at provider (required if no card id provided)."
          },
          "amount_cents": {
            "type": "string",
            "description": "Amount of this payment."
          },
          "provider": {
            "type": "string",
            "description": "Payment provider.",
            "enum": [
              "stripe"
            ]
          }
        },
        "description": "Add a payment."
      },
      "putApiV1InvoiceInvoiceIdLineItem": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of charge."
          },
          "amount_cents": {
            "type": "string",
            "description": "Line item amount in USD cents."
          },
          "quantity": {
            "type": "string",
            "description": "Quantity, if applicable (default: 1)."
          },
          "artwork_id": {
            "type": "string",
            "description": "Artwork on which to base description/amount."
          },
          "edition_set_id": {
            "type": "string",
            "description": "Edition set on which to base description/amount."
          },
          "sale_artwork_id": {
            "type": "string",
            "description": "SaleArtwork (auction or traditional) on which to base description/amount."
          },
          "internal_note": {
            "type": "string",
            "description": "Admin-only explanation."
          }
        },
        "description": "Update a line item."
      },
      "postApiV1InvoiceInvoiceIdLineItem": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of charge (required unless artwork provided)."
          },
          "amount_cents": {
            "type": "string",
            "description": "Line item amount in USD cents (required unless artwork provided)."
          },
          "quantity": {
            "type": "string",
            "description": "Quantity, if applicable (default: 1)."
          },
          "artwork_id": {
            "type": "string",
            "description": "Artwork on which to base description/amount."
          },
          "edition_set_id": {
            "type": "string",
            "description": "Edition set on which to base description/amount."
          },
          "sale_artwork_id": {
            "type": "string",
            "description": "SaleArtwork (auction or traditional) on which to base description/amount."
          },
          "internal_note": {
            "type": "string",
            "description": "Admin-only explanation."
          }
        },
        "description": "Add a line item."
      },
      "putApiV1MeAnonymousSession": {
        "type": "object",
        "properties": {
          "session_id": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "description": "Email."
          },
          "name": {
            "type": "string",
            "description": "Name."
          },
          "profession": {
            "type": "string",
            "description": "Profession."
          },
          "phone": {
            "type": "string",
            "description": "Phone number."
          },
          "location": {
            "type": "string"
          },
          "subsequent_user_id": {
            "type": "string",
            "description": "User this session registered/authenticated as (requires authentication)."
          }
        },
        "description": "Updates an anonymous session. Uses cookied session_id if not specified."
      },
      "postApiV1MeAnonymousSession": {
        "type": "object",
        "properties": {
          "session_id": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "description": "Email."
          },
          "name": {
            "type": "string",
            "description": "Name."
          },
          "profession": {
            "type": "string",
            "description": "Profession."
          },
          "phone": {
            "type": "string",
            "description": "Phone number."
          },
          "location": {
            "type": "string"
          },
          "subsequent_user_id": {
            "type": "string",
            "description": "User this session registered/authenticated as (requires authentication)."
          }
        },
        "description": "Creates [or updates] an anonymous session."
      },
      "putApiV1MeAlert": {
        "type": "object",
        "properties": {
          "user_alert_settings": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "push": {
                "type": "boolean"
              },
              "email": {
                "type": "boolean"
              },
              "frequency": {
                "type": "string",
                "enum": [
                  "daily",
                  "instant"
                ]
              },
              "details": {
                "type": "string"
              }
            }
          },
          "attributes": {
            "type": "object",
            "properties": {
              "acquireable": {
                "type": "boolean"
              },
              "additional_gene_ids": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "artist_ids": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "artist_series_ids": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "at_auction": {
                "type": "boolean"
              },
              "attribution_class": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "colors": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "dimension_range": {
                "type": "string"
              },
              "height": {
                "type": "string"
              },
              "inquireable_only": {
                "type": "boolean"
              },
              "keyword": {
                "type": "string"
              },
              "location_cities": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "major_periods": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "materials_terms": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "offerable": {
                "type": "boolean"
              },
              "partner_ids": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "price_range": {
                "type": "string"
              },
              "sizes": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "width": {
                "type": "string"
              }
            }
          }
        },
        "description": "Update an alert."
      },
      "postApiV1MeAlert": {
        "required": [
          "attributes"
        ],
        "type": "object",
        "properties": {
          "user_alert_settings": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "push": {
                "type": "boolean"
              },
              "email": {
                "type": "boolean"
              },
              "frequency": {
                "type": "string",
                "enum": [
                  "daily",
                  "instant"
                ]
              },
              "details": {
                "type": "string"
              }
            }
          },
          "attributes": {
            "required": [
              "artist_ids"
            ],
            "type": "object",
            "properties": {
              "acquireable": {
                "type": "boolean"
              },
              "additional_gene_ids": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "artist_ids": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "artist_series_ids": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "at_auction": {
                "type": "boolean"
              },
              "attribution_class": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "colors": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "dimension_range": {
                "type": "string"
              },
              "height": {
                "type": "string"
              },
              "inquireable_only": {
                "type": "boolean"
              },
              "keyword": {
                "type": "string"
              },
              "location_cities": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "major_periods": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "materials_terms": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "offerable": {
                "type": "boolean"
              },
              "partner_ids": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "price_range": {
                "type": "string"
              },
              "sizes": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "width": {
                "type": "string"
              }
            }
          }
        },
        "description": "Create an alert."
      },
      "putApiV1MeArtworkInquiryRequestIdSend": {
        "type": "object",
        "properties": {
          "session_id": {
            "type": "string",
            "description": "Client's key for anonymous session."
          }
        },
        "description": "Send a delayed inquiry request."
      },
      "putApiV1MeArtworkInquiryRequest": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Optional message."
          },
          "contact_gallery": {
            "type": "string",
            "description": "Bool for whether to contact the gallery on create."
          },
          "session_id": {
            "type": "string",
            "description": "External session id to track logged out actions."
          }
        },
        "description": "Update an existing inquiry request."
      },
      "postApiV1MeArtworkInquiryRequest": {
        "required": [
          "artwork"
        ],
        "type": "object",
        "properties": {
          "artwork": {
            "type": "string",
            "description": "Artwork id."
          },
          "anonymous_session_id": {
            "type": "string",
            "description": "Anonymous session id."
          },
          "name": {
            "type": "string",
            "description": "User name for inquiries without an associated user."
          },
          "email": {
            "type": "string",
            "description": "User email for inquiries without an associated user."
          },
          "message": {
            "type": "string",
            "description": "Optional message."
          },
          "introduction": {
            "type": "string",
            "description": "Optional introduction."
          },
          "contact_gallery": {
            "type": "boolean",
            "description": "Bool for whether to contact the gallery on create."
          },
          "referring_url": {
            "type": "string",
            "description": "Last place user was before landing in Artsy."
          },
          "landing_url": {
            "type": "string",
            "description": "First place user landed in Artsy."
          },
          "inquiry_url": {
            "type": "string",
            "description": "URL used to generate the inquiry (sometimes we encode things in the query params)."
          },
          "session_id": {
            "type": "string",
            "description": "External session id to track logged out actions."
          },
          "notification_delay": {
            "type": "integer",
            "description": "Number of seconds to delay the sending of the inquiry. Default is no delay.",
            "format": "int32"
          },
          "inquiry_questions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "price_and_availability",
                "shipping_quote",
                "condition_and_provenance",
                "similar_work",
                "artist_information",
                "artwork_information"
              ]
            }
          },
          "inquiry_shipping_location": {
            "type": "object",
            "properties": {}
          },
          "order_id": {
            "type": "string"
          }
        },
        "description": "Create an artwork inquiry request."
      },
      "postApiV1MeTriggerCampaign": {
        "required": [
          "campaign_id"
        ],
        "type": "object",
        "properties": {
          "campaign_id": {
            "type": "string",
            "description": "Campaign id."
          }
        },
        "description": "Trigger a campaign send."
      },
      "postApiV1MeRecentlyViewedArtworks": {
        "required": [
          "artwork_id"
        ],
        "type": "object",
        "properties": {
          "artwork_id": {
            "type": "string",
            "description": "Artwork id"
          }
        },
        "description": "Record a recently viewed artwork."
      },
      "putApiV1MeUserFlags": {
        "required": [
          "key"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Label of user flag to set/unset."
          },
          "value": {
            "type": "string",
            "description": "New user flag value. If empty, unsets flag."
          }
        },
        "description": "Set (or unset) user flag."
      },
      "putApiV1MePassword": {
        "required": [
          "current_password",
          "new_password"
        ],
        "type": "object",
        "properties": {
          "current_password": {
            "type": "string",
            "description": "Current password."
          },
          "new_password": {
            "type": "string",
            "description": "New password."
          },
          "password_confirmation": {
            "type": "string",
            "description": "New password confirmation."
          }
        },
        "description": "Change current user password."
      },
      "putApiV1Me": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name."
          },
          "display_follow_tooltip": {
            "type": "string"
          },
          "display_filter_tooltip": {
            "type": "string"
          },
          "display_inquiry_tooltip": {
            "type": "string"
          },
          "display_favorites_dialog": {
            "type": "string"
          },
          "phone": {
            "type": "string",
            "description": "Phone number."
          },
          "phone_number": {
            "type": "string",
            "description": "Normalized phone number."
          },
          "phone_country_code": {
            "type": "string",
            "description": "ISO 3166 country code for phone number."
          },
          "gender": {
            "type": "string",
            "description": "Gender."
          },
          "price_range_min": {
            "type": "integer",
            "format": "int32"
          },
          "price_range_max": {
            "type": "integer",
            "format": "int32"
          },
          "artworks_per_year": {
            "type": "string",
            "description": "Number of artworks purchased per year."
          },
          "is_collector": {
            "type": "string",
            "description": "Is a collector?"
          },
          "industry": {
            "type": "string",
            "description": "Works in the art industry?"
          },
          "profession": {
            "type": "string",
            "description": "Profession."
          },
          "notes": {
            "type": "string",
            "description": "Additional personal notes."
          },
          "share_follows": {
            "type": "string",
            "description": "Shares FollowArtists, FollowGenes, and FollowProfiles with partners."
          },
          "receive_purchase_notification": {
            "type": "string",
            "description": "Receive purchase notifications."
          },
          "receive_outbid_notification": {
            "type": "string",
            "description": "Receive outbid auctions notifications."
          },
          "receive_lot_opening_soon_notification": {
            "type": "string",
            "description": "Receive lot opening auctions notifications."
          },
          "receive_sale_opening_closing_notification": {
            "type": "string",
            "description": "Receive auction starting/ending notifications."
          },
          "receive_new_works_notification": {
            "type": "string",
            "description": "Receive new works notifications."
          },
          "receive_new_sales_notification": {
            "type": "string",
            "description": "Receive new sales notifications."
          },
          "receive_promotion_notification": {
            "type": "string",
            "description": "Receive promotional notifications."
          },
          "receive_order_notification": {
            "type": "string",
            "description": "Receive order notifications."
          },
          "receive_viewing_room_notification": {
            "type": "string",
            "description": "Receive viewing room notifications."
          },
          "receive_partner_show_notification": {
            "type": "string",
            "description": "Receive partner show notifications."
          },
          "receive_partner_offer_notification": {
            "type": "string",
            "description": "Receive partner offer notifications."
          },
          "email": {
            "type": "string",
            "description": "Email."
          },
          "email_frequency": {
            "type": "string",
            "description": "Frequency of marketing emails."
          },
          "location": {
            "type": "string"
          },
          "collector_since": {
            "type": "string"
          },
          "publish_to_facebook": {
            "type": "string",
            "description": "Automatically publish saved artworks and followed artists to Facebook."
          },
          "is_representative": {
            "type": "string"
          },
          "is_available_representative": {
            "type": "string",
            "description": "Is the admin available to be contacted about inquiries."
          },
          "data_transfer_opt_out": {
            "type": "string"
          },
          "currency_preference": {
            "type": "string",
            "description": "Preferred currency."
          },
          "length_unit_preference": {
            "type": "string",
            "description": "Preferred length unit preference."
          },
          "password": {
            "type": "string",
            "description": "Required to change email address."
          },
          "collector_level": {
            "type": "integer",
            "description": "Collector Level of user.",
            "format": "int32"
          },
          "bio": {
            "type": "string",
            "description": "User bio."
          },
          "accepted_terms_of_service": {
            "type": "boolean",
            "description": "If true, user has accepted terms of use and privacy policy"
          },
          "agreed_to_receive_emails": {
            "type": "boolean",
            "description": "If true, user has agreed to receive emails from Artsy"
          },
          "completed_onboarding": {
            "type": "boolean",
            "description": "If true, set timestamp of when user completed onboarding"
          },
          "prompted_for_update": {
            "type": "boolean",
            "description": "When true, will set last_update_prompt_at."
          }
        },
        "description": "Update user info."
      },
      "postApiV1MeToken": {
        "required": [
          "client_application_id"
        ],
        "type": "object",
        "properties": {
          "client_application_id": {
            "type": "string",
            "description": "ID of client application to get a JWT for."
          }
        },
        "description": "Get a token for a client app."
      },
      "postApiV1MeAuthentications": {
        "required": [
          "apple_uid",
          "oauth_token"
        ],
        "type": "object",
        "properties": {
          "oauth_token": {
            "type": "string",
            "description": "An OAuth token."
          },
          "apple_uid": {
            "type": "string",
            "description": "An apple unique user id, used for apple authentication."
          },
          "id_token": {
            "type": "string",
            "description": "JWT used for apple authentication."
          },
          "name": {
            "type": "string",
            "description": "User name, only used for apple authentication."
          },
          "email": {
            "type": "string",
            "description": "User email, only used for apple authentication."
          }
        },
        "description": "Link a 3rd party account."
      },
      "postApiV1MeBidderPosition": {
        "required": [
          "artwork_id",
          "max_bid_amount_cents",
          "sale_id"
        ],
        "type": "object",
        "properties": {
          "sale_id": {
            "type": "string",
            "description": "Sale id."
          },
          "artwork_id": {
            "type": "string",
            "description": "Artwork id."
          },
          "max_bid_amount_cents": {
            "type": "string",
            "description": "Maximum amount to bid, in cents."
          },
          "bid_max": {
            "type": "string",
            "description": "Bid maximum amount immediately rather than incrementing as necessary."
          }
        },
        "description": "Place a bid with a maximum amount in cents."
      },
      "putApiV1MeCollections": {
        "required": [
          "attributes"
        ],
        "type": "object",
        "properties": {
          "attributes": {
            "type": "array",
            "items": {
              "required": [
                "id",
                "shareable_with_partners"
              ],
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "shareable_with_partners": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "description": "Batch update Collections."
      },
      "putApiV1MeCollectorProfileIcon": {
        "type": "object",
        "properties": {
          "gemini_token": {
            "type": "string",
            "description": "Gemini token."
          },
          "remote_image_url": {
            "type": "string",
            "description": "icon image."
          },
          "source_bucket": {
            "type": "string",
            "description": "source bucket."
          },
          "source_key": {
            "type": "string",
            "description": "source key."
          }
        },
        "description": "Change user icon."
      },
      "putApiV1MeCollectorProfile": {
        "type": "object",
        "properties": {
          "institutional_affiliations": {
            "type": "string",
            "description": "Institutional Affiliations."
          },
          "confirmed_buyer_at": {
            "type": "string",
            "description": "Artsy confirmed buyer creation"
          },
          "collector_level": {
            "type": "integer",
            "description": "User Collector Level.",
            "format": "int32"
          },
          "affiliated_auction_house_ids": {
            "type": "array",
            "description": "List of affiliated auction house ids, referencing Galaxy.",
            "items": {
              "type": "string"
            }
          },
          "self_reported_purchases": {
            "type": "string",
            "description": "Free-form text of purchases the collector has indicated."
          },
          "affiliated_fair_ids": {
            "type": "array",
            "description": "List of affiliated fair ids, referencing Galaxy.",
            "items": {
              "type": "string"
            }
          },
          "affiliated_gallery_ids": {
            "type": "array",
            "description": "List of affiliated gallery ids, referencing Galaxy.",
            "items": {
              "type": "string"
            }
          },
          "yearly_budget_min": {
            "type": "integer",
            "description": "Yearly budget minimum.",
            "format": "int32"
          },
          "yearly_budget_max": {
            "type": "integer",
            "description": "Yearly budget maximum.",
            "format": "int32"
          },
          "min_works_per_year": {
            "type": "integer",
            "description": "Minimum number of works collected per year.",
            "format": "int32"
          },
          "why_buy_art": {
            "type": "string",
            "description": "Why the collector buys art."
          },
          "been_to_auction": {
            "type": "string",
            "description": "Whether the collector has been to an art auction."
          },
          "works_with_advisor": {
            "type": "string",
            "description": "Whether or not the collector works with an advisor."
          },
          "linked_in": {
            "type": "string",
            "description": "Collector's LinkedIn url."
          },
          "facebook": {
            "type": "string",
            "description": "Collector's Facebook page."
          },
          "instagram": {
            "type": "string",
            "description": "Collector's Instagram handle."
          },
          "twitter": {
            "type": "string",
            "description": "Collector's Twitter handle."
          },
          "company_website": {
            "type": "string",
            "description": "Company website."
          },
          "company_name": {
            "type": "string",
            "description": "Company name."
          },
          "intents": {
            "type": "array",
            "description": "What is the collector's intent.",
            "items": {
              "type": "string"
            }
          },
          "bio": {
            "type": "string",
            "description": "User bio in their own words."
          },
          "privacy": {
            "type": "string",
            "description": "Whether or not the collector shares detailed profile information with galleries."
          },
          "professional_buyer": {
            "type": "boolean",
            "description": "When true, will set professional_buyer_applied_at."
          },
          "loyalty_applicant": {
            "type": "boolean",
            "description": "When true, will set loyalty_applicant_at."
          },
          "session_id": {
            "type": "string",
            "description": "Session id associated with the anonymous session."
          },
          "prompted_for_update": {
            "type": "boolean",
            "description": "When true, will set last_update_prompt_at."
          }
        },
        "description": "Update an existing collector profile for the current user or an anonymous session."
      },
      "postApiV1MeCollectorProfile": {
        "type": "object",
        "properties": {
          "institutional_affiliations": {
            "type": "string",
            "description": "Institutional Affiliations."
          },
          "confirmed_buyer_at": {
            "type": "string",
            "description": "Artsy confirmed buyer creation"
          },
          "collector_level": {
            "type": "integer",
            "description": "User Collector Level.",
            "format": "int32"
          },
          "affiliated_auction_house_ids": {
            "type": "array",
            "description": "List of affiliated auction house ids, referencing Galaxy.",
            "items": {
              "type": "string"
            }
          },
          "self_reported_purchases": {
            "type": "string",
            "description": "Free-form text of purchases the collector has indicated."
          },
          "affiliated_fair_ids": {
            "type": "array",
            "description": "List of affiliated fair ids, referencing Galaxy.",
            "items": {
              "type": "string"
            }
          },
          "affiliated_gallery_ids": {
            "type": "array",
            "description": "List of affiliated gallery ids, referencing Galaxy.",
            "items": {
              "type": "string"
            }
          },
          "yearly_budget_min": {
            "type": "integer",
            "description": "Yearly budget minimum.",
            "format": "int32"
          },
          "yearly_budget_max": {
            "type": "integer",
            "description": "Yearly budget maximum.",
            "format": "int32"
          },
          "min_works_per_year": {
            "type": "integer",
            "description": "Minimum number of works collected per year.",
            "format": "int32"
          },
          "why_buy_art": {
            "type": "string",
            "description": "Why the collector buys art."
          },
          "been_to_auction": {
            "type": "string",
            "description": "Whether the collector has been to an art auction."
          },
          "works_with_advisor": {
            "type": "string",
            "description": "Whether or not the collector works with an advisor."
          },
          "linked_in": {
            "type": "string",
            "description": "Collector's LinkedIn url."
          },
          "facebook": {
            "type": "string",
            "description": "Collector's Facebook page."
          },
          "instagram": {
            "type": "string",
            "description": "Collector's Instagram handle."
          },
          "twitter": {
            "type": "string",
            "description": "Collector's Twitter handle."
          },
          "company_website": {
            "type": "string",
            "description": "Company website."
          },
          "company_name": {
            "type": "string",
            "description": "Company name."
          },
          "intents": {
            "type": "array",
            "description": "What is the collector's intent.",
            "items": {
              "type": "string"
            }
          },
          "bio": {
            "type": "string",
            "description": "User bio in their own words."
          },
          "privacy": {
            "type": "string",
            "description": "Whether or not the collector shares detailed profile information with galleries."
          },
          "professional_buyer": {
            "type": "boolean",
            "description": "When true, will set professional_buyer_applied_at."
          },
          "loyalty_applicant": {
            "type": "boolean",
            "description": "When true, will set loyalty_applicant_at."
          },
          "session_id": {
            "type": "string",
            "description": "Session id associated with the anonymous session."
          }
        },
        "description": "Create a new collector profile for the current user or an anonymous session."
      },
      "putApiV1MeCollectorProfileCollectorReference": {
        "type": "object",
        "properties": {
          "anonymous_session_id": {
            "type": "string",
            "description": "Anonymous session id"
          },
          "session_id": {
            "type": "string",
            "description": "Session id associated with the anonymous session."
          },
          "email": {
            "type": "string",
            "description": "Email."
          },
          "contact_name": {
            "type": "string",
            "description": "Contact name."
          },
          "organization": {
            "type": "string",
            "description": "Name of the organization."
          },
          "address": {
            "type": "string",
            "description": "Address of the organization."
          },
          "phone": {
            "type": "string",
            "description": "Phone number."
          },
          "reference_type": {
            "type": "string",
            "description": "Art advisor or reference gallery."
          }
        },
        "description": "Update a collector reference."
      },
      "postApiV1MeCollectorProfileCollectorReference": {
        "type": "object",
        "properties": {
          "anonymous_session_id": {
            "type": "string",
            "description": "Anonymous session id"
          },
          "session_id": {
            "type": "string",
            "description": "Session id associated with the anonymous session."
          },
          "email": {
            "type": "string",
            "description": "Email."
          },
          "contact_name": {
            "type": "string",
            "description": "Contact name."
          },
          "organization": {
            "type": "string",
            "description": "Name of the organization."
          },
          "address": {
            "type": "string",
            "description": "Address of the organization."
          },
          "phone": {
            "type": "string",
            "description": "Phone number."
          },
          "reference_type": {
            "type": "string",
            "description": "Art advisor or reference gallery."
          }
        },
        "description": "Create a collector reference."
      },
      "postApiV1MeCreditCards": {
        "required": [
          "provider",
          "token"
        ],
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Tokenized card value (from 3rd party payment provider)."
          },
          "provider": {
            "type": "string",
            "description": "Payment provider that tokenized card.",
            "default": "stripe",
            "enum": [
              "stripe"
            ]
          },
          "session_id": {
            "type": "string",
            "description": "External session id to track logged out actions."
          },
          "created_by_trusted_client": {
            "type": "boolean",
            "description": "True if swiped via kiosk, must be sent with a matching application."
          },
          "one_time_use": {
            "type": "boolean",
            "description": "Flag showing if this card was created for one time use"
          }
        },
        "description": "Add a credit card."
      },
      "putApiV1MeFollowArtist": {
        "type": "object",
        "properties": {
          "notes": {
            "type": "string",
            "description": "User notes."
          }
        },
        "description": "Update a followed artist reference."
      },
      "postApiV1MeFollowArtist": {
        "required": [
          "artist_id"
        ],
        "type": "object",
        "properties": {
          "artist_id": {
            "type": "string",
            "description": "Artist id."
          },
          "notes": {
            "type": "string",
            "description": "User notes."
          }
        },
        "description": "Follow an artist."
      },
      "putApiV1MeFollowGene": {
        "type": "object",
        "properties": {
          "notes": {
            "type": "string",
            "description": "User notes."
          }
        },
        "description": "Update a followed gene reference."
      },
      "postApiV1MeFollowGene": {
        "required": [
          "gene_id"
        ],
        "type": "object",
        "properties": {
          "gene_id": {
            "type": "string",
            "description": "Gene id."
          },
          "notes": {
            "type": "string",
            "description": "User notes."
          }
        },
        "description": "Follow a gene."
      },
      "postApiV1MeFollowProfiles": {
        "required": [
          "profile_id"
        ],
        "type": "object",
        "properties": {
          "profile_id": {
            "type": "array",
            "description": "Profile ids.",
            "items": {
              "type": "string"
            }
          },
          "auto": {
            "type": "string",
            "description": "Whether these follows were machine-assisted."
          }
        },
        "description": "Follow 1 or more profiles."
      },
      "postApiV1MeFollowProfile": {
        "required": [
          "profile_id"
        ],
        "type": "object",
        "properties": {
          "profile_id": {
            "type": "string",
            "description": "Profile id."
          },
          "auto": {
            "type": "boolean",
            "description": "Whether this follow was machine-assisted."
          }
        },
        "description": "Follow a profile."
      },
      "postApiV1MeInquiryIntroduction": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Optional name."
          },
          "profession": {
            "type": "string",
            "description": "Optional profession."
          },
          "location": {
            "type": "object",
            "properties": {},
            "description": "Optional location object."
          },
          "collector_level": {
            "type": "integer",
            "description": "Optional collector level.",
            "format": "int32"
          },
          "collection": {
            "type": "array",
            "description": "Optional set of artist names.",
            "items": {
              "type": "string"
            }
          },
          "attending": {
            "type": "string",
            "description": "Optional name of fair."
          }
        },
        "description": "Generate gallery introduction based on params."
      },
      "putApiV1MeInquiryRequestIdSend": {
        "type": "object",
        "properties": {
          "session_id": {
            "type": "string",
            "description": "External session id to track logged out actions."
          }
        },
        "description": "Send a delayed inquiry request."
      },
      "putApiV1MeInquiryRequest": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Optional message."
          },
          "contact_gallery": {
            "type": "string",
            "description": "Whether to contact the gallery on create."
          },
          "session_id": {
            "type": "string",
            "description": "External session id to track logged out actions."
          }
        },
        "description": "Update an existing inquiry request."
      },
      "postApiV1MeInquiryRequest": {
        "required": [
          "inquireable_id",
          "inquireable_type"
        ],
        "type": "object",
        "properties": {
          "anonymous_session_id": {
            "type": "string",
            "description": "Anonymous session id."
          },
          "name": {
            "type": "string",
            "description": "User name for inquiries without an associated user."
          },
          "email": {
            "type": "string",
            "description": "User email for inquiries without an associated user."
          },
          "inquireable_id": {
            "type": "string",
            "description": "Inquireable id."
          },
          "inquireable_type": {
            "type": "string",
            "description": "Inquireable type."
          },
          "message": {
            "type": "string",
            "description": "Optional message."
          },
          "contact_gallery": {
            "type": "boolean",
            "description": "Whether to contact the gallery on create."
          },
          "referring_url": {
            "type": "string",
            "description": "Last place user was before landing in Artsy."
          },
          "landing_url": {
            "type": "string",
            "description": "First place user landed in Artsy."
          },
          "inquiry_url": {
            "type": "string",
            "description": "URL used to generate the inquiry (sometimes we encode things in the query params)."
          },
          "session_id": {
            "type": "string",
            "description": "External session id to track logged out actions."
          },
          "notification_delay": {
            "type": "integer",
            "description": "Number of seconds to delay the sending of the inquiry. Default is no delay.",
            "format": "int32"
          }
        },
        "description": "Create an inquiry request."
      },
      "putApiV1MeNotificationsMarkAsSeen": {
        "required": [
          "seen_at"
        ],
        "type": "object",
        "properties": {
          "seen_at": {
            "type": "string",
            "description": "Mark notifications as seen until this moment",
            "format": "date-time"
          }
        },
        "description": "Mark notifications feed as seen"
      },
      "putApiV1MeNotifications": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "description": "Notification IDs. If nothing is passed - all user's notifications will be updated",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "type": "string",
            "description": "e.g. read status",
            "enum": [
              "read",
              "viewed",
              "unread"
            ]
          }
        },
        "description": "Mark a user's notifications read"
      },
      "postApiV1MeRequestPriceEstimate": {
        "required": [
          "artwork_id"
        ],
        "type": "object",
        "properties": {
          "artwork_id": {
            "type": "string",
            "description": "Artwork Id."
          },
          "requester_name": {
            "type": "string",
            "description": "Requester's name."
          },
          "requester_email": {
            "type": "string",
            "description": "Requester's email."
          },
          "requester_phone_number": {
            "type": "string",
            "description": "Requester's Phone Number."
          }
        },
        "description": "Request Price Estimate from the Artsy Specialist (does not fail if request has already been made)"
      },
      "putApiV1MeSecondFactorsIdEnable": {
        "required": [
          "code",
          "password"
        ],
        "type": "object",
        "properties": {
          "password": {
            "type": "string"
          },
          "code": {
            "type": "string",
            "description": "OTP code."
          }
        },
        "description": "Enable a disabled second factor"
      },
      "putApiV1MeSecondFactors": {
        "required": [
          "kind"
        ],
        "type": "object",
        "properties": {
          "kind": {
            "type": "string",
            "description": "Second factor kind.",
            "enum": [
              "app",
              "sms"
            ]
          },
          "attributes": {
            "type": "object",
            "properties": {
              "phone_number": {
                "type": "string",
                "description": "Only for SMS second factors."
              },
              "country_code": {
                "type": "string",
                "description": "Only for SMS second factors."
              },
              "name": {
                "type": "string",
                "description": "Only for app second factors"
              }
            }
          }
        },
        "description": "Update a disabled app or SMS second factor"
      },
      "postApiV1MeSecondFactors": {
        "required": [
          "kind",
          "password"
        ],
        "type": "object",
        "properties": {
          "kind": {
            "type": "string",
            "description": "Second factor kind.",
            "enum": [
              "app",
              "backup",
              "sms"
            ]
          },
          "attributes": {
            "type": "object",
            "properties": {
              "phone_number": {
                "type": "string",
                "description": "Only for SMS second factors."
              },
              "country_code": {
                "type": "string",
                "description": "Only for SMS second factors."
              },
              "name": {
                "type": "string",
                "description": "Only for app second factors"
              }
            }
          },
          "password": {
            "type": "string"
          }
        },
        "description": "Create a new app/sms second factor, or re-generate backups."
      },
      "postApiV1MeUserFairAction": {
        "required": [
          "action",
          "fair_id"
        ],
        "type": "object",
        "properties": {
          "fair_id": {
            "type": "string",
            "description": "Fair id"
          },
          "action": {
            "type": "string",
            "description": "Action (one of [\"Fair Partner Marketing\", \"Invitee\", \"Attendee\", \"General Admission\", \"Limited Access VIP\", \"All Access VIP\"])"
          },
          "anonymous_session_id": {
            "type": "string",
            "description": "Anonymous session id"
          },
          "session_id": {
            "type": "string",
            "description": "Session id associated with the anonymous session."
          }
        },
        "description": "Create a user fair action for the current user or an anonymous session."
      },
      "putApiV1MeUserInterest": {
        "type": "object",
        "properties": {
          "body": {
            "type": "string"
          },
          "category": {
            "type": "string",
            "description": "UserInterest category"
          },
          "private": {
            "type": "boolean",
            "description": "Privacy setting to hide from partners."
          },
          "anonymous_session_id": {
            "type": "string",
            "description": "Anonymous session id"
          },
          "session_id": {
            "type": "string",
            "description": "Session id associated with the anonymous session."
          }
        },
        "description": "Update a bookmarked interest reference."
      },
      "postApiV1MeUserInterest": {
        "required": [
          "category",
          "interest_id",
          "interest_type"
        ],
        "type": "object",
        "properties": {
          "interest_id": {
            "type": "string",
            "description": "interest id."
          },
          "interest_type": {
            "type": "string",
            "enum": [
              "Artist",
              "Gene"
            ]
          },
          "category": {
            "type": "string",
            "description": "UserInterest category"
          },
          "body": {
            "type": "string",
            "description": "Optional body for note"
          },
          "private": {
            "type": "boolean",
            "description": "Privacy setting to hide from partners."
          },
          "anonymous_session_id": {
            "type": "string",
            "description": "Anonymous session id"
          },
          "session_id": {
            "type": "string",
            "description": "Session id associated with the anonymous session."
          }
        },
        "description": "Bookmark an interest."
      },
      "postApiV1MerchantAccount": {
        "required": [
          "external_id",
          "partner_id"
        ],
        "type": "object",
        "properties": {
          "partner_id": {
            "type": "string",
            "description": "Partner Id."
          },
          "external_id": {
            "type": "string",
            "description": "External id of the merchant account."
          }
        },
        "description": "Create or reactivate a merchant account for a partner."
      },
      "postApiV1NotificationPreferences": {
        "type": "object",
        "properties": {
          "authentication_token": {
            "type": "string",
            "description": "Auth token."
          }
        },
        "description": "Update notification preferences."
      },
      "putApiV1Page": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Page name."
          },
          "content": {
            "type": "string",
            "description": "Page content."
          },
          "published": {
            "type": "boolean",
            "description": "Page published."
          },
          "description": {
            "type": "string",
            "description": "Page description."
          },
          "href": {
            "type": "string",
            "description": "Page href."
          },
          "visible_to_public": {
            "type": "boolean",
            "description": "Page visible to public."
          },
          "featured_names": {
            "type": "array",
            "description": "Page featured names.",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Update an existing page."
      },
      "postApiV1Page": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Page name."
          },
          "content": {
            "type": "string",
            "description": "Page content."
          },
          "published": {
            "type": "boolean",
            "description": "Page published."
          },
          "description": {
            "type": "string",
            "description": "Page description."
          },
          "href": {
            "type": "string",
            "description": "Page href."
          },
          "visible_to_public": {
            "type": "boolean",
            "description": "Page visible to public."
          },
          "featured_names": {
            "type": "array",
            "description": "Page featured names.",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Create a page."
      },
      "postApiV1PartnerIdShow": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "press_release": {
            "type": "string"
          },
          "press_release_url": {
            "type": "string",
            "description": "Link to the press release for this show"
          },
          "partner_location": {
            "type": "string"
          },
          "fair": {
            "type": "string"
          },
          "start_at": {
            "type": "string"
          },
          "end_at": {
            "type": "string"
          },
          "all_day": {
            "type": "string"
          },
          "fair_location": {
            "type": "string"
          },
          "featured": {
            "type": "string"
          },
          "batch_publish": {
            "type": "string"
          },
          "display_on_partner_profile": {
            "type": "string"
          },
          "artist_ids": {
            "type": "array",
            "description": "List of artist ID's without associated artworks.",
            "items": {
              "type": "string"
            }
          },
          "eligible_artwork_artist_ids": {
            "type": "array",
            "description": "List of artist ID's with associated eligible (published) artworks (may not be not 100% accurate).",
            "items": {
              "type": "string"
            }
          },
          "galaxy_partner_id": {
            "type": "string",
            "description": "Galaxy Id (if this show belongs to a galaxy partner)."
          },
          "partner_city": {
            "type": "string",
            "description": "City the show is in, can be used as a fallback if no location (or for ref. shows)."
          },
          "group": {
            "type": "string",
            "description": "Whether the show is a group show or not, can be explicitly set."
          },
          "sortable_name": {
            "type": "string",
            "description": "Downcased version of the show name to allow for correct alphabetical sort"
          },
          "discovery_blocked_reason": {
            "type": "string",
            "description": "The reason this show was blocked from discovery."
          },
          "duplicate_of_id": {
            "type": "string"
          },
          "viewing_room_ids": {
            "type": "array",
            "description": "If set, the ids of linked `ViewingRoom`s.",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Create a new partner show."
      },
      "putApiV1PartnerPartnerIdShow": {
        "required": [
          "duplicate_of_id"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "press_release": {
            "type": "string"
          },
          "press_release_url": {
            "type": "string",
            "description": "Link to the press release for this show"
          },
          "partner_location": {
            "type": "string"
          },
          "fair": {
            "type": "string"
          },
          "start_at": {
            "type": "string"
          },
          "end_at": {
            "type": "string"
          },
          "all_day": {
            "type": "string"
          },
          "fair_location": {
            "type": "string"
          },
          "featured": {
            "type": "string"
          },
          "batch_publish": {
            "type": "string"
          },
          "display_on_partner_profile": {
            "type": "string"
          },
          "artist_ids": {
            "type": "array",
            "description": "List of artist ID's without associated artworks.",
            "items": {
              "type": "string"
            }
          },
          "eligible_artwork_artist_ids": {
            "type": "array",
            "description": "List of artist ID's with associated eligible (published) artworks (may not be not 100% accurate).",
            "items": {
              "type": "string"
            }
          },
          "galaxy_partner_id": {
            "type": "string",
            "description": "Galaxy Id (if this show belongs to a galaxy partner)."
          },
          "partner_city": {
            "type": "string",
            "description": "City the show is in, can be used as a fallback if no location (or for ref. shows)."
          },
          "group": {
            "type": "string",
            "description": "Whether the show is a group show or not, can be explicitly set."
          },
          "sortable_name": {
            "type": "string",
            "description": "Downcased version of the show name to allow for correct alphabetical sort"
          },
          "discovery_blocked_reason": {
            "type": "string",
            "description": "Reason for blocking this show from local discovery. Passing nil will enable it for discovery again."
          },
          "duplicate_of_id": {
            "type": "string",
            "description": "When discovery_blocked_reason is \"duplicate\" we require the ID of the show it duplicates."
          },
          "viewing_room_ids": {
            "type": "array",
            "description": "If set, the ids of linked `ViewingRoom`s.",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Update an existing partner show."
      },
      "putApiV1PartnerPartnerIdShowShowIdDocument": {
        "type": "object",
        "properties": {
          "remote_document_url": {
            "type": "string",
            "description": "Publicly-accessible URL of document."
          },
          "title": {
            "type": "string",
            "description": "Partner updatable label for the document."
          },
          "partner_show": {
            "type": "string"
          }
        },
        "description": "Update a partner show document."
      },
      "postApiV1PartnerPartnerIdShowShowIdDocument": {
        "required": [
          "remote_document_url"
        ],
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Partner updatable label for the document."
          },
          "partner_show": {
            "type": "string"
          },
          "remote_document_url": {
            "type": "string",
            "description": "Remote document url."
          }
        },
        "description": "Create a partner show document."
      },
      "putApiV1PartnerPartnerIdShowPartnerShowIdArtwork": {
        "type": "object",
        "properties": {
          "position": {
            "type": "string",
            "description": "Artwork position."
          }
        },
        "description": "Update an artwork within a partner show."
      },
      "postApiV1PartnerPartnerIdShowPartnerShowIdArtwork": {
        "type": "object",
        "properties": {
          "position": {
            "type": "string",
            "description": "Artwork position."
          }
        },
        "description": "Add an artwork to a partner show."
      },
      "postApiV1PartnerIdLocation": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "address_2": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "postal_code": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "coordinates": {
            "type": "string",
            "description": "Geo-location, in [lng, lat] order"
          },
          "day_schedule_text": {
            "type": "string",
            "description": "Markdown text specifying operating hours"
          },
          "phone": {
            "type": "string"
          },
          "position": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "fax": {
            "type": "string"
          },
          "publicly_viewable": {
            "type": "string"
          },
          "address_type": {
            "type": "string"
          },
          "partner_id": {
            "type": "string"
          }
        },
        "description": "Create a new partner location."
      },
      "putApiV1PartnerPartnerIdLocation": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "address_2": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "postal_code": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "coordinates": {
            "type": "string",
            "description": "Geo-location, in [lng, lat] order"
          },
          "day_schedule_text": {
            "type": "string",
            "description": "Markdown text specifying operating hours"
          },
          "phone": {
            "type": "string"
          },
          "position": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "fax": {
            "type": "string"
          },
          "publicly_viewable": {
            "type": "string"
          },
          "address_type": {
            "type": "string"
          },
          "skip_geocoding": {
            "type": "boolean",
            "description": "Set true for frozen coordinates."
          }
        },
        "description": "Update an existing partner location."
      },
      "postApiV1Partner": {
        "type": "object",
        "properties": {
          "given_name": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "short_name": {
            "type": "string"
          },
          "website": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "artsy_collects_sales_tax": {
            "type": "string",
            "description": "Whether to charge sales tax on ecommerce orders."
          },
          "region": {
            "type": "string"
          },
          "sortable_name": {
            "type": "string"
          },
          "directly_contactable": {
            "type": "string"
          },
          "alternate_names": {
            "type": "array",
            "description": "Alternate names or synonyms for this partner.",
            "items": {
              "type": "string"
            }
          },
          "pre_qualify": {
            "type": "string"
          },
          "display_works_section": {
            "type": "string"
          },
          "distinguish_represented_artists": {
            "type": "string",
            "description": "Distinguish artists the partner represents on their profile page"
          },
          "profile_banner_display": {
            "type": "string",
            "description": "Banner display on the profile overview page."
          },
          "profile_artists_layout": {
            "type": "string",
            "description": "Artists layout on the profile overview page."
          },
          "display_artists_section": {
            "type": "string",
            "description": "Controls artists tab presence on gpp. Artists tab is hidden for Institutional partners and present for the rest of partners."
          },
          "contract_type": {
            "type": "string",
            "description": "Type of contract relationship with Artsy."
          },
          "type": {
            "type": "string"
          },
          "has_full_profile": {
            "type": "string"
          },
          "commission_rate": {
            "type": "number",
            "description": "Commission rate paid by partners above and beyond transaction fees. Default is 0.1 if empty.",
            "format": "float"
          },
          "admin_id": {
            "type": "string"
          },
          "outreach_admin_id": {
            "type": "string"
          },
          "referral_contact_id": {
            "type": "string"
          },
          "relative_size": {
            "type": "integer",
            "format": "int32"
          },
          "partner_categories": {
            "type": "string"
          },
          "criteo_eligible": {
            "type": "string",
            "description": "Include in Criteo artwork report."
          },
          "commerce_enabled": {
            "type": "string",
            "description": "Partner could opt their works to buy now / make offer and accept payments using their merchant account."
          },
          "wire_transfer_enabled": {
            "type": "string",
            "description": "Indicates the partner is eligible for manual wire transfers"
          },
          "implicit_offer_enabled": {
            "type": "string",
            "description": "Partner can have artworks implictly enrolled as 'Make Offer' on the artwork page"
          },
          "inquiry_order_enabled": {
            "type": "string",
            "description": "Partner could list artworks for purchasing from inquiry conversations."
          },
          "has_limited_folio_access": {
            "type": "string",
            "description": "Gives admins the ability to toggle whether a partner has Folio access."
          },
          "vat_number": {
            "type": "string",
            "description": "The VAT identification number belonging to this partner."
          },
          "vat_status": {
            "type": "string",
            "description": "Whether the partner is registered, registered_and_exempt, exempt, or ineligible for a VAT identification number."
          },
          "vat_exempt_approved": {
            "type": "string",
            "description": "Whether the partner's VAT exempt status is approved by Artsy."
          },
          "verified_seller": {
            "type": "string",
            "description": "Indicates the partner is a trusted seller on Artsy."
          },
          "managed_by_erp": {
            "type": "string",
            "description": "Whether the partner is managed by ERP for subscriptions."
          },
          "requires_merchant_account": {
            "type": "string",
            "description": "Partner is required to configure a merchant account"
          },
          "enforce_on_platform_transactions": {
            "type": "string",
            "description": "Triggers partner on platform transaction notifications"
          },
          "enable_ach_payment_method": {
            "type": "string",
            "description": "Whether the partner should have access to ACH payment method on subscriptions."
          },
          "featured_keywords": {
            "type": "array",
            "description": "Suggested filters for associated artworks.",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Create a new partner."
      },
      "postApiV1PartnerPartnerIdContact": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "first": {
            "type": "string"
          },
          "last": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "position": {
            "type": "string"
          },
          "can_contact": {
            "type": "string"
          },
          "partner_location_id": {
            "type": "string"
          }
        },
        "description": "Create a new partner contact."
      },
      "putApiV1PartnerPartnerIdContactIdContactType": {
        "required": [
          "contact_type"
        ],
        "type": "object",
        "properties": {
          "contact_type": {
            "type": "string",
            "description": "Contact type."
          }
        },
        "description": "Update the contact type for a partner contact."
      },
      "putApiV1PartnerPartnerIdContact": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "first": {
            "type": "string"
          },
          "last": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "position": {
            "type": "string"
          },
          "can_contact": {
            "type": "string"
          },
          "partner_location_id": {
            "type": "string"
          },
          "contact_type": {
            "type": "string",
            "description": "Contact type."
          }
        },
        "description": "Update an existing partner contact."
      },
      "postApiV1PartnerPartnerIdCommissionExemptionsCredit": {
        "required": [
          "amount_cents"
        ],
        "type": "object",
        "properties": {
          "amount_cents": {
            "type": "integer",
            "description": "Amount to credit in USD cents.",
            "format": "int32"
          },
          "notes": {
            "type": "string",
            "description": "Notes to associate with created commission exemption."
          },
          "subscription_id": {
            "type": "string",
            "description": "The subscription id associated with this credit."
          },
          "commission_exemption_start_at": {
            "type": "string",
            "description": "Partner commission_exemption_start_at date for all exemptions.",
            "format": "date"
          },
          "commission_exemption_end_at": {
            "type": "string",
            "description": "Partner commission_exemption_end_at date for all exemptions.",
            "format": "date"
          }
        },
        "description": "Add a commission exemption credit in USD."
      },
      "putApiV1PartnerIdArtworkArtworkIdGenome": {
        "type": "object",
        "properties": {
          "genes": {
            "type": "object",
            "properties": {},
            "description": "Gene name/value pairs."
          }
        },
        "description": "Update an artwork's genome."
      },
      "putApiV1PartnerIdArtworks": {
        "type": "object",
        "properties": {
          "artsy_shipping_domestic": {
            "type": "boolean",
            "description": "Opt in or out of Artsy domestic shipping"
          },
          "artsy_shipping_international": {
            "type": "boolean",
            "description": "Opt in or out of Artsy International shipping"
          },
          "location": {
            "type": "string",
            "description": "Set location of artwork to partner location"
          }
        },
        "description": "Bulk edit all partner artworks."
      },
      "postApiV1PartnerIdArtworksDuplicate": {
        "required": [
          "original_id"
        ],
        "type": "object",
        "properties": {
          "original_id": {
            "type": "string",
            "description": "Artwork id that should be used as original."
          },
          "title": {
            "type": "string",
            "description": "Title of the new artwork"
          }
        },
        "description": "Create an artwork by duplicating attributes from original artwork."
      },
      "putApiV1PartnerIdArtist": {
        "type": "object",
        "properties": {
          "featured": {
            "type": "boolean"
          },
          "remote_image_url": {
            "type": "string",
            "description": "Location of image for the PartnerArtist."
          }
        },
        "description": "Update an existing partner artist."
      },
      "putApiV1PartnerPartnerIdArtistArtistIdDocument": {
        "type": "object",
        "properties": {
          "remote_document_url": {
            "type": "string",
            "description": "Publicly-accessible URL of document."
          },
          "title": {
            "type": "string",
            "description": "Partner updatable label for the document."
          }
        },
        "description": "Update a partner artist document."
      },
      "postApiV1PartnerPartnerIdArtistArtistIdDocument": {
        "type": "object",
        "properties": {
          "remote_document_url": {
            "type": "string",
            "description": "Publicly-accessible URL of document."
          },
          "title": {
            "type": "string",
            "description": "Partner updatable label for the document."
          }
        },
        "description": "Create a partner artist document."
      },
      "postApiV1PartnerIdAlbum": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "partner": {
            "type": "string"
          }
        },
        "description": "Create a new partner album."
      },
      "putApiV1PartnerPartnerIdAlbum": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "description": "Update an existing partner album."
      },
      "putApiV1PartnerPartnerIdAlbumPartnerAlbumIdArtwork": {
        "type": "object",
        "properties": {
          "position": {
            "type": "string",
            "description": "Artwork position."
          }
        },
        "description": "Update an artwork within a partner album."
      },
      "postApiV1PartnerPartnerIdAlbumPartnerAlbumIdArtwork": {
        "type": "object",
        "properties": {
          "position": {
            "type": "string",
            "description": "Artwork position."
          }
        },
        "description": "Add an artwork to a partner album."
      },
      "postApiV1PartnerPartnerIdCreditCard": {
        "required": [
          "credit_card_token"
        ],
        "type": "object",
        "properties": {
          "credit_card_token": {
            "type": "string",
            "description": "Card tokenization."
          },
          "provider": {
            "type": "string",
            "description": "Third party payment provider that tokenized card.",
            "default": "stripe",
            "enum": [
              "stripe"
            ]
          }
        },
        "description": "Creates a new partner credit card with a given token attached to the partner's customer account."
      },
      "putApiV1PartnerPartnerIdOptInArtworksIntoCommerce": {
        "type": "object",
        "properties": {
          "pickup_available": {
            "type": "boolean",
            "description": "Update pickup_available for artworks"
          },
          "exact_price": {
            "type": "boolean",
            "description": "Turn artworks price visibility into Exact Price"
          },
          "framed": {
            "type": "boolean",
            "description": "Update framed value for artworks"
          },
          "certificate_of_authenticity": {
            "type": "boolean",
            "description": "Update certificate of authenticity for artworks"
          },
          "coa_by_gallery": {
            "type": "boolean",
            "description": "Update coa_by_gallery for artworks"
          },
          "coa_by_authenticating_body": {
            "type": "boolean",
            "description": "Update coa_by_authenticating_body for artworks"
          },
          "artsy_shipping_domestic": {
            "type": "boolean",
            "description": "Opt artwork into Artsy Shipping Domestic"
          },
          "location_id": {
            "type": "string",
            "description": "Update artworks to partner business location"
          },
          "signed_by_artist": {
            "type": "boolean",
            "description": "Update signed_by_artist for artworks"
          },
          "stamped_by_artist_estate": {
            "type": "boolean",
            "description": "Update stamped_by_artist_estate for artworks"
          },
          "sticker_label": {
            "type": "boolean",
            "description": "Update sticker_label for artworks"
          },
          "signed_in_plate": {
            "type": "boolean",
            "description": "Update signed_in_platefor artworks"
          },
          "signed_other": {
            "type": "boolean",
            "description": "Update signed_other for artworks"
          },
          "not_signed": {
            "type": "boolean",
            "description": "Update not_signed for artworks"
          }
        },
        "description": "Opt artworks into Commerce and Make Offer listing options"
      },
      "postApiV1PartnerPartnerIdCommerceOptInEligibleArtworksReport": {
        "type": "object",
        "properties": {
          "pickup_available": {
            "type": "boolean",
            "description": "Update pickup_available for artworks"
          },
          "exact_price": {
            "type": "boolean",
            "description": "Turn artworks price visibility into Exact Price"
          },
          "framed": {
            "type": "boolean",
            "description": "Update framed value for artworks"
          },
          "certificate_of_authenticity": {
            "type": "boolean",
            "description": "Update certificate of authenticity for artworks"
          },
          "coa_by_gallery": {
            "type": "boolean",
            "description": "Update coa_by_gallery for artworks"
          },
          "coa_by_authenticating_body": {
            "type": "boolean",
            "description": "Update coa_by_authenticating_body for artworks"
          },
          "eligible": {
            "type": "boolean",
            "description": "Determine whether the report must be generated for eligible or non-eligible artworks",
            "default": true
          },
          "artsy_shipping_domestic": {
            "type": "boolean",
            "description": "Opt artwork into Artsy Shipping Domestic"
          },
          "location_id": {
            "type": "string",
            "description": "Update artworks to partner business location"
          },
          "signed_by_artist": {
            "type": "boolean",
            "description": "Update signed_by_artist for artworks"
          },
          "stamped_by_artist_estate": {
            "type": "boolean",
            "description": "Update stamped_by_artist_estate for artworks"
          },
          "sticker_label": {
            "type": "boolean",
            "description": "Update sticker_label for artworks"
          },
          "signed_in_plate": {
            "type": "boolean",
            "description": "Update signed_in_platefor artworks"
          },
          "signed_other": {
            "type": "boolean",
            "description": "Update signed_other for artworks"
          },
          "not_signed": {
            "type": "boolean",
            "description": "Update not_signed for artworks"
          }
        },
        "description": "Send an email to the current user containing artwork data"
      },
      "postApiV1PartnerPartnerIdBankAccount": {
        "required": [
          "bank_account_type",
          "external_id",
          "fingerprint",
          "last4"
        ],
        "type": "object",
        "properties": {
          "external_id": {
            "type": "string",
            "description": "Payment method ID in Stripe."
          },
          "last4": {
            "type": "string",
            "description": "Last 4."
          },
          "fingerprint": {
            "type": "string",
            "description": "Fingerprint."
          },
          "bank_account_type": {
            "type": "string",
            "description": "Bank account type.",
            "enum": [
              "us_bank_account",
              "sepa_debit"
            ]
          },
          "account_holder_type": {
            "type": "string",
            "description": "Account holder type."
          },
          "account_type": {
            "type": "string",
            "description": "Account type."
          },
          "bank_name": {
            "type": "string",
            "description": "Bank name."
          },
          "routing_number": {
            "type": "string",
            "description": "Routing number."
          },
          "account_holder_name": {
            "type": "string",
            "description": "Account holder name."
          },
          "account_holder_email": {
            "type": "string",
            "description": "Account holder email."
          },
          "country": {
            "type": "string",
            "description": "Country."
          },
          "currency": {
            "type": "string",
            "description": "Currency."
          },
          "one_time_use": {
            "type": "boolean",
            "description": "Flag showing if this bank account was created for one time use"
          },
          "status": {
            "type": "string",
            "description": "Status."
          },
          "bank_code": {
            "type": "string",
            "description": "[SEPA only] Bank code."
          },
          "branch_code": {
            "type": "string",
            "description": "[SEPA only] Branch code."
          }
        },
        "description": "Add a bank account to a partner."
      },
      "putApiV1PartnerIdPartnerFlags": {
        "required": [
          "key"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Label of partner flag to set/unset."
          },
          "value": {
            "type": "string",
            "description": "New partner flag value. If empty, unsets flag."
          }
        },
        "description": "Sets (or unsets) a partner flag."
      },
      "putApiV1Partner": {
        "type": "object",
        "properties": {
          "given_name": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "short_name": {
            "type": "string"
          },
          "website": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "artsy_collects_sales_tax": {
            "type": "string",
            "description": "Whether to charge sales tax on ecommerce orders."
          },
          "region": {
            "type": "string"
          },
          "sortable_name": {
            "type": "string"
          },
          "directly_contactable": {
            "type": "string"
          },
          "alternate_names": {
            "type": "array",
            "description": "Alternate names or synonyms for this partner.",
            "items": {
              "type": "string"
            }
          },
          "pre_qualify": {
            "type": "string"
          },
          "display_works_section": {
            "type": "string"
          },
          "distinguish_represented_artists": {
            "type": "string",
            "description": "Distinguish artists the partner represents on their profile page"
          },
          "profile_banner_display": {
            "type": "string",
            "description": "Banner display on the profile overview page."
          },
          "profile_artists_layout": {
            "type": "string",
            "description": "Artists layout on the profile overview page."
          },
          "display_artists_section": {
            "type": "string",
            "description": "Controls artists tab presence on gpp. Artists tab is hidden for Institutional partners and present for the rest of partners."
          },
          "contract_type": {
            "type": "string",
            "description": "Contract type."
          },
          "type": {
            "type": "string",
            "description": "Type."
          },
          "has_full_profile": {
            "type": "boolean",
            "description": "Profile completeness."
          },
          "commission_rate": {
            "type": "number",
            "description": "Commission paid by non-subscriber/fair partner",
            "format": "float"
          },
          "admin_id": {
            "type": "string",
            "description": "Admin assigned for this partner."
          },
          "outreach_admin_id": {
            "type": "string",
            "description": "Admin that signed up this partner."
          },
          "referral_contact_id": {
            "type": "string",
            "description": "Admin that reffered this partner and gets the comission."
          },
          "relative_size": {
            "type": "integer",
            "description": "Size of the partner",
            "format": "int32",
            "enum": [
              1,
              2,
              3,
              4,
              5
            ]
          },
          "partner_categories": {
            "type": "array",
            "description": "Array of partner slugs to assign to this partner",
            "items": {
              "type": "string"
            }
          },
          "criteo_eligible": {
            "type": "string",
            "description": "Include in Criteo artwork report."
          },
          "commerce_enabled": {
            "type": "string",
            "description": "Partner could opt their works to buy now / make offer and accept payments using their merchant account."
          },
          "wire_transfer_enabled": {
            "type": "string",
            "description": "Indicates the partner is eligible for manual wire transfers"
          },
          "implicit_offer_enabled": {
            "type": "string",
            "description": "Partner can have artworks implictly enrolled as 'Make Offer' on the artwork page"
          },
          "inquiry_order_enabled": {
            "type": "string",
            "description": "Partner could list artworks for purchasing from inquiry conversations."
          },
          "has_limited_folio_access": {
            "type": "boolean",
            "description": "Whether this partner has limited Folio access."
          },
          "vat_number": {
            "type": "string",
            "description": "The VAT identification number belonging to this partner."
          },
          "vat_status": {
            "type": "string",
            "description": "Whether the partner is registered, registered_and_exempt, exempt, or ineligible for a VAT identification number."
          },
          "vat_exempt_approved": {
            "type": "string",
            "description": "Whether the partner's VAT exempt status is approved by Artsy."
          },
          "verified_seller": {
            "type": "string",
            "description": "Indicates the partner is a trusted seller on Artsy."
          },
          "managed_by_erp": {
            "type": "string",
            "description": "Whether the partner is managed by ERP for subscriptions."
          },
          "requires_merchant_account": {
            "type": "string",
            "description": "Partner is required to configure a merchant account"
          },
          "enforce_on_platform_transactions": {
            "type": "string",
            "description": "Triggers partner on platform transaction notifications"
          },
          "enable_ach_payment_method": {
            "type": "string",
            "description": "Whether the partner should have access to ACH payment method on subscriptions."
          },
          "featured_keywords": {
            "type": "array",
            "description": "Suggested filters for associated artworks.",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Update an existing partner."
      },
      "postApiV1PartnerPartnerIdShowShowIdEvent": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "start_at": {
            "type": "string"
          },
          "end_at": {
            "type": "string"
          },
          "time_zone": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "partner_show": {
            "type": "string"
          },
          "event_type": {
            "type": "string"
          }
        },
        "description": "Create a partner show event."
      },
      "putApiV1PartnerCategory": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "category_type": {
            "type": "string"
          },
          "internal": {
            "type": "string",
            "description": "Whether or not the partner category is only for internal purposes."
          }
        },
        "description": "Update an existing partner category."
      },
      "postApiV1PartnerCategory": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "category_type": {
            "type": "string"
          },
          "internal": {
            "type": "string",
            "description": "Whether or not the partner category is only for internal purposes."
          }
        },
        "description": "Create a new partner category."
      },
      "postApiV1PartnerCommunicationIdPartnerContact": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "description": "Add a partner contact to a partner communication."
      },
      "putApiV1PartnerCommunication": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "description": "Update an existing partner communication."
      },
      "postApiV1PartnerCommunication": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "description": "Create a partner communication."
      },
      "postApiV1PartnerOffer": {
        "required": [
          "artwork_id",
          "discount_percentage"
        ],
        "type": "object",
        "properties": {
          "artwork_id": {
            "type": "string",
            "description": "Artwork ID."
          },
          "discount_percentage": {
            "type": "integer",
            "description": "Discount percentage.",
            "format": "int32"
          },
          "note": {
            "type": "string",
            "description": "Note."
          }
        },
        "description": "Create a partner offer."
      },
      "postApiV1PartnerSubscriptionCharge": {
        "type": "object",
        "properties": {
          "partner_id": {
            "type": "string",
            "description": "Partner id."
          },
          "bill_date": {
            "type": "string",
            "description": "once per month"
          },
          "payment_method": {
            "type": "string"
          },
          "state": {
            "type": "string"
          }
        },
        "description": "Create a partner subscription charge."
      },
      "postApiV1PartnerSubscriptionChargeIdLineItem": {
        "required": [
          "category"
        ],
        "type": "object",
        "properties": {
          "category": {
            "type": "string",
            "description": "Category that this line item belongs to."
          },
          "notes": {
            "type": "string",
            "description": "Notes explaining the line item."
          },
          "price_cents": {
            "type": "integer",
            "description": "Amount to add.",
            "format": "int32"
          }
        },
        "description": "Add a line item to a charge."
      },
      "putApiV1PartnerSubscriptionChargeIdReceivePayment": {
        "required": [
          "approved_at",
          "payment_method"
        ],
        "type": "object",
        "properties": {
          "payment_method": {
            "type": "string",
            "description": "Method used to pay for the charge."
          },
          "approved_at": {
            "type": "string",
            "description": "Date the charge was approved."
          }
        },
        "description": "Mark an existing charge as completed."
      },
      "putApiV1PartnerSubscriptionCharge": {
        "type": "object",
        "properties": {
          "bill_date": {
            "type": "string",
            "description": "once per month"
          },
          "payment_method": {
            "type": "string"
          },
          "state": {
            "type": "string"
          }
        },
        "description": "Update an existing partner subscription charge."
      },
      "putApiV1PartnerSubscriptionPlan": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "price_in_cents": {
            "type": "integer",
            "format": "int32"
          },
          "default_trial_days": {
            "type": "integer",
            "format": "int32"
          }
        },
        "description": "Update an existing partner subscription plan."
      },
      "postApiV1PartnerSubscriptionPlan": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "price_in_cents": {
            "type": "integer",
            "format": "int32"
          },
          "default_trial_days": {
            "type": "integer",
            "format": "int32"
          }
        },
        "description": "Create a partner subscription plan."
      },
      "postApiV1PartnerSubscriptions": {
        "required": [
          "duration",
          "partner_id",
          "partner_subscription_plan_id"
        ],
        "type": "object",
        "properties": {
          "partner_id": {
            "type": "string",
            "description": "Partner id."
          },
          "partner_subscription_plan_id": {
            "type": "string",
            "description": "Partner Subscription Plan id."
          },
          "duration": {
            "type": "integer",
            "description": "Duration of subscription in months for regular and in days for trial subscriptions.",
            "format": "int32"
          },
          "price_in_cents": {
            "type": "integer",
            "description": "Overwrite to Price per month, inherited from plan",
            "format": "int32"
          },
          "payment_frequency": {
            "type": "integer",
            "description": "Frequency of payments during this subscription (example: Frequency 12 for 12 month duration means monthly).",
            "format": "int32"
          },
          "discount_in_cents": {
            "type": "integer",
            "description": "Discount in cents applied to each each payment.",
            "format": "int32"
          },
          "trial": {
            "type": "boolean",
            "description": "Boolean flag defining if this subscription is trial or not"
          },
          "trial_duration_days": {
            "type": "integer",
            "description": "Number of days we want to offer trial for, only used when type is Trial and to override default trial days",
            "format": "int32"
          }
        },
        "description": "Add a partner to a partner subscription plan."
      },
      "putApiV1PartnerSubscriptionIdTerminate": {
        "type": "object",
        "properties": {
          "explanation": {
            "type": "string",
            "description": "Explanation for why the subscription is ending."
          },
          "termination_date": {
            "type": "string",
            "description": "Date to terminate the subscription."
          },
          "churned": {
            "type": "boolean",
            "description": "Optionally mark already terminated subscription as churned."
          }
        },
        "description": "Terminates a partner subscription."
      },
      "putApiV1PartnerSubscriptionIdActivate": {
        "required": [
          "payment_method"
        ],
        "type": "object",
        "properties": {
          "payment_method": {
            "type": "string",
            "description": "Payment method for generated charges."
          },
          "start_at": {
            "type": "string",
            "description": "The subscription contract start date.",
            "format": "date"
          },
          "grace_days": {
            "type": "integer",
            "description": "Number of days of grace period offered to this subscription which overrides plan.default_grace_days.",
            "format": "int32"
          },
          "has_credit_card_fee": {
            "type": "boolean",
            "description": "Decide if the charges should include a credit card fee"
          }
        },
        "description": "Activates a partner subscription."
      },
      "putApiV1PartnerSubscription": {
        "type": "object",
        "properties": {
          "start_at": {
            "type": "string",
            "description": "The subscription contract start date.",
            "format": "date"
          },
          "end_at": {
            "type": "string",
            "description": "The subscription contract end date.",
            "format": "date"
          },
          "payment_method": {
            "type": "string",
            "description": "Payment method for generated charges."
          },
          "payment_frequency": {
            "type": "integer",
            "description": "Frequency of payments during this subscription (example: Frequency 12 for 12 month duration means monthly).",
            "format": "int32"
          },
          "discount_in_cents": {
            "type": "integer",
            "description": "Discount in cents applied to each each payment.",
            "format": "int32"
          },
          "duration": {
            "type": "integer",
            "description": "Duration of this subsription",
            "format": "int32"
          },
          "grace_end_at": {
            "type": "string",
            "description": "The subscription contract grace period end date, can only be set when subscription is in grace period.",
            "format": "date"
          },
          "generate_charges": {
            "type": "boolean",
            "description": "Whether or not charges should be generated after updating the subscription."
          }
        },
        "description": "Updates a partner subscription."
      },
      "putApiV1PartnerArtist": {
        "type": "object",
        "properties": {
          "biography": {
            "type": "string"
          },
          "display_on_partner_profile": {
            "type": "boolean"
          },
          "featured": {
            "type": "boolean"
          },
          "gemini_token": {
            "type": "string"
          },
          "hide_in_presentation_mode": {
            "type": "boolean"
          },
          "remote_image_url": {
            "type": "string",
            "description": "Location of image for the PartnerArtist."
          },
          "represented_by": {
            "type": "boolean"
          },
          "use_default_biography": {
            "type": "boolean"
          }
        },
        "description": "Update a partner artist."
      },
      "putApiV1PartnerShowPartnerShowIdImage": {
        "type": "object",
        "properties": {
          "image": {
            "type": "string"
          },
          "position": {
            "type": "integer",
            "format": "int32"
          },
          "default": {
            "type": "string"
          }
        },
        "description": "Update a partner show's image."
      },
      "postApiV1PartnerShowPartnerShowIdImage": {
        "type": "object",
        "properties": {
          "remote_image_url": {
            "type": "string",
            "description": "Remote URL for the image to upload."
          },
          "artwork_id": {
            "type": "string",
            "description": "Associated artwork ID."
          },
          "artist_id": {
            "type": "string",
            "description": "Associated artist ID."
          },
          "default": {
            "type": "boolean",
            "description": "Make image default."
          }
        },
        "description": "Add an image to a partner show."
      },
      "postApiV1Period": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name for this periodized subdivision of a Culture"
          },
          "description": {
            "type": "string",
            "description": "Description of the period"
          },
          "start_date": {
            "type": "string",
            "description": "An optional start date for this period"
          },
          "end_date": {
            "type": "string",
            "description": "An optional end date for this period"
          }
        },
        "description": "Create a new period"
      },
      "putApiV1Period": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name for this periodized subdivision of a Culture"
          },
          "description": {
            "type": "string",
            "description": "Description of the period"
          },
          "start_date": {
            "type": "string",
            "description": "An optional start date for this period"
          },
          "end_date": {
            "type": "string",
            "description": "An optional end date for this period"
          }
        },
        "description": "Update an existing period"
      },
      "putApiV1Profile": {
        "type": "object",
        "properties": {
          "handle": {
            "type": "string",
            "description": "Unique handle."
          },
          "bio": {
            "type": "string",
            "description": "Short bio (275 character max)."
          },
          "full_bio": {
            "type": "string",
            "description": "Full bio (800 character max)."
          },
          "website": {
            "type": "string",
            "description": "Website."
          },
          "location": {
            "type": "string",
            "description": "Location."
          },
          "private": {
            "type": "string",
            "description": "Private profiles hide certain features for non admins."
          },
          "menu_color_class": {
            "type": "string"
          }
        },
        "description": "Update a profile."
      },
      "postApiV1Profile": {
        "type": "object",
        "properties": {
          "handle": {
            "type": "string",
            "description": "Unique handle."
          },
          "bio": {
            "type": "string",
            "description": "Short bio (275 character max)."
          },
          "full_bio": {
            "type": "string",
            "description": "Full bio (800 character max)."
          },
          "website": {
            "type": "string",
            "description": "Website."
          },
          "location": {
            "type": "string",
            "description": "Location."
          },
          "private": {
            "type": "string",
            "description": "Private profiles hide certain features for non admins."
          },
          "menu_color_class": {
            "type": "string"
          }
        },
        "description": "Create a profile."
      },
      "putApiV1ProfileIdCoverImage": {
        "type": "object",
        "properties": {
          "gemini_token": {
            "type": "string",
            "description": "Gemini token."
          },
          "remote_image_url": {
            "type": "string",
            "description": "Profile cover image."
          }
        },
        "description": "Update profile cover."
      },
      "postApiV1ProfileIdCoverImage": {
        "type": "object",
        "properties": {
          "gemini_token": {
            "type": "string",
            "description": "Gemini token."
          },
          "remote_image_url": {
            "type": "string",
            "description": "Profile cover image."
          }
        },
        "description": "Change profile cover."
      },
      "putApiV1ProfileIdIcon": {
        "type": "object",
        "properties": {
          "gemini_token": {
            "type": "string",
            "description": "Gemini token."
          },
          "remote_image_url": {
            "type": "string",
            "description": "Profile icon image."
          }
        },
        "description": "Update profile icon."
      },
      "postApiV1ProfileIdIcon": {
        "type": "object",
        "properties": {
          "gemini_token": {
            "type": "string",
            "description": "Gemini token."
          },
          "remote_image_url": {
            "type": "string",
            "description": "Profile icon image."
          }
        },
        "description": "Change profile icon."
      },
      "putApiV1Purchase": {
        "type": "object",
        "properties": {
          "artist_id": {
            "type": "string",
            "description": "Partner id."
          },
          "artsy_commission": {
            "type": "number",
            "description": "Artsy commission.",
            "format": "float"
          },
          "artwork_id": {
            "type": "string",
            "description": "Artwork id."
          },
          "discover_admin_id": {
            "type": "string",
            "description": "Discover admin id."
          },
          "email": {
            "type": "string",
            "description": "Email for purchase."
          },
          "fair_id": {
            "type": "string",
            "description": "Fair id."
          },
          "note": {
            "type": "string",
            "description": "Note for purchase."
          },
          "owner_id": {
            "type": "string",
            "description": "Owner id."
          },
          "owner_type": {
            "type": "string",
            "description": "Owner type."
          },
          "partner_id": {
            "type": "string",
            "description": "Partner id."
          },
          "sale_date": {
            "type": "integer",
            "description": "Sale date.",
            "format": "int32"
          },
          "sale_admin_id": {
            "type": "string",
            "description": "Sale admin id."
          },
          "sale_id": {
            "type": "string",
            "description": "Sale id."
          },
          "sale_price": {
            "type": "number",
            "description": "Sale price in USD.",
            "format": "float"
          },
          "source": {
            "type": "string",
            "description": "Source of purchase."
          },
          "user_id": {
            "type": "string",
            "description": "User id."
          }
        },
        "description": "Update a purchase."
      },
      "postApiV1Purchase": {
        "type": "object",
        "properties": {
          "artist_id": {
            "type": "string",
            "description": "Partner id."
          },
          "artsy_commission": {
            "type": "number",
            "description": "Artsy commission.",
            "format": "float"
          },
          "artwork_id": {
            "type": "string",
            "description": "Artwork id."
          },
          "discover_admin_id": {
            "type": "string",
            "description": "Discover admin id."
          },
          "email": {
            "type": "string",
            "description": "Email for purchase."
          },
          "fair_id": {
            "type": "string",
            "description": "Fair id."
          },
          "note": {
            "type": "string",
            "description": "Note for purchase."
          },
          "owner_id": {
            "type": "string",
            "description": "Owner id."
          },
          "owner_type": {
            "type": "string",
            "description": "Owner type."
          },
          "partner_id": {
            "type": "string",
            "description": "Partner id."
          },
          "sale_date": {
            "type": "integer",
            "description": "Sale date.",
            "format": "int32"
          },
          "sale_admin_id": {
            "type": "string",
            "description": "Sale admin id."
          },
          "sale_id": {
            "type": "string",
            "description": "Sale id."
          },
          "sale_price": {
            "type": "number",
            "description": "Sale price in USD.",
            "format": "float"
          },
          "source": {
            "type": "string",
            "description": "Source of purchase."
          },
          "user_id": {
            "type": "string",
            "description": "User id."
          }
        },
        "description": "Create a purchase object for artwork sale."
      },
      "putApiV1SaleAgreements": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "The content of the sale agreement."
          },
          "display_start_at": {
            "type": "string",
            "description": "The start date of the sale to be displayed with the sale agreement.",
            "format": "date"
          },
          "display_end_at": {
            "type": "string",
            "description": "The end date of the sale to be displayed with the sale agreement.",
            "format": "date"
          },
          "status": {
            "type": "string",
            "description": "The status of the sale agreement."
          },
          "published": {
            "type": "boolean",
            "description": "If the sale agreement should be publicly viewable."
          }
        },
        "description": "Update a sale agreement."
      },
      "postApiV1SaleAgreements": {
        "required": [
          "content",
          "sale_id",
          "status"
        ],
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "The content of the sale agreement."
          },
          "display_start_at": {
            "type": "string",
            "description": "The start date of the sale to be displayed with the sale agreement.",
            "format": "date"
          },
          "display_end_at": {
            "type": "string",
            "description": "The end date of the sale to be displayed with the sale agreement.",
            "format": "date"
          },
          "sale_id": {
            "type": "string",
            "description": "The id of the sale for which this sale agreement is associated."
          },
          "status": {
            "type": "string",
            "description": "The status of the sale agreement."
          }
        },
        "description": "Create a new sale agreement."
      },
      "putApiV1Sale": {
        "type": "object",
        "properties": {
          "associated_sale_id": {
            "type": "string"
          },
          "auto_approval_ends_at": {
            "type": "string"
          },
          "bid_increment_strategy_name": {
            "type": "string"
          },
          "bidding_engine_enabled": {
            "type": "boolean"
          },
          "buyers_premium_id": {
            "type": "string"
          },
          "cascading_end_time_interval_minutes": {
            "type": "integer",
            "format": "int32"
          },
          "collect_payments": {
            "type": "boolean"
          },
          "currency": {
            "type": "string"
          },
          "delegate_bidding": {
            "type": "boolean"
          },
          "description": {
            "type": "string"
          },
          "end_at": {
            "type": "string"
          },
          "event_end_at": {
            "type": "string"
          },
          "event_location": {
            "type": "string"
          },
          "event_start_at": {
            "type": "string"
          },
          "extended_bidding_interval_minutes": {
            "type": "integer",
            "format": "int32"
          },
          "extended_bidding_period_minutes": {
            "type": "integer",
            "format": "int32"
          },
          "gemini_token": {
            "type": "string"
          },
          "hide_total": {
            "type": "boolean"
          },
          "is_artsy_licensed": {
            "type": "boolean"
          },
          "is_auction": {
            "type": "boolean"
          },
          "is_benefit": {
            "type": "boolean"
          },
          "is_gallery_auction": {
            "type": "boolean"
          },
          "is_preliminary": {
            "type": "boolean"
          },
          "live_start_at": {
            "type": "string"
          },
          "lot_conditions_report_enabled": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "partner_id": {
            "type": "string"
          },
          "profile_id": {
            "type": "string"
          },
          "promoted_sale_id": {
            "type": "string"
          },
          "published": {
            "type": "boolean"
          },
          "registration_ends_at": {
            "type": "string"
          },
          "require_bidder_approval": {
            "type": "boolean"
          },
          "require_identity_verification": {
            "type": "boolean"
          },
          "sale_code": {
            "type": "string"
          },
          "start_at": {
            "type": "string"
          },
          "time_zone": {
            "type": "string"
          },
          "trusted_client_bypasses_card_requirement": {
            "type": "boolean"
          },
          "virtual_live": {
            "type": "boolean"
          }
        },
        "description": "Update an existing sale."
      },
      "postApiV1Sale": {
        "type": "object",
        "properties": {
          "associated_sale_id": {
            "type": "string"
          },
          "auto_approval_ends_at": {
            "type": "string"
          },
          "bid_increment_strategy_name": {
            "type": "string"
          },
          "bidding_engine_enabled": {
            "type": "boolean"
          },
          "buyers_premium_id": {
            "type": "string"
          },
          "cascading_end_time_interval_minutes": {
            "type": "integer",
            "format": "int32"
          },
          "collect_payments": {
            "type": "boolean"
          },
          "currency": {
            "type": "string"
          },
          "delegate_bidding": {
            "type": "boolean"
          },
          "description": {
            "type": "string"
          },
          "end_at": {
            "type": "string"
          },
          "event_end_at": {
            "type": "string"
          },
          "event_location": {
            "type": "string"
          },
          "event_start_at": {
            "type": "string"
          },
          "extended_bidding_interval_minutes": {
            "type": "integer",
            "format": "int32"
          },
          "extended_bidding_period_minutes": {
            "type": "integer",
            "format": "int32"
          },
          "gemini_token": {
            "type": "string"
          },
          "hide_total": {
            "type": "boolean"
          },
          "is_artsy_licensed": {
            "type": "boolean"
          },
          "is_auction": {
            "type": "boolean"
          },
          "is_benefit": {
            "type": "boolean"
          },
          "is_gallery_auction": {
            "type": "boolean"
          },
          "is_preliminary": {
            "type": "boolean"
          },
          "live_start_at": {
            "type": "string"
          },
          "lot_conditions_report_enabled": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "partner_id": {
            "type": "string"
          },
          "profile_id": {
            "type": "string"
          },
          "promoted_sale_id": {
            "type": "string"
          },
          "published": {
            "type": "boolean"
          },
          "registration_ends_at": {
            "type": "string"
          },
          "require_bidder_approval": {
            "type": "boolean"
          },
          "require_identity_verification": {
            "type": "boolean"
          },
          "sale_code": {
            "type": "string"
          },
          "start_at": {
            "type": "string"
          },
          "time_zone": {
            "type": "string"
          },
          "trusted_client_bypasses_card_requirement": {
            "type": "boolean"
          },
          "virtual_live": {
            "type": "boolean"
          }
        },
        "description": "Create a sale."
      },
      "putApiV1SaleSaleIdSaleArtwork": {
        "type": "object",
        "properties": {
          "currency": {
            "type": "string"
          },
          "end_at": {
            "type": "string",
            "format": "date-time"
          },
          "estimate_cents": {
            "type": "integer",
            "format": "int32"
          },
          "exclude_from_marketing": {
            "type": "boolean"
          },
          "high_estimate_cents": {
            "type": "integer",
            "format": "int32"
          },
          "lot_label": {
            "type": "string"
          },
          "low_estimate_cents": {
            "type": "integer",
            "format": "int32"
          },
          "opening_bid_cents": {
            "type": "integer",
            "format": "int32"
          },
          "position": {
            "type": "number",
            "format": "float"
          },
          "reserve_cents": {
            "type": "integer",
            "format": "int32"
          },
          "reserve_unknown": {
            "type": "boolean"
          },
          "user_notes": {
            "type": "string"
          },
          "withdrawn_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "description": "Update a sale artwork."
      },
      "postApiV1SaleSaleIdSaleArtwork": {
        "required": [
          "artwork_id"
        ],
        "type": "object",
        "properties": {
          "currency": {
            "type": "string"
          },
          "end_at": {
            "type": "string",
            "format": "date-time"
          },
          "estimate_cents": {
            "type": "integer",
            "format": "int32"
          },
          "exclude_from_marketing": {
            "type": "boolean"
          },
          "high_estimate_cents": {
            "type": "integer",
            "format": "int32"
          },
          "lot_label": {
            "type": "string"
          },
          "low_estimate_cents": {
            "type": "integer",
            "format": "int32"
          },
          "opening_bid_cents": {
            "type": "integer",
            "format": "int32"
          },
          "position": {
            "type": "number",
            "format": "float"
          },
          "reserve_cents": {
            "type": "integer",
            "format": "int32"
          },
          "reserve_unknown": {
            "type": "boolean"
          },
          "user_notes": {
            "type": "string"
          },
          "withdrawn_at": {
            "type": "string",
            "format": "date-time"
          },
          "artwork_id": {
            "type": "string",
            "description": "Artwork id."
          }
        },
        "description": "Add an artwork to a sale."
      },
      "putApiV1SetIdItem": {
        "type": "object",
        "properties": {
          "position": {
            "type": "integer",
            "description": "New item position.",
            "format": "int32"
          },
          "gemini_token": {
            "type": "string",
            "description": "Gemini token."
          }
        },
        "description": "Update an item in an existing set."
      },
      "postApiV1SetIdItem": {
        "required": [
          "item_id"
        ],
        "type": "object",
        "properties": {
          "item_id": {
            "type": "string",
            "description": "Item id."
          },
          "position": {
            "type": "integer",
            "description": "Item position.",
            "format": "int32"
          },
          "gemini_token": {
            "type": "string",
            "description": "Gemini token."
          }
        },
        "description": "Add an item to an existing set."
      },
      "putApiV1Set": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "internal_name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "published": {
            "type": "string"
          },
          "display_on_mobile": {
            "type": "string",
            "description": "Display on mobile."
          },
          "display_on_desktop": {
            "type": "string",
            "description": "Display on desktop."
          },
          "display_on_martsy": {
            "type": "string",
            "description": "Display on martsy."
          },
          "layout": {
            "type": "string"
          },
          "item_ids": {
            "type": "array",
            "description": "Items will be added and/or removed if the parameter is provided. Otherwise, items will not be modified",
            "items": {
              "type": "string"
            }
          },
          "owner_id": {
            "type": "string",
            "description": "Owner type."
          },
          "owner_type": {
            "type": "string",
            "description": "Owner id."
          },
          "unset_owner": {
            "type": "boolean",
            "description": "When true, will unset `owner` relation."
          }
        },
        "description": "Update an existing set."
      },
      "postApiV1Set": {
        "required": [
          "item_type"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "internal_name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "published": {
            "type": "string"
          },
          "display_on_mobile": {
            "type": "string",
            "description": "Display on mobile."
          },
          "display_on_desktop": {
            "type": "string",
            "description": "Display on desktop."
          },
          "display_on_martsy": {
            "type": "string",
            "description": "Display on martsy."
          },
          "layout": {
            "type": "string"
          },
          "item_type": {
            "type": "string",
            "description": "Item type."
          },
          "owner_type": {
            "type": "string",
            "description": "Owner type."
          },
          "owner_id": {
            "type": "string",
            "description": "Owner id."
          },
          "item_ids": {
            "type": "array",
            "description": "Item ids.",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Create a new set."
      },
      "postApiV1Shortcut": {
        "required": [
          "long"
        ],
        "type": "object",
        "properties": {
          "long": {
            "type": "string",
            "description": "URI (full URL or path) to shorten"
          },
          "short": {
            "type": "string",
            "description": "Desired path to function as the shortcut"
          }
        },
        "description": "Create a new shortcut for a given long URL (and optional short URL)."
      },
      "putApiV1Shortcut": {
        "type": "object",
        "properties": {
          "long": {
            "type": "string",
            "description": "Shortcut long."
          }
        },
        "description": "Update an existing shortcut."
      },
      "postApiV1Show": {
        "required": [
          "partner_id"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "press_release": {
            "type": "string"
          },
          "press_release_url": {
            "type": "string",
            "description": "Link to the press release for this show"
          },
          "start_at": {
            "type": "string"
          },
          "end_at": {
            "type": "string"
          },
          "all_day": {
            "type": "string"
          },
          "fair_location": {
            "type": "string"
          },
          "featured": {
            "type": "string"
          },
          "batch_publish": {
            "type": "string"
          },
          "display_on_partner_profile": {
            "type": "string"
          },
          "artist_ids": {
            "type": "array",
            "description": "List of artist ID's without associated artworks.",
            "items": {
              "type": "string"
            }
          },
          "eligible_artwork_artist_ids": {
            "type": "array",
            "description": "List of artist ID's with associated eligible (published) artworks (may not be not 100% accurate).",
            "items": {
              "type": "string"
            }
          },
          "galaxy_partner_id": {
            "type": "string",
            "description": "Galaxy Id (if this show belongs to a galaxy partner)."
          },
          "partner_city": {
            "type": "string",
            "description": "City the show is in, can be used as a fallback if no location (or for ref. shows)."
          },
          "group": {
            "type": "string",
            "description": "Whether the show is a group show or not, can be explicitly set."
          },
          "sortable_name": {
            "type": "string",
            "description": "Downcased version of the show name to allow for correct alphabetical sort"
          },
          "discovery_blocked_reason": {
            "type": "string",
            "description": "The reason this show was blocked from discovery."
          },
          "duplicate_of_id": {
            "type": "string"
          },
          "viewing_room_ids": {
            "type": "array",
            "description": "If set, the ids of linked `ViewingRoom`s.",
            "items": {
              "type": "string"
            }
          },
          "partner_id": {
            "type": "string"
          },
          "fair_id": {
            "type": "string"
          },
          "partner_location_id": {
            "type": "string"
          }
        },
        "description": "Create a new partner show."
      },
      "putApiV1Show": {
        "required": [
          "partner_id"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "press_release": {
            "type": "string"
          },
          "press_release_url": {
            "type": "string",
            "description": "Link to the press release for this show"
          },
          "start_at": {
            "type": "string"
          },
          "end_at": {
            "type": "string"
          },
          "all_day": {
            "type": "string"
          },
          "fair_location": {
            "type": "string"
          },
          "featured": {
            "type": "string"
          },
          "batch_publish": {
            "type": "string"
          },
          "display_on_partner_profile": {
            "type": "string"
          },
          "artist_ids": {
            "type": "array",
            "description": "List of artist ID's without associated artworks.",
            "items": {
              "type": "string"
            }
          },
          "eligible_artwork_artist_ids": {
            "type": "array",
            "description": "List of artist ID's with associated eligible (published) artworks (may not be not 100% accurate).",
            "items": {
              "type": "string"
            }
          },
          "galaxy_partner_id": {
            "type": "string",
            "description": "Galaxy Id (if this show belongs to a galaxy partner)."
          },
          "partner_city": {
            "type": "string",
            "description": "City the show is in, can be used as a fallback if no location (or for ref. shows)."
          },
          "group": {
            "type": "string",
            "description": "Whether the show is a group show or not, can be explicitly set."
          },
          "sortable_name": {
            "type": "string",
            "description": "Downcased version of the show name to allow for correct alphabetical sort"
          },
          "discovery_blocked_reason": {
            "type": "string",
            "description": "The reason this show was blocked from discovery."
          },
          "duplicate_of_id": {
            "type": "string"
          },
          "viewing_room_ids": {
            "type": "array",
            "description": "If set, the ids of linked `ViewingRoom`s.",
            "items": {
              "type": "string"
            }
          },
          "partner_id": {
            "type": "string"
          },
          "fair_id": {
            "type": "string"
          },
          "partner_location_id": {
            "type": "string"
          }
        },
        "description": "Update an existing partner show."
      },
      "postApiV1SiteHeroUnitSiteHeroUnitIdImage": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Image Type."
          },
          "remote_image_url": {
            "type": "string",
            "description": "Remote URL for the image to upload."
          },
          "gemini_token": {
            "type": "string",
            "description": "Gemini token."
          }
        },
        "description": "Add an image to a hero unit."
      },
      "putApiV1SiteHeroUnit": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "enabled": {
            "type": "string"
          },
          "start_at": {
            "type": "string"
          },
          "end_at": {
            "type": "string"
          },
          "link": {
            "type": "string"
          },
          "link_text": {
            "type": "string"
          },
          "position": {
            "type": "integer",
            "format": "int32"
          },
          "menu_color_class": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "heading": {
            "type": "string"
          },
          "credit_line": {
            "type": "string"
          },
          "link_color_hover_hex": {
            "type": "string"
          },
          "link_color_off_hex": {
            "type": "string"
          },
          "mobile_title": {
            "type": "string"
          },
          "mobile_description": {
            "type": "string"
          },
          "mobile_menu_color_class": {
            "type": "string"
          },
          "display_on_mobile": {
            "type": "string",
            "description": "Display on mobile."
          },
          "display_on_desktop": {
            "type": "string",
            "description": "Display on desktop."
          },
          "display_on_martsy": {
            "type": "string",
            "description": "Display on martsy."
          },
          "app_title": {
            "type": "string"
          },
          "app_description": {
            "type": "string"
          }
        },
        "description": "Update a site hero unit."
      },
      "postApiV1SiteHeroUnit": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "enabled": {
            "type": "string"
          },
          "start_at": {
            "type": "string"
          },
          "end_at": {
            "type": "string"
          },
          "link": {
            "type": "string"
          },
          "link_text": {
            "type": "string"
          },
          "position": {
            "type": "integer",
            "format": "int32"
          },
          "menu_color_class": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "heading": {
            "type": "string"
          },
          "credit_line": {
            "type": "string"
          },
          "link_color_hover_hex": {
            "type": "string"
          },
          "link_color_off_hex": {
            "type": "string"
          },
          "mobile_title": {
            "type": "string"
          },
          "mobile_description": {
            "type": "string"
          },
          "mobile_menu_color_class": {
            "type": "string"
          },
          "display_on_mobile": {
            "type": "string",
            "description": "Display on mobile."
          },
          "display_on_desktop": {
            "type": "string",
            "description": "Display on desktop."
          },
          "display_on_martsy": {
            "type": "string",
            "description": "Display on martsy."
          },
          "app_title": {
            "type": "string"
          },
          "app_description": {
            "type": "string"
          }
        },
        "description": "Create a site hero unit."
      },
      "postApiV1StripeCustomer": {
        "required": [
          "user_id"
        ],
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string",
            "description": "User Id."
          }
        },
        "description": "Create or return an existing customer account and Stripe customer for a user."
      },
      "putApiV1Tag": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "description": "Update an existing tag."
      },
      "postApiV1TokenExchange": {
        "required": [
          "client_application_id"
        ],
        "type": "object",
        "properties": {
          "client_application_id": {
            "type": "string",
            "description": "ID of client application to get a JWT for."
          }
        },
        "description": "Get a token for a client app."
      },
      "putApiV1UserArtQuiz": {
        "required": [
          "artwork_id"
        ],
        "type": "object",
        "properties": {
          "artwork_id": {
            "type": "string",
            "description": "The id of the artwork to update."
          },
          "clear_interaction": {
            "type": "boolean",
            "description": "When true clear the interaction."
          }
        },
        "description": "Update a user's art quiz."
      },
      "postApiV1UserFairAction": {
        "required": [
          "action",
          "fair_id"
        ],
        "type": "object",
        "properties": {
          "fair_id": {
            "type": "string",
            "description": "Fair id."
          },
          "action": {
            "type": "string",
            "enum": [
              "Fair Partner Marketing",
              "Invitee",
              "Attendee",
              "General Admission",
              "Limited Access VIP",
              "All Access VIP"
            ]
          },
          "owner_type": {
            "type": "string",
            "enum": [
              "UserSaleProfile",
              "CollectorProfile"
            ]
          },
          "owner_id": {
            "type": "string",
            "description": "ID of owner."
          },
          "anonymous_session_id": {
            "type": "string",
            "description": "Session ID of the inquirer if anonymous."
          },
          "user_id": {
            "type": "string",
            "description": "User id."
          },
          "session_id": {
            "type": "string",
            "description": "Client's key for anonymous session."
          }
        },
        "description": "Creates a new user fair action for a given collector or sale profile."
      },
      "postApiV1UserInterest": {
        "required": [
          "category",
          "interest_id",
          "interest_type",
          "owner_type"
        ],
        "type": "object",
        "properties": {
          "owner_type": {
            "type": "string",
            "enum": [
              "UserSaleProfile",
              "CollectorProfile"
            ]
          },
          "interest_id": {
            "type": "string",
            "description": "Interest id."
          },
          "interest_type": {
            "type": "string",
            "enum": [
              "Artist",
              "Gene"
            ]
          },
          "category": {
            "type": "string",
            "enum": [
              "collected_before",
              "interested_in_collecting"
            ]
          },
          "owner_id": {
            "type": "string",
            "description": "Collector/sale profile id."
          },
          "anonymous_session_id": {
            "type": "string",
            "description": "Anonymous session id."
          },
          "user_id": {
            "type": "string",
            "description": "User id."
          },
          "body": {
            "type": "string",
            "description": "Note"
          },
          "session_id": {
            "type": "string",
            "description": "Client's key for anonymous session."
          }
        },
        "description": "Add an interest."
      },
      "putApiV1UserSaleProfile": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name."
          },
          "email": {
            "type": "string",
            "description": "Email."
          },
          "profession": {
            "type": "string",
            "description": "Profession."
          },
          "employer": {
            "type": "string",
            "description": "Employer."
          },
          "job_title": {
            "type": "string",
            "description": "Job Title."
          },
          "first_name": {
            "type": "string",
            "description": "First Name."
          },
          "last_name": {
            "type": "string",
            "description": "Last Name."
          },
          "address_1": {
            "type": "string",
            "description": "Address 1"
          },
          "address_2": {
            "type": "string",
            "description": "Address 2"
          },
          "city": {
            "type": "string",
            "description": "City Name"
          },
          "state": {
            "type": "string",
            "description": "State Name"
          },
          "zip": {
            "type": "string",
            "description": "Zip Code"
          },
          "country": {
            "type": "string",
            "description": "Country"
          },
          "work_phone": {
            "type": "string",
            "description": "Work Phone"
          },
          "mobile_phone": {
            "type": "string",
            "description": "Mobile Phone"
          },
          "fax": {
            "type": "string",
            "description": "Fax"
          },
          "alternative_email": {
            "type": "string",
            "description": "Alternative Email"
          },
          "salary_usd": {
            "type": "integer",
            "description": "Approximate salary in USD",
            "format": "int32"
          },
          "birth_year": {
            "type": "integer",
            "description": "Approximate birth year",
            "format": "int32"
          },
          "spouse": {
            "type": "string",
            "description": "Spouse/Partner Name"
          },
          "require_bidder_approval": {
            "type": "string"
          }
        },
        "description": "Update a profile."
      },
      "postApiV1UserSaleProfile": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name."
          },
          "email": {
            "type": "string",
            "description": "Email."
          },
          "profession": {
            "type": "string",
            "description": "Profession."
          },
          "employer": {
            "type": "string",
            "description": "Employer."
          },
          "job_title": {
            "type": "string",
            "description": "Job Title."
          },
          "first_name": {
            "type": "string",
            "description": "First Name."
          },
          "last_name": {
            "type": "string",
            "description": "Last Name."
          },
          "address_1": {
            "type": "string",
            "description": "Address 1"
          },
          "address_2": {
            "type": "string",
            "description": "Address 2"
          },
          "city": {
            "type": "string",
            "description": "City Name"
          },
          "state": {
            "type": "string",
            "description": "State Name"
          },
          "zip": {
            "type": "string",
            "description": "Zip Code"
          },
          "country": {
            "type": "string",
            "description": "Country"
          },
          "work_phone": {
            "type": "string",
            "description": "Work Phone"
          },
          "mobile_phone": {
            "type": "string",
            "description": "Mobile Phone"
          },
          "fax": {
            "type": "string",
            "description": "Fax"
          },
          "alternative_email": {
            "type": "string",
            "description": "Alternative Email"
          },
          "salary_usd": {
            "type": "integer",
            "description": "Approximate salary in USD",
            "format": "int32"
          },
          "birth_year": {
            "type": "integer",
            "description": "Approximate birth year",
            "format": "int32"
          },
          "spouse": {
            "type": "string",
            "description": "Spouse/Partner Name"
          },
          "require_bidder_approval": {
            "type": "string"
          }
        },
        "description": "Create a sale profile."
      },
      "postApiV1UserIdLabFeature": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name."
          },
          "display_follow_tooltip": {
            "type": "string"
          },
          "display_filter_tooltip": {
            "type": "string"
          },
          "display_inquiry_tooltip": {
            "type": "string"
          },
          "display_favorites_dialog": {
            "type": "string"
          },
          "phone": {
            "type": "string",
            "description": "Phone number."
          },
          "phone_number": {
            "type": "string",
            "description": "Normalized phone number."
          },
          "phone_country_code": {
            "type": "string",
            "description": "ISO 3166 country code for phone number."
          },
          "gender": {
            "type": "string",
            "description": "Gender."
          },
          "price_range_min": {
            "type": "integer",
            "format": "int32"
          },
          "price_range_max": {
            "type": "integer",
            "format": "int32"
          },
          "artworks_per_year": {
            "type": "string",
            "description": "Number of artworks purchased per year."
          },
          "is_collector": {
            "type": "string",
            "description": "Is a collector?"
          },
          "industry": {
            "type": "string",
            "description": "Works in the art industry?"
          },
          "profession": {
            "type": "string",
            "description": "Profession."
          },
          "notes": {
            "type": "string",
            "description": "Additional personal notes."
          },
          "share_follows": {
            "type": "string",
            "description": "Shares FollowArtists, FollowGenes, and FollowProfiles with partners."
          },
          "receive_purchase_notification": {
            "type": "string",
            "description": "Receive purchase notifications."
          },
          "receive_outbid_notification": {
            "type": "string",
            "description": "Receive outbid auctions notifications."
          },
          "receive_lot_opening_soon_notification": {
            "type": "string",
            "description": "Receive lot opening auctions notifications."
          },
          "receive_sale_opening_closing_notification": {
            "type": "string",
            "description": "Receive auction starting/ending notifications."
          },
          "receive_new_works_notification": {
            "type": "string",
            "description": "Receive new works notifications."
          },
          "receive_new_sales_notification": {
            "type": "string",
            "description": "Receive new sales notifications."
          },
          "receive_promotion_notification": {
            "type": "string",
            "description": "Receive promotional notifications."
          },
          "receive_order_notification": {
            "type": "string",
            "description": "Receive order notifications."
          },
          "receive_viewing_room_notification": {
            "type": "string",
            "description": "Receive viewing room notifications."
          },
          "receive_partner_show_notification": {
            "type": "string",
            "description": "Receive partner show notifications."
          },
          "receive_partner_offer_notification": {
            "type": "string",
            "description": "Receive partner offer notifications."
          },
          "email": {
            "type": "string",
            "description": "Email."
          },
          "email_frequency": {
            "type": "string",
            "description": "Frequency of marketing emails."
          },
          "location": {
            "type": "string"
          },
          "collector_since": {
            "type": "string"
          },
          "publish_to_facebook": {
            "type": "string",
            "description": "Automatically publish saved artworks and followed artists to Facebook."
          },
          "is_representative": {
            "type": "string"
          },
          "is_available_representative": {
            "type": "string",
            "description": "Is the admin available to be contacted about inquiries."
          },
          "data_transfer_opt_out": {
            "type": "string"
          },
          "currency_preference": {
            "type": "string",
            "description": "Preferred currency."
          },
          "length_unit_preference": {
            "type": "string",
            "description": "Prefered unit of length."
          }
        },
        "description": "Enable a lab feature for a user."
      },
      "postApiV1User": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "User name."
          },
          "display_follow_tooltip": {
            "type": "string"
          },
          "display_filter_tooltip": {
            "type": "string"
          },
          "display_inquiry_tooltip": {
            "type": "string"
          },
          "display_favorites_dialog": {
            "type": "string"
          },
          "phone": {
            "type": "string",
            "description": "Phone number."
          },
          "phone_number": {
            "type": "string",
            "description": "Normalized phone number."
          },
          "phone_country_code": {
            "type": "string",
            "description": "ISO 3166 country code for phone number."
          },
          "gender": {
            "type": "string",
            "description": "Gender."
          },
          "price_range_min": {
            "type": "integer",
            "format": "int32"
          },
          "price_range_max": {
            "type": "integer",
            "format": "int32"
          },
          "artworks_per_year": {
            "type": "string",
            "description": "Number of artworks purchased per year."
          },
          "is_collector": {
            "type": "string",
            "description": "Is a collector?"
          },
          "industry": {
            "type": "string",
            "description": "Works in the art industry?"
          },
          "profession": {
            "type": "string",
            "description": "Profession."
          },
          "notes": {
            "type": "string",
            "description": "Additional personal notes."
          },
          "share_follows": {
            "type": "string",
            "description": "Shares FollowArtists, FollowGenes, and FollowProfiles with partners."
          },
          "receive_purchase_notification": {
            "type": "string",
            "description": "Receive purchase notifications."
          },
          "receive_outbid_notification": {
            "type": "string",
            "description": "Receive outbid auctions notifications."
          },
          "receive_lot_opening_soon_notification": {
            "type": "string",
            "description": "Receive lot opening auctions notifications."
          },
          "receive_sale_opening_closing_notification": {
            "type": "string",
            "description": "Receive auction starting/ending notifications."
          },
          "receive_new_works_notification": {
            "type": "string",
            "description": "Receive new works notifications."
          },
          "receive_new_sales_notification": {
            "type": "string",
            "description": "Receive new sales notifications."
          },
          "receive_promotion_notification": {
            "type": "string",
            "description": "Receive promotional notifications."
          },
          "receive_order_notification": {
            "type": "string",
            "description": "Receive order notifications."
          },
          "receive_viewing_room_notification": {
            "type": "string",
            "description": "Receive viewing room notifications."
          },
          "receive_partner_show_notification": {
            "type": "string",
            "description": "Receive partner show notifications."
          },
          "receive_partner_offer_notification": {
            "type": "string",
            "description": "Receive partner offer notifications."
          },
          "email": {
            "type": "string",
            "description": "User email."
          },
          "email_frequency": {
            "type": "string",
            "description": "Frequency of marketing emails."
          },
          "location": {
            "type": "string"
          },
          "collector_since": {
            "type": "string"
          },
          "publish_to_facebook": {
            "type": "string",
            "description": "Automatically publish saved artworks and followed artists to Facebook."
          },
          "is_representative": {
            "type": "string"
          },
          "is_available_representative": {
            "type": "string",
            "description": "Is the admin available to be contacted about inquiries."
          },
          "data_transfer_opt_out": {
            "type": "string"
          },
          "currency_preference": {
            "type": "string",
            "description": "Preferred currency."
          },
          "length_unit_preference": {
            "type": "string",
            "description": "Prefered unit of length."
          },
          "password": {
            "type": "string",
            "description": "User password."
          },
          "paddle_number": {
            "type": "string",
            "description": "User paddle number."
          },
          "likely_to_purchase": {
            "type": "string",
            "description": "How likely a user is to purchase anything."
          },
          "provider": {
            "type": "string",
            "description": "Authentication provider."
          },
          "oauth_token": {
            "type": "string",
            "description": "OAuth token."
          },
          "jwt": {
            "type": "string",
            "description": "JWT token used by oauth provider."
          },
          "apple_uid": {
            "type": "string",
            "description": "User id provided by apple sign in."
          },
          "id_token": {
            "type": "string",
            "description": "JWT used for apple sign in."
          },
          "collector_level": {
            "type": "integer",
            "description": "User collector level.",
            "format": "int32"
          },
          "sign_up_intent": {
            "type": "string",
            "description": "User action that led to signup"
          },
          "sign_up_referer": {
            "type": "string",
            "description": "Referer url that led to signup"
          },
          "accepted_terms_of_service": {
            "type": "boolean",
            "description": "If true, user has accepted terms of use and privacy policy"
          },
          "agreed_to_receive_emails": {
            "type": "boolean",
            "description": "If true, user has agreed to receive emails from Artsy"
          },
          "recaptcha_token": {
            "type": "string",
            "description": "Attempts to verify the source is a human (required for all but certain clients/providers)"
          }
        },
        "description": "Create a new user."
      },
      "postApiV1UserIdentify": {
        "required": [
          "email"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User email."
          },
          "recaptcha_token": {
            "type": "string",
            "description": "Recaptcha token."
          }
        },
        "description": "Check whether a user exists by email address (used by Artsy clients for authentication flows)."
      },
      "postApiV1UserUserIdAccessControl": {
        "required": [
          "id",
          "model"
        ],
        "type": "object",
        "properties": {
          "model": {
            "type": "string",
            "description": "Model."
          },
          "id": {
            "type": "string",
            "description": "Instance id of the model."
          }
        },
        "description": "Grants user access to a model."
      },
      "putApiV1UserIdPassword": {
        "required": [
          "new_password",
          "password_confirmation"
        ],
        "type": "object",
        "properties": {
          "new_password": {
            "type": "string",
            "description": "New password."
          },
          "password_confirmation": {
            "type": "string",
            "description": "New password confirmation."
          }
        },
        "description": "Change a users password."
      },
      "putApiV1User": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name."
          },
          "display_follow_tooltip": {
            "type": "string"
          },
          "display_filter_tooltip": {
            "type": "string"
          },
          "display_inquiry_tooltip": {
            "type": "string"
          },
          "display_favorites_dialog": {
            "type": "string"
          },
          "phone": {
            "type": "string",
            "description": "Phone number."
          },
          "phone_number": {
            "type": "string",
            "description": "Normalized phone number."
          },
          "phone_country_code": {
            "type": "string",
            "description": "ISO 3166 country code for phone number."
          },
          "gender": {
            "type": "string",
            "description": "Gender."
          },
          "price_range_min": {
            "type": "integer",
            "format": "int32"
          },
          "price_range_max": {
            "type": "integer",
            "format": "int32"
          },
          "artworks_per_year": {
            "type": "string",
            "description": "Number of artworks purchased per year."
          },
          "is_collector": {
            "type": "string",
            "description": "Is a collector?"
          },
          "industry": {
            "type": "string",
            "description": "Works in the art industry?"
          },
          "profession": {
            "type": "string",
            "description": "Profession."
          },
          "notes": {
            "type": "string",
            "description": "Additional personal notes."
          },
          "share_follows": {
            "type": "string",
            "description": "Shares FollowArtists, FollowGenes, and FollowProfiles with partners."
          },
          "receive_purchase_notification": {
            "type": "string",
            "description": "Receive purchase notifications."
          },
          "receive_outbid_notification": {
            "type": "string",
            "description": "Receive outbid auctions notifications."
          },
          "receive_lot_opening_soon_notification": {
            "type": "string",
            "description": "Receive lot opening auctions notifications."
          },
          "receive_sale_opening_closing_notification": {
            "type": "string",
            "description": "Receive auction starting/ending notifications."
          },
          "receive_new_works_notification": {
            "type": "string",
            "description": "Receive new works notifications."
          },
          "receive_new_sales_notification": {
            "type": "string",
            "description": "Receive new sales notifications."
          },
          "receive_promotion_notification": {
            "type": "string",
            "description": "Receive promotional notifications."
          },
          "receive_order_notification": {
            "type": "string",
            "description": "Receive order notifications."
          },
          "receive_viewing_room_notification": {
            "type": "string",
            "description": "Receive viewing room notifications."
          },
          "receive_partner_show_notification": {
            "type": "string",
            "description": "Receive partner show notifications."
          },
          "receive_partner_offer_notification": {
            "type": "string",
            "description": "Receive partner offer notifications."
          },
          "email": {
            "type": "string",
            "description": "Email."
          },
          "email_frequency": {
            "type": "string",
            "description": "Frequency of marketing emails."
          },
          "location": {
            "type": "string"
          },
          "collector_since": {
            "type": "string"
          },
          "publish_to_facebook": {
            "type": "string",
            "description": "Automatically publish saved artworks and followed artists to Facebook."
          },
          "is_representative": {
            "type": "string"
          },
          "is_available_representative": {
            "type": "string",
            "description": "Is the admin available to be contacted about inquiries."
          },
          "data_transfer_opt_out": {
            "type": "boolean",
            "description": "If true, user requests that personal data not be shared with or transferred to external parties"
          },
          "currency_preference": {
            "type": "string",
            "description": "Preferred currency."
          },
          "length_unit_preference": {
            "type": "string",
            "description": "Prefered unit of length."
          },
          "likely_to_purchase": {
            "type": "string",
            "description": "How likely a user is to purchase anything."
          },
          "paddle_number": {
            "type": "string",
            "description": "User paddle number."
          },
          "collector_level": {
            "type": "integer",
            "description": "User collector level.",
            "format": "int32"
          },
          "accepted_terms_of_service": {
            "type": "boolean",
            "description": "If true, user has accepted terms of use and privacy policy"
          },
          "agreed_to_receive_emails": {
            "type": "boolean",
            "description": "If true, user has agreed to receive emails from Artsy"
          }
        },
        "description": "Update an existing user."
      },
      "putApiV1UsersResetPassword": {
        "required": [
          "password",
          "password_confirmation",
          "reset_password_token"
        ],
        "type": "object",
        "properties": {
          "reset_password_token": {
            "type": "string",
            "description": "Reset password token sent in an email."
          },
          "password": {
            "type": "string",
            "description": "New password."
          },
          "password_confirmation": {
            "type": "string",
            "description": "New password confirmation."
          }
        },
        "description": "Reset a password given a password token."
      },
      "postApiV1UsersSendResetPasswordInstructions": {
        "required": [
          "email"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User email."
          }
        },
        "description": "Send reset password instructions."
      },
      "postApiV1VerifiedRepresentatives": {
        "required": [
          "artist_id",
          "partner_id"
        ],
        "type": "object",
        "properties": {
          "artist_id": {
            "type": "string"
          },
          "partner_id": {
            "type": "string"
          }
        },
        "description": "Create a verified representative."
      },
      "postApiV1Video": {
        "required": [
          "json_response"
        ],
        "type": "object",
        "properties": {
          "json_response": {
            "type": "object",
            "properties": {},
            "description": "JSON response from Vimeo."
          }
        },
        "description": "Create a video."
      },
      "putApiV1ViewingRoomIdSubsections": {
        "required": [
          "subsections"
        ],
        "type": "object",
        "properties": {
          "subsections": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "attributes": {
                  "type": "object",
                  "properties": {
                    "body": {
                      "type": "string"
                    },
                    "caption": {
                      "type": "string"
                    },
                    "title": {
                      "type": "string"
                    }
                  }
                },
                "ar_image_id": {
                  "type": "string"
                },
                "delete": {
                  "type": "boolean",
                  "description": "If true, delete this subsection from the database"
                },
                "id": {
                  "type": "string"
                }
              }
            }
          }
        },
        "description": "Update a viewing room's subsections."
      },
      "putApiV1ViewingRoomIdViewingRoomArtworks": {
        "required": [
          "artworks"
        ],
        "type": "object",
        "properties": {
          "artworks": {
            "type": "array",
            "items": {
              "required": [
                "artwork_id"
              ],
              "type": "object",
              "properties": {
                "artwork_id": {
                  "type": "string"
                },
                "delete": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "description": "Update a viewing room's artworks."
      },
      "putApiV1ViewingRoom": {
        "type": "object",
        "properties": {
          "ar_image_id": {
            "type": "string",
            "description": "AR Image ID"
          },
          "body": {
            "type": "string",
            "description": "Main text"
          },
          "end_at": {
            "type": "string",
            "description": "End datetime"
          },
          "intro_statement": {
            "type": "string",
            "description": "Introduction"
          },
          "published": {
            "type": "boolean"
          },
          "pull_quote": {
            "type": "string",
            "description": "Pullquote"
          },
          "start_at": {
            "type": "string",
            "description": "Start datetime"
          },
          "time_zone": {
            "type": "string",
            "description": "Timezone"
          },
          "title": {
            "type": "string",
            "description": "Title"
          }
        },
        "description": "Update a viewing room."
      },
      "postApiV1ViewingRoom": {
        "required": [
          "partner_id"
        ],
        "type": "object",
        "properties": {
          "partner_id": {
            "type": "string",
            "description": "Partner ID"
          },
          "ar_image_id": {
            "type": "string",
            "description": "AR Image ID"
          },
          "body": {
            "type": "string",
            "description": "Main text"
          },
          "end_at": {
            "type": "string",
            "description": "End datetime"
          },
          "intro_statement": {
            "type": "string",
            "description": "Introduction"
          },
          "pull_quote": {
            "type": "string",
            "description": "Pullquote"
          },
          "start_at": {
            "type": "string",
            "description": "Start datetime"
          },
          "time_zone": {
            "type": "string",
            "description": "Timezone"
          },
          "title": {
            "type": "string",
            "description": "Title"
          }
        },
        "description": "Create a viewing room."
      },
      "postApiV1AddressVerification": {
        "required": [
          "address_line_1",
          "country",
          "postal_code"
        ],
        "type": "object",
        "properties": {
          "address_line_1": {
            "type": "string",
            "description": "Address line 1"
          },
          "address_line_2": {
            "type": "string",
            "description": "Address line 2"
          },
          "city": {
            "type": "string",
            "description": "City"
          },
          "postal_code": {
            "type": "string",
            "description": "Postal code"
          },
          "region": {
            "type": "string",
            "description": "Region"
          },
          "country": {
            "type": "string",
            "description": "Country (ISO 2-letter code)"
          }
        },
        "description": "Verify an address"
      },
      "postApiV1ClientApplicationIdClientApplicationPartner": {
        "required": [
          "partner_id"
        ],
        "type": "object",
        "properties": {
          "partner_id": {
            "type": "string",
            "description": "Partner id."
          }
        }
      },
      "postApiV1FairBoothImport": {
        "required": [
          "data",
          "fair_id"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "Fair exhibitor data in json format, typically coming from Waves (see fair_booth_data.json for example)",
            "items": {
              "type": "string"
            }
          },
          "fair_id": {
            "type": "string",
            "description": "Fair id."
          }
        },
        "description": "Executes fair booth creation process."
      }
    }
  },
  "x-original-swagger-version": "2.0"
}